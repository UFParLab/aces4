import "reom_rhf_defs.sialx" 
import "reom_vars.sialx"
import "tran_eom.sialx"

SIAL R_EE_EOM_CCSD_RHF

temp Taaai[a,a1,a2,i]

#***********************************************************

PROC READ_AMP
#     -------------
print "reading persistent arrays"
#     -------------
restore_persistent has_singles "has_singles"
server_barrier
restore_persistent ca    "ca"
restore_persistent Fock_a "fock_a"
restore_persistent R1k1_a   "C1_a"
restore_persistent RB1_a    "B1_a"
restore_persistent T2aa "T2old_aa"
restore_persistent T2ab "T2old_ab" 
restore_persistent Lam2aa "l2old_aa"
restore_persistent Lam2ab "l2old_ab"
restore_persistent VSpipi "VSpipi"
restore_persistent Vaaii "Vaaii"
restore_persistent Viaai "Viaai"
restore_persistent Vaaai "Vaaai"
restore_persistent VSaaai "VSaaai"
restore_persistent Vpiqj "Vpiqj"
restore_persistent dipole "scf_dipole"
set_persistent dipole "scf_dipole"
restore_persistent NucDip "nuclear_dipole"
set_persistent NucDip "nuclear_dipole"
server_barrier


#
# put T1 amplitudes in statics
#

pardo a,i
    put t1a[a,i] = 0.0
    put lam1a[i,a] = 0.0
endpardo a,i

server_barrier
if has_singles == 1.0
restore_persistent t1a "t1a_old"
restore_persistent Lam1a  "l1a_old"
endif

has_singles = 0.0

server_barrier
execute get_my_rank rank
myrank = (int)rank
if myrank == root
    do a
    do i
        get t1a[a,i]
        Tai[a,i] = t1a[a,i]
        St1a[a,i] = t1a[a,i]
        St1b[a,i] = t1a[a,i]
        put t1b[a,i] = Tai[a,i]
    enddo i
    enddo a
endif
broadcast_from root St1a
broadcast_from root St1b

pardo i,a
    get Lam1A[i,a]
    Tia[i,a] = Lam1A[i,a]
    put Lam1B[i,a] = Tia[i,a]
endpardo i,a

# for RHF T2bb=T2aa

pardo a,i,b,j
    request T2aa[a,i,b,j]
    T1aibj[a,i,b,j] = t2aa[a,i,b,j]
    prepare T2bb[a,i,b,j] = T1aibj[a,i,b,j]
endpardo a,i,b,j
server_barrier

ENDPROC READ_AMP

#    ------------------------------------------------------------------------
#    HBAR section
#
#    ported from ACESIII xreom_rhf_pro.sial
#    ------------------------------------------------------------------------

PROC HBAR_AB_CCPT

#     alpha-alpha spin component first. 
#     --------------------------------- 

pardo a, a1 

# diagram 1
    tpp[a,a1] = fock_a[a,a1]       

# diagram 3
    do i 
	t1pp[a,a1] = St1a[a,i]*fock_a[i,a1] 
	tpp[a,a1] -= t1pp[a,a1] 
    enddo i 

    put HBAR_aa[a,a1] += tpp[a,a1] 

endpardo a, a1 

pardo a, a1, a2, i  

    request VSaaai[a1,a,a2,i]   

# diagram 2
    t1pp[a,a1]         = VSaaai[a1,a,a2,i]*St1a[a2,i] 
    put HBAR_aa[a,a1]                 += t1pp[a,a1] 

endpardo a, a1, a2, i  

pardo a, a1, b, j  

    request Vaabj[a1,a,b,j]   
    t1pp[a,a1]         = Vaabj[a1,a,b,j]*St1b[b,j] 
    tppqq[a,a1,j,b]    = Vaabj[a1,a,b,j]

# diagram 2
    put HBAR_aa[a,a1]                += t1pp[a,a1] 

# diagram 1
    prepare HBAR_AIBC_aabb[a,a1,j,b] += tppqq[a,a1,j,b] 

endpardo a, a1, b, j  

# diagram 4
pardo a, i1, a2, i  

    request T2aa[a,i,a2,i1]  
    tpppp[a,i,a2,i1]  = T2aa[a,i,a2,i1] 

    do a1 
	request VSpipi[a2,i1,a1,i]    
	t1pp[a,a1]         = tpppp[a,i,a2,i1]*VSpipi[a2,i1,a1,i] 
	t1pp[a,a1]        *= -0.5  
	put HBAR_aa[a,a1] += t1pp[a,a1] 
    enddo a1 

endpardo a, i1, a2, i  

# diagram 4
pardo a, i, b, j  

    request T2ab[a,i,b,j]  
    tppqq[a,i,b,j]  = T2ab[a,i,b,j] 

    do a1  

	request Vpiqj[a1,i,b,j]    
	t1pp[a,a1]         = tppqq[a,i,b,j]*Vpiqj[a1,i,b,j] 
	t1pp[a,a1]        *= -1.0  
	put HBAR_aa[a,a1] += t1pp[a,a1] 

    enddo a1  

endpardo a, i, b, j  

#     alpha-alpha spin component done. 
#     -------------------------------- 

#     beta-beta spin component next. 
#     ------------------------------ 

#     beta-beta spin component done. 
#     ------------------------------ 

server_barrier 
do a 
do a1 
GET HBAR_aa[a,a1] 
LHBAR_aa[a,a1] = HBAR_aa[a,a1] 
enddo a1 
enddo a 
server_barrier 

ENDPROC HBAR_AB_CCPT

PROC HBAR_IJ_CCPT
#     ------------

#     alpha-alpha spin component first. 
#     --------------------------------- 

pardo i, i1 

# diagram 1
    tpp[i1,i] = fock_a[i1,i] 

# diagram 3
    do a 
	t1pp[i1,i] = fock_a[i1,a]*St1a[a,i] 
	tpp[i1,i] += t1pp[i1,i] 
    enddo a 

# diagram 2
    do a 
    do i2 
	request VSpipi[a,i2,i,i1]  
	t1pp[i1,i] = VSpipi[a,i2,i,i1]*St1a[a,i2]  
	tpp[i1,i] += t1pp[i1,i] 
    enddo i2 
    enddo a 

# diagram 2
    do b 
    do j 
	request Vpiqj[i,i1,b,j]  
	t1pp[i1,i] = Vpiqj[i,i1,b,j]*St1b[b,j]  
	tpp[i1,i] += t1pp[i1,i] 
    enddo j 
    enddo b 

# diagram 4
    do a 
    do a1 
    do i2 
	request T2aa[a,i,a1,i2]  
	request VSpipi[a,i1,a1,i2]   

	tpppp[a,i,a1,i2]  = T2aa[a,i,a1,i2]

	t1pp[i1,i]        = tpppp[a,i,a1,i2]*VSpipi[a,i1,a1,i2] 
	t1pp[i1,i]       *= 0.5 
	tpp[i1,i]        += t1pp[i1,i] 
    enddo i2 
    enddo a1 
    enddo a 

# diagram 4
    do a 
    do b 
    do j 
	request T2ab[a,i,b,j]  
	request Vpiqj[a,i1,b,j]   

	tppqq[a,i,b,j]  = T2ab[a,i,b,j]
	t1pp[i1,i]      = tppqq[a,i,b,j]*Vpiqj[a,i1,b,j] 
	tpp[i1,i]      += t1pp[i1,i] 
    enddo j 
    enddo b 
    enddo a 

    put HBAR_ii[i1,i] = tpp[i1,i] 

endpardo i, i1 

#     done alpha-alpha spin component. 
#     -------------------------------- 

#     beta-beta spin component next. 
#     ------------------------------ 

pardo j, j1 

# diagram 1
    tqq[j1,j] = fock_a[j1,j] 

# diagram 3
    do b 
	t1qq[j1,j] = fock_a[j1,b]*St1b[b,j] 
	tqq[j1,j] += t1qq[j1,j] 
    enddo b 

# diagram 2
    do b 
    do j2 
	request VSqjqj[b,j2,j,j1]  
	t1qq[j1,j] = VSqjqj[b,j2,j,j1]*St1b[b,j2]  
	tqq[j1,j] += t1qq[j1,j] 
    enddo j2 
    enddo b 

# diagram 2
    do a 
    do i 
	request Vpiqj[a,i,j,j1]  
	t1qq[j1,j] = Vpiqj[a,i,j,j1]*St1a[a,i]  
	tqq[j1,j] += t1qq[j1,j] 
    enddo i 
    enddo a 

# diagram 4
    do b 
    do b1 
    do j2 
	request T2bb[b,j,b1,j2]  
	request VSqjqj[b,j1,b1,j2]   

	tqqqq[b,j,b1,j2]  = T2bb[b,j,b1,j2]
	t1qq[j1,j]        = tqqqq[b,j,b1,j2]*VSqjqj[b,j1,b1,j2] 
	t1qq[j1,j]       *= 0.5 
	tqq[j1,j]        += t1qq[j1,j] 
    enddo j2 
    enddo b1 
    enddo b 

# diagram 4
    do a 
    do b 
    do i 
	request T2ab[a,i,b,j]  
	request Vpiqj[a,i,b,j1]   

	tppqq[a,i,b,j]  = T2ab[a,i,b,j]
	t1qq[j1,j]      = tppqq[a,i,b,j]*Vpiqj[a,i,b,j1] 
	tqq[j1,j]      += t1qq[j1,j] 
    enddo i 
    enddo b 
    enddo a 

    put HBAR_jj[j1,j] = tqq[j1,j] 

endpardo j, j1 

server_barrier 
do i 
do i1 
GET              HBAR_ii[i,i1] 
LHBAR_ii[i,i1] = HBAR_ii[i,i1]  
enddo i1 
enddo i 
do j 
do j1 
GET              HBAR_jj[j,j1] 
LHBAR_jj[j,j1] = HBAR_jj[j,j1]  
enddo j1 
enddo j 
server_barrier 

#     done beta-beta spin component. 
#     ------------------------------ 

ENDPROC HBAR_IJ_CCPT

PROC HBAR_IB_CCPT
#     ------------

#     alpha-alpha spin component first. 
#     --------------------------------- 

pardo i, a 

# diagram 1
    tpp[i,a] = fock_a[i,a] 

# diagram 2
    do a1 
    do i1 
	request VSpipi[a,i,a1,i1]  
	t1pp[i,a] = VSpipi[a,i,a1,i1]*St1a[a1,i1] 
	tpp[i,a] += t1pp[i,a] 
    enddo i1 
    enddo a1 

# diagram 2
    do b 
    do j 
	request Vpiqj[a,i,b,j]  
	t1pp[i,a] = Vpiqj[a,i,b,j]*St1b[b,j] 
	tpp[i,a] += t1pp[i,a] 
    enddo j 
    enddo b 

    put HBAR_ia[i,a] = tpp[i,a] 

endpardo i, a 

#     done alpha-alpha spin component. 
#     -------------------------------- 

#     beta-beta spin component next. 
#     ------------------------------ 

pardo j, b 

# diagram 1
    tqq[j,b] = fock_a[j,b] 

# diagram 2
    do b1 
    do j1 
	request VSqjqj[b,j,b1,j1]  
	t1qq[j,b] = VSqjqj[b,j,b1,j1]*St1b[b1,j1] 
	tqq[j,b] += t1qq[j,b] 
    enddo j1 
    enddo b1 

# diagram 2
    do a 
    do i 
	request Vpiqj[a,i,b,j]  
	t1qq[j,b] = Vpiqj[a,i,b,j]*St1a[a,i] 
	tqq[j,b] += t1qq[j,b] 
    enddo i 
    enddo a 

    put HBAR_jb[j,b] = tqq[j,b] 

endpardo j, b 

#     done alpha-alpha spin component. 
#     -------------------------------- 

server_barrier 
do a 
do i 
GET HBAR_ia[i,a] 
LHBAR_ia[i,a] = HBAR_ia[i,a]  
enddo i 
enddo a 
do b 
do j 
GET HBAR_jb[j,b] 
LHBAR_jb[j,b] = HBAR_jb[j,b]  
enddo j 
enddo b 
server_barrier 

ENDPROC HBAR_IB_CCPT

PROC HBAR_IJKL_CCPT
#     --------------

#     (alpha,alpha,alpha,alpha) spin component. 
#     ----------------------------------------- 

pardo i, i2, i1, i3 

# diagram 1
    request VSpipi[i,i1,i2,i3]  
    tpppp[i,i1,i2,i3] = VSpipi[i,i1,i2,i3] 

# diagram 2
    do a
	request VSpipi[i1,i,a,i2]   
	t1pppp[i,i1,i2,i3] = VSpipi[i1,i,a,i2]*St1a[a,i3] 
	tpppp[i,i1,i2,i3] += t1pppp[i,i1,i2,i3] 
    enddo a

# diagram 2
    do a
	request VSpipi[i3,i,a,i2]   
	t1pppp[i,i1,i2,i3] = VSpipi[i3,i,a,i2]*St1a[a,i1] 
	tpppp[i,i1,i2,i3] -= t1pppp[i,i1,i2,i3] 
    enddo a

# diagram 3
    do a 
    do a1 
	request VSpipi[a,i,a1,i2]  
	request T2aa[a,i1,a1,i3]  

	t1pppp[a,i1,a1,i3]  = T2aa[a,i1,a1,i3] 

	t4pppp[i,i1,i2,i3] = VSpipi[a,i,a1,i2]*t1pppp[a,i1,a1,i3] 
	t4pppp[i,i1,i2,i3] *= 0.5 
	tpppp[i,i1,i2,i3]  += t4pppp[i,i1,i2,i3] 
    enddo a1 
    enddo a 

    prepare HBAR_iiii[i,i1,i2,i3] = tpppp[i,i1,i2,i3] 

endpardo i, i2, i1, i3 

#     done (alpha,alpha,alpha,alpha) spin component. 
#     ---------------------------------------------- 

#     (beta,beta,beta,beta) spin component. 
#     ------------------------------------- 

#     done (beta,beta,beta,beta) spin component. 
#     ------------------------------------------ 

#     (alpha,alpha,beta,beta) spin component. 
#     --------------------------------------- 

pardo i, i1, j2, j3 

# diagram 1
    request Vpiqj[i,i1,j2,j3]  
    tppqq[i,i1,j2,j3] = Vpiqj[i,i1,j2,j3] 

# diagram 2
    do b
	request Vpiqj[i1,i,b,j2]   
	t1ppqq[i,i1,j2,j3] = Vpiqj[i1,i,b,j2]*St1b[b,j3] 
	tppqq[i,i1,j2,j3] += t1ppqq[i,i1,j2,j3] 
    enddo b

# diagram 2
    do a
	request Vpiqj[a,i,j2,j3]   
	t1ppqq[i,i1,j2,j3] = Vpiqj[a,i,j2,j3]*St1a[a,i1] 
	tppqq[i,i1,j2,j3] += t1ppqq[i,i1,j2,j3] 
    enddo a

# diagram 3
    do a 
    do b 
	request Vpiqj[a,i,b,j2]  
	request T2ab[a,i1,b,j3]  

	t1ppqq[a,i1,b,j3]  = T2ab[a,i1,b,j3] 
	t3ppqq[i,i1,j2,j3] = Vpiqj[a,i,b,j2]*t1ppqq[a,i1,b,j3] 
	tppqq[i,i1,j2,j3] += t3ppqq[i,i1,j2,j3] 
    enddo b 
    enddo a 

    prepare HBAR_iijj[i,i1,j2,j3] = tppqq[i,i1,j2,j3] 

endpardo i, i1, j2, j3 

#     done (alpha,alpha,beta,beta) spin component. 
#     -------------------------------------------- 

ENDPROC HBAR_IJKL_CCPT

PROC HBAR_AIBC_CCPT
#     --------------

#     There are four spin cases to compute:
#     1. H^{ai}_{bc) --> HBAR_AIBC_aaaa  
#     2. H^{AI}_{BC) --> HBAR_AIBC_bbbb  
#     3. H^{Ai}_{Bc) --> HBAR_AIBC_bbaa  
#     4. H^{aI}_{bC) --> HBAR_AIBC_aabb  

#     Note that since I 'always' store arrays in (11|22) form the 
#     notation, although valid, is slightly confusing. The 
#     storage pattern is therefore array(a,b,i,c).   

#    ------------------------------------------------------------------------

#     AAAA spin combination. 
#     ---------------------- 

#     BBBB spin combination. 
#     ---------------------- 

#     AABB spin combination. 
#     ---------------------- 

pardo i1, a1, b2, j 

    request Vpiqj[a1,i1,b2,j]  

    do a 
	t1ppqq[a,a1,j,b2]                  = Vpiqj[a1,i1,b2,j]*St1a[a,i1] 
	t1ppqq[a,a1,j,b2]                 *= -1.0  
	prepare HBAR_AIBC_aabb[a,a1,j,b2] += t1ppqq[a,a1,j,b2] 
    enddo a 

endpardo i1, a1, b2, j 

#     BBAA spin combination. 
#     ---------------------- 

ENDPROC HBAR_AIBC_CCPT

PROC HBAR_JKIA_CCPT
#     --------------

#     There are four spin cases to compute:
#     1. H^{jk}_{ia) --> HBAR_JKIA_aaaa  
#     2. H^{JK}_{IA) --> HBAR_JKIA_bbbb  
#     3. H^{Jk}_{Ia) --> HBAR_JKIA_bbaa  
#     4. H^{jK}_{iA) --> HBAR_JKIA_aabb  

#     Note that since I 'always' store arrays in (11|22) form the 
#     notation, although valid, is slightly confusing. The 
#     storage pattern is therefore array(a,b,i,c).   

#    ------------------------------------------------------------------------

#     AAAA spin combination. 
#     ---------------------- 

pardo i, i1, i2, a 

    request VSpipi[i,i1,a,i2]   
    tpppp[i,i1,a,i2] = VSpipi[i,i1,a,i2] 

    do a1 
	request VSpipi[a1,i1,a,i2]   
	t1pppp[i,i1,a,i2] = VSpipi[a1,i1,a,i2]*St1a[a1,i] 
	tpppp[i,i1,a,i2] += t1pppp[i,i1,a,i2] 
    enddo a1 

    t1pppp[i1,i,i2,a]                 = tpppp[i,i1,a,i2] 
    prepare HBAR_JKIA_aaaa[i1,i,i2,a] = t1pppp[i1,i,i2,a] 

endpardo i, i1, i2, a 

#     BBBB spin combination. 
#     ---------------------- 

#     AABB spin combination. 
#     ---------------------- 

pardo i, i1, j2, b 

    request Vpiqj[i,i1,b,j2]   
    tppqq[i,i1,b,j2] = Vpiqj[i,i1,b,j2] 

    do a1 
	request Vpiqj[a1,i1,b,j2]   
	t1ppqq[i,i1,b,j2] = Vpiqj[a1,i1,b,j2]*St1a[a1,i] 
	tppqq[i,i1,b,j2] += t1ppqq[i,i1,b,j2] 
    enddo a1 

    t1ppqq[i1,i,j2,b]                 = tppqq[i,i1,b,j2] 
    prepare HBAR_JKIA_aabb[i1,i,j2,b] = t1ppqq[i1,i,j2,b] 

endpardo i, i1, j2, b 

#     BBAA spin combination. 
#     ---------------------- 

ENDPROC HBAR_JKIA_CCPT

PROC HBAR_IAJK_CCPT
#     --------------

#     There are four spin cases to compute:
#     1. H^{ia)_{jk} --> HBAR_IAJK_aaaa  
#     1. H^{IA)_{JK} --> HBAR_IAJK_bbbb  
#     1. H^{Ia)_{Jk} --> HBAR_IAJK_bbaa  
#     1. H^{iA)_{jK} --> HBAR_IAJK_aabb  

#     Note that since I 'always' store arrays in (11|22) form the 
#     notation, although valid, is slightly confusing. The 
#     storage pattern is therefore array(a,b,i,c).   

#    ------------------------------------------------------------------------

#     Form the two-particle intermediates needed. 
#     ------------------------------------------- 

pardo i1, a1, a, i

    request Viaai[i1,a1,a,i]  # +
    request Vaaii[a,a1,i1,i]  # -
    Tiaai[i1,a1,a,i]  = Vaaii[a,a1,i1,i]
    Tiaai[i1,a1,a,i] -= Viaai[i1,a1,a,i]
    Tiaai[i1,a1,a,i] *= -1.0

    prepare WHIAAI[i1,a1,a,i] = Tiaai[i1,a1,a,i]

endpardo i1, a1, a, i

pardo j1, j, a, a1

    request Vaajj[a,a1,j1,j] 
    Tjjaa[j1,j,a,a1]  = Vaajj[a,a1,j1,j]
    Tjjaa[j1,j,a,a1] *= -1.0

    prepare WHJJAA[j1,j,a,a1] = Tjjaa[j1,j,a,a1]

endpardo j1, j, a, a1 

server_barrier 

#     AAAA spin combination. 
#     ---------------------- 

pardo a, i, i1, i2

    request VSpipi[i,i1,a,i2] 
    Tiiai[i,i1,a,i2]  = VSpipi[i,i1,a,i2]

    do i3
	request VSpipi[i,i1,i3,i2] 
	T1iiai[i,i1,a,i2] = VSpipi[i,i1,i3,i2]*St1a[a,i3]
	Tiiai[i,i1,a,i2] -= T1iiai[i,i1,a,i2]
    enddo i3

    prepare HBAR_IAJK_aaaa[i,i1,a,i2] += Tiiai[i,i1,a,i2]

endpardo a, i, i1, i2

pardo i, i1, a, i2

    Tiiai[i,i1,a,i2]  = 0.0  
    TSiiai[i,i2,a,i1] = 0.0

    do a1

	request T2aa[a,i1,a1,i2] 
# whiaai contains anti-symmetrized integrals now
	request WHIAAI[i,a1,a,i2] 

	T1iiai[i,i1,a,i2]  = T2aa[a,i1,a1,i2]*Fock_a[i,a1]
	Tiiai[i,i1,a,i2]  -= T1iiai[i,i1,a,i2]

        TSiiai[i,i2,a,i1] = 0.0

	T1iiai[i,i1,a,i2]  = WHIAAI[i,a1,a,i2]*St1a[a1,i1]
	T2iiai[i,i2,a,i1]  = T1iiai[i,i1,a,i2]

	Tiiai[i,i1,a,i2]  += T1iiai[i,i1,a,i2]
	TSiiai[i,i2,a,i1] -= T2iiai[i,i2,a,i1]

    enddo a1

    prepare HBAR_IAJK_aaaa[i,i1,a,i2] += Tiiai[i,i1,a,i2]
    prepare HBAR_IAJK_aaaa[i,i2,a,i1] += TSiiai[i,i2,a,i1]

endpardo i, i1, a, i2

pardo i, a, a1, a2

    request VSaaai[a2,a,a1,i]  # +

    do i1
	do i2

	    request T2aa[a1,i1,a2,i2] 
	    tpppp[a1,i1,a2,i2]  = T2aa[a1,i1,a2,i2] 

	    T1iiai[i,i1,a,i2]   = tpppp[a1,i1,a2,i2]*VSaaai[a2,a,a1,i]
	    T1iiai[i,i1,a,i2]  *= 0.5
	    prepare HBAR_IAJK_aaaa[i,i1,a,i2] += T1iiai[i,i1,a,i2]

	enddo i2
    enddo i1

endpardo i, a, a1, a2

pardo i, i1, a, i2

    Tiiai[i,i1,a,i2]  = 0.0  
    TSiiai[i,i2,a,i1] = 0.0

    do a1
    do i3

	request T2aa[a,i2,a1,i3] 
	request VSpipi[i1,i,a1,i3]    # +

	T1iiai[i,i1,a,i2]   = VSpipi[i1,i,a1,i3]*T2aa[a,i2,a1,i3]
	T2iiai[i,i2,a,i1]   = T1iiai[i,i1,a,i2]
	Tiiai[i,i1,a,i2]   += T1iiai[i,i1,a,i2]
	TSiiai[i,i2,a,i1]  -= T2iiai[i,i2,a,i1]

    enddo i3
    enddo a1

    prepare HBAR_IAJK_aaaa[i,i1,a,i2] += Tiiai[i,i1,a,i2]
    prepare HBAR_IAJK_aaaa[i,i2,a,i1] += TSiiai[i,i2,a,i1]

endpardo i, i1, a, i2

pardo i, i1, a, i2

    Tiiai[i,i1,a,i2]  = 0.0  
    TSiiai[i,i2,a,i1] = 0.0

    do b
    do j

	request T2ab[a,i2,b,j] 
	request Vpiqj[i1,i,b,j]     # +

	T1iiai[i,i1,a,i2]  = Vpiqj[i1,i,b,j]*T2ab[a,i2,b,j]
	Tiiai[i,i1,a,i2]  += T1iiai[i,i1,a,i2]

	T2iiai[i,i2,a,i1]  = T1iiai[i,i1,a,i2]
	TSiiai[i,i2,a,i1] -= T2iiai[i,i2,a,i1]

    enddo j
    enddo b

    prepare HBAR_IAJK_aaaa[i,i1,a,i2] += Tiiai[i,i1,a,i2]
    prepare HBAR_IAJK_aaaa[i,i2,a,i1] += TSiiai[i,i2,a,i1]

endpardo i, i1, a, i2

#     AABB spin combination. 
#     ---------------------- 


pardo i, i1, b, j

    request Vpiqj[i,i1,b,j] 
    Tiibj[i,i1,b,j] = Vpiqj[i,i1,b,j]

    do a

	request T2ab[a,i1,b,j] 
	request Viabj[i,a,b,j] 

	T1iibj[i,i1,b,j] = T2ab[a,i1,b,j]*Fock_a[i,a]
	Tiibj[i,i1,b,j] += T1iibj[i,i1,b,j]

	T1iibj[i,i1,b,j] = Viabj[i,a,b,j]*St1a[a,i1]
	Tiibj[i,i1,b,j] += T1iibj[i,i1,b,j]

	do b1

	    request T2ab[a,i1,b1,j] 
	    request Vbbai[b1,b,a,i]   

	    tppqq[a,i1,b1,j]  = T2ab[a,i1,b1,j] 

	    T1iibj[i,i1,b,j]  = Vbbai[b1,b,a,i]*tppqq[a,i1,b1,j]
	    Tiibj[i,i1,b,j]  += T1iibj[i,i1,b,j]

	enddo b1

	do i2

	    request T2ab[a,i2,b,j] 
	    request VSpipi[i1,i,a,i2]   # +

	    T1iibj[i,i1,b,j] = VSpipi[i1,i,a,i2]*T2ab[a,i2,b,j]
	    Tiibj[i,i1,b,j] += T1iibj[i,i1,b,j]

	enddo i2

	do j1

	    request T2ab[a,i1,b,j1] 
	    request Vpiqj[a,i,j,j1]      # +

	    T1iibj[i,i1,b,j] = Vpiqj[a,i,j,j1]*T2ab[a,i1,b,j1]
	    Tiibj[i,i1,b,j] -= T1iibj[i,i1,b,j]

	enddo j1

    enddo a

    do j1

	request Vpiqj[i,i1,j1,j] 

	T1iibj[i,i1,b,j] = Vpiqj[i,i1,j1,j]*St1b[b,j1]
	Tiibj[i,i1,b,j] -= T1iibj[i,i1,b,j]

    enddo j1

    do b1

        request Vbbii[b,b1,i,i1]
        Tiibb[i,i1,b,b1] = Vbbii[b,b1,i,i1]

	T1iibj[i,i1,b,j] = Tiibb[i,i1,b,b1]*St1b[b1,j]
	Tiibj[i,i1,b,j] += T1iibj[i,i1,b,j]

	do j2

	    request T2bb[b1,j2,b,j] 
	    request Vpiqj[i1,i,b1,j2]    # +

	    T1iibj[i,i1,b,j] = Vpiqj[i1,i,b1,j2]*T2bb[b1,j2,b,j]
	    Tiibj[i,i1,b,j] += T1iibj[i,i1,b,j]

	enddo j2

    enddo b1

    prepare HBAR_IAJK_aabb[i,i1,b,j] = Tiibj[i,i1,b,j]

endpardo i, i1, b, j

#     BBAA spin combination. 
#     ---------------------- 

#     BBBB spin combination. 
#     ---------------------- 

server_barrier 

ENDPROC HBAR_IAJK_CCPT

PROC HBAR_AJIB_CCPT
#     --------------

#     There are four spin cases to compute:
#     1. H^{aj)_{ib} --> HBAR_AJIB_aaaa  
#     2. H^{AJ)_{IB} --> HBAR_AJIB_bbbb  
#     3. H^{aJ)_{iB} --> HBAR_AJIB_aabb  
#     4. H^{Aj)_{Ib} --> HBAR_AJIB_bbaa  
#     5. H^{Aj)_{iB} --> HBAR_AJIB_iibb   
#     6. H^{aJ)_{Ib} --> HBAR_AJIB_jjaa   

#     Note that since I 'always' store arrays in (11|22) form the 
#     notation, although valid, is slightly confusing. The 
#     storage pattern is therefore array(a,b,i,c).   

#    ------------------------------------------------------------------------

#     AAAA spin combination. 
#     ---------------------- 

pardo i1, a1, a, i

    request Viaai[i1,a1,a,i]  
    request Vaaii[a,a1,i1,i]  
    Tiaai[i1,a1,a,i]                   = Vaaii[a,a1,i1,i]
    Tiaai[i1,a1,a,i]                  -= Viaai[i1,a1,a,i]
    Tiaai[i1,a1,a,i]                  *= -1.0
    prepare HBAR_AJIB_aaaa[i1,a1,a,i] += Tiaai[i1,a1,a,i]

endpardo i1, a1, a, i

pardo i, i1, a1, i2  

    request VSpipi[a1,i1,i,i2] 

    do a
	T1iaai[i1,a1,a,i]                  = VSpipi[a1,i1,i,i2]*St1a[a,i2]
	T1iaai[i1,a1,a,i]                 *= -1.0  
	prepare HBAR_AJIB_aaaa[i1,a1,a,i] += T1iaai[i1,a1,a,i]
    enddo a

endpardo i, i1, a1, i2

pardo i1, a1, a, a2  

    request VSaaai[a2,a,a1,i1] 

    do i 
	T2iaai[i,a,a1,i1]                  = VSaaai[a2,a,a1,i1]*St1a[a2,i]
	T1iaai[i1,a1,a,i]                  = T2iaai[i,a,a1,i1]
	prepare HBAR_AJIB_aaaa[i1,a1,a,i] += T1iaai[i1,a1,a,i]
    enddo i

endpardo i1, a1, a, a2  

pardo i, a, a2, i2  

    request T2aa[a2,i,a,i2]  
    T1aiai[a2,i,a,i2]   = T2aa[a2,i,a,i2]

    do a1 
    do i1

	request VSpipi[a2,i2,a1,i1]  
	Taiai[a1,i2,a2,i1]                 = VSpipi[a2,i2,a1,i1]
	T1iaai[i1,a1,a,i]                  = T1aiai[a2,i,a,i2]*Taiai[a1,i2,a2,i1]
	T1iaai[i1,a1,a,i]                 *= -1.0  
	prepare HBAR_AJIB_aaaa[i1,a1,a,i] += T1iaai[i1,a1,a,i]

    enddo i1
    enddo a1

endpardo i, a, a2, i2

pardo i1, a1, b, j

    request Vpiqj[a1,i1,b,j]  

    do a
    do i

	request T2ab[a,i,b,j]  
	T1iaai[i1,a1,a,i]                  = Vpiqj[a1,i1,b,j]*T2ab[a,i,b,j]
	prepare HBAR_AJIB_aaaa[i1,a1,a,i] += T1iaai[i1,a1,a,i]

    enddo i
    enddo a

endpardo i1, a1, b, j

#     BBBB spin combination. 
#     ---------------------- 

#     AABB spin combination. 
#     ---------------------- 

pardo i, a, b, j

    request Viabj[i,a,b,j] 
    Tiabj[i,a,b,j]                  = Viabj[i,a,b,j]
    prepare HBAR_AJIB_aabb[i,a,b,j]+= Tiabj[i,a,b,j]

endpardo i, a, b, j 

pardo i, a, b, b1  

    request Vbbai[b1,b,a,i]  

    do j

	Tjbai[j,b,a,i]                   = Vbbai[b1,b,a,i]*St1b[b1,j]
	T2jbai[j,b,a,i]                  = Tjbai[j,b,a,i]
	Tiabj[i,a,b,j]                   = Tjbai[j,b,a,i]  
	prepare HBAR_AJIB_aabb[i,a,b,j] += Tiabj[i,a,b,j]

    enddo j

endpardo i, a, b, b1  

pardo b, i, a, j

    Tiabj[i,a,b,j]  = 0.0  

    do j1

	request Vpiqj[a,i,j,j1]  
	T1iabj[i,a,b,j] = Vpiqj[a,i,j,j1]*St1b[b,j1]
	Tiabj[i,a,b,j] -= T1iabj[i,a,b,j]

    enddo j1

    prepare HBAR_AJIB_aabb[i,a,b,j] += Tiabj[i,a,b,j]

endpardo b, i, a, j 

pardo j, b, b1, j1

    request T2bb[b1,j,b,j1]  
    T2bjbj[b1,j,b,j1] = T2bb[b1,j,b,j1]

    do i
    do a

	request Vpiqj[a,i,b1,j1]  
	Tiabj[i,a,b,j]                   = T2bjbj[b1,j,b,j1]*Vpiqj[a,i,b1,j1]
	Tiabj[i,a,b,j]                  *= -1.0  
	prepare HBAR_AJIB_aabb[i,a,b,j] += Tiabj[i,a,b,j]

    enddo a
    enddo i

endpardo j, b, b1, j1 

pardo i1, a1, b, j

    request T2ab[a1,i1,b,j]  

    do a
    do i

	request VSpipi[a1,i1,a,i]  
	Tiabj[i,a,b,j]                   = T2ab[a1,i1,b,j]*VSpipi[a1,i1,a,i]
	prepare HBAR_AJIB_aabb[i,a,b,j] += Tiabj[i,a,b,j]

    enddo i
    enddo a

endpardo i1, a1, b, j 

#     BBAA spin combination. 
#     ---------------------- 

#     ABAB spin combination. 
#     ---------------------- 

pardo i1, b1, b, i

    request Vbbii[b,b1,i1,i]  
    Tiibb[i1,i,b,b1]                   = Vbbii[b,b1,i1,i]
    Tiibb[i1,i,b,b1]                  *= -1.0
    prepare HBAR_AJIB_iibb[i1,i,b,b1] += Tiibb[i1,i,b,b1]

endpardo i1, b1, b, i

pardo b1, b, a1, i1  

    request Vbbai[b1,b,a1,i1]  

    do i
	T1iibb[i1,i,b,b1]                  = Vbbai[b1,b,a1,i1]*St1a[a1,i]
	T2iibb[i1,i,b,b1]                  = T1iibb[i1,i,b,b1]  
	T2iibb[i1,i,b,b1]                 *= -1.0 
	prepare HBAR_AJIB_iibb[i1,i,b,b1] += T2iibb[i1,i,b,b1]
    enddo i

endpardo b1, b, a1, i1  

pardo i1, b1, b, i

    Tiibb[i1,i,b,b1] = 0.0 

    do j1
	request Vpiqj[i,i1,b1,j1]  
	T1iibb[i1,i,b,b1] = Vpiqj[i,i1,b1,j1]*St1b[b,j1]
	Tiibb[i1,i,b,b1] += T1iibb[i1,i,b,b1] 
    enddo j1

    prepare HBAR_AJIB_iibb[i1,i,b,b1] += Tiibb[i1,i,b,b1]

endpardo i1, b1, b, i

pardo i, b, j1, a1  

    request T2ab[a1,i,b,j1]  
    T1aibj[a1,i,b,j1] = T2ab[a1,i,b,j1]

    do i1
    do b1

	request Vpiqj[a1,i1,b1,j1]  
	T1iibb[i1,i,b,b1]                  = T1aibj[a1,i,b,j1]*Vpiqj[a1,i1,b1,j1]
	prepare HBAR_AJIB_iibb[i1,i,b,b1] += T1iibb[i1,i,b,b1]

    enddo b1
    enddo i1

endpardo i, b, j1, a1  

#     BABA spin combination. 
#     ---------------------- 

ENDPROC HBAR_AJIB_CCPT

PROC HBAR_ABCI_CCPT
#     --------------

#     There are four spin cases to compute:
#     1. H^{ab)_{ci} --> HBAR_ABCI_aaaa  
#     2. H^{AB)_{CI} --> HBAR_ABCI_bbbb  
#     3. H^{aB)_{cI} --> HBAR_ABCI_aabb  
#     4. H^{Ab)_{Ci} --> HBAR_ABCI_bbaa  

#     Note that since I 'always' store arrays in (11|22) form the 
#     notation, although valid, is slightly confusing. The 
#     storage pattern is therefore array(a,b,i,c).   

#    ------------------------------------------------------------------------

#     AAAA spin component. 
#     -------------------- 

#     BBBB spin component. 
#     -------------------- 

#     AABB spin component. 
#     -------------------- 

pardo a, a1, b, j 

    request Vaabj[a,a1,b,j]   
    prepare HBAR_ABCI_aabb[a,a1,b,j] += Vaabj[a,a1,b,j] 

endpardo a, a1, b, j 

pardo a, a1, a3, i2

    request VSaaai[a,a1,a3,i2]  

    do b
    do j

	request T2ab[a3,i2,b,j] 
	Tppqq[a1,a,b,j]                   = VSaaai[a,a1,a3,i2]*T2ab[a3,i2,b,j]
	prepare HBAR_ABCI_aabb[a1,a,b,j] += Tppqq[a1,a,b,j]

    enddo j
    enddo b

endpardo a, a1, a3, i2

pardo a, a1, b, j

    request Vaabj[a,a1,b,j] 

    do b1
    do j1

	request T2bb[b1,j1,b,j] 
	Tppqq[a1,a,b1,j1]                   = Vaabj[a,a1,b,j]*T2bb[b1,j1,b,j]
	prepare HBAR_ABCI_aabb[a1,a,b1,j1] += Tppqq[a1,a,b1,j1]

    enddo j1
    enddo b1

endpardo a, a1, b, j

pardo a1, a, j, b

    Tppqq[a1,a,b,j] = 0.0

    do i

	request T2ab[a1,i,b,j] 
	request Viabj[i,a,b,j] 

	T1ppqq[a1,a,b,j] = T2ab[a1,i,b,j]*fock_a[i,a]
	Tppqq[a1,a,b,j] -= T1ppqq[a1,a,b,j]

	T2ppqq[a1,a,b,j] = Viabj[i,a,b,j]*St1a[a1,i]
	Tppqq[a1,a,b,j] -= T2ppqq[a1,a,b,j]

    enddo i

    prepare HBAR_ABCI_aabb[a1,a,b,j] += Tppqq[a1,a,b,j]

endpardo a1, a, j, b

pardo a, a1, j, j1

    request WHJJAA[j1,j,a1,a] 
    tqqpp[j1,j,a1,a]  = WHJJAA[j1,j,a1,a] 

    do b
	Tppqq[a1,a,b,j]                   = tqqpp[j1,j,a1,a]*St1b[b,j1]
	prepare HBAR_ABCI_aabb[a1,a,b,j] += Tppqq[a1,a,b,j]
    enddo b

endpardo a, a1, j, j1

pardo a1, b, j1, i 

    request T2ab[a1,i,b,j1] 
    t0pqqp[a1,b,j1,i] = T2ab[a1,i,b,j1]

    do a
    do j
#   
	request Vpiqj[j1,j,a,i] 
	tqpqp[j1,i,j,a]   = Vpiqj[j1,j,a,i]
	Tppqq[a1,a,b,j] = t0pqqp[a1,b,j1,i]*tqpqp[j1,i,j,a] 
	prepare HBAR_ABCI_aabb[a1,a,b,j] += Tppqq[a1,a,b,j]

    enddo j 
    enddo a 

endpardo a1, b, j1, i 

pardo a, b1, b, i

    request Vbbai[b,b1,a,i]   

    do j
    do a1
	request T2ab[a1,i,b,j] 
	Tppqq[a1,a,b1,j]                   = T2ab[a1,i,b,j]*Vbbai[b,b1,a,i]
	Tppqq[a1,a,b1,j]                  *= -1.0
	prepare HBAR_ABCI_aabb[a1,a,b1,j] += Tppqq[a1,a,b1,j]
    enddo a1
    enddo j

endpardo a, b1, b, i


#     Done AABB spin component. 
#     ------------------------- 

#     BBAA spin component. 
#     -------------------- 

#     Done AABB spin component. 
#     ------------------------- 

server_barrier

ENDPROC HBAR_ABCI_CCPT

PROC AO4VIR

server_barrier

pardo j,sigma

    t1xj[sigma,j]=0.0

    do b
	txj[sigma,j]=St1b[b,j]*ca[sigma,b]
	t1xj[sigma,j]+=txj[sigma,j]
    enddo b
# 
    put Mxj[sigma,j]=t1xj[sigma,j]

endpardo j, sigma

pardo i, sigma

    t1xi[sigma,i]=0.0

    do a
	txi[sigma,i]=St1a[a,i]*ca[sigma,a]
	t1xi[sigma,i]+=txi[sigma,i]
    enddo a

    put Mxi[sigma,i]=t1xi[sigma,i]

endpardo i, sigma

server_barrier

#    Contract AOINT with half back transformed Amplitudes
#    ----------------------------------------------------

pardo mu,lambda,nu

    allocate Lxxxj[mu,lambda,nu,*]
    allocate Lxxxi[mu,lambda,nu,*]

    do sigma

	execute compute_integral_batch aoint[mu,lambda,nu,sigma]

	do j

	    get Mxj[sigma,j]

	    tmxxxj[mu,lambda,nu,j]=aoint[mu,lambda,nu,sigma]*Mxj[sigma,j]
	    Lxxxj[mu,lambda,nu,j]+=tmxxxj[mu,lambda,nu,j]

	enddo j
###
	do i

	    get Mxi[sigma,i]

	    tmxxxi[mu,lambda,nu,i]=aoint[mu,lambda,nu,sigma]*Mxi[sigma,i]
	    Lxxxi[mu,lambda,nu,i]+=tmxxxi[mu,lambda,nu,i]

	enddo i
###
    enddo sigma

    do j
	prepare Mxxxj[mu,lambda,nu,j]=Lxxxj[mu,lambda,nu,j]
    enddo j
    do i
	prepare Mxxxi[mu,lambda,nu,i]=Lxxxi[mu,lambda,nu,i]
    enddo i

    deallocate Lxxxi[mu,lambda,nu,*]
    deallocate Lxxxj[mu,lambda,nu,*]

endpardo mu,lambda,nu

server_barrier

#  2ND STAGE OF TRANSFORMATION
#  --------------------------- 

pardo mu, nu, j 

    allocate Lxxbj[mu,nu,*,j]

    do lambda  

	request Mxxxj[mu,nu,lambda,j] 

	do b

	    tmxxbj[mu,nu,b,j]=Mxxxj[mu,nu,lambda,j]*ca[lambda,b]
	    lxxbj[mu,nu,b,j]+=tmxxbj[mu,nu,b,j]

	enddo b
    enddo lambda  

    do b
	prepare Mxxbj[mu,nu,b,j]=lxxbj[mu,nu,b,j]
    enddo b

    deallocate Lxxbj[mu,nu,*,j]

endpardo mu, nu, j 

pardo mu, nu, i 

    allocate Lxxai[mu,nu,*,i]

    do lambda  

	request Mxxxi[mu,nu,lambda,i] 

	do a

	    tmxxai[mu,nu,a,i]=Mxxxi[mu,nu,lambda,i]*ca[lambda,a]
	    lxxai[mu,nu,a,i]+=tmxxai[mu,nu,a,i]

	enddo a
    enddo lambda  

    do a
	prepare Mxxai[mu,nu,a,i]=lxxai[mu,nu,a,i]
    enddo a

    deallocate Lxxai[mu,nu,*,i]

endpardo mu, nu, i 

server_barrier

#  end 2ND STAGE OF TRANSFORMATION
#  ------------------------------- 

pardo mu, b, j

    allocate Lxabj[mu,*,b,j]

    do lambda

	request Mxxbj[mu,lambda,b,j] 

	do a

	    tmxabj[mu,a,b,j]=Mxxbj[mu,lambda,b,j]*ca[lambda,a]
	    lxabj[mu,a,b,j]+=tmxabj[mu,a,b,j]

	enddo a

    enddo lambda

    do a
	prepare Mxabj[mu,a,b,j]=lxabj[mu,a,b,j]
    enddo a

    deallocate Lxabj[mu,*,b,j]

endpardo mu, b, j

pardo mu, a, i

    allocate Lxbai[mu,*,a,i]

    do lambda

	request Mxxai[mu,lambda,a,i] 

	do b

	    tmxbai[mu,b,a,i]=Mxxai[mu,lambda,a,i]*ca[lambda,b]
	    lxbai[mu,b,a,i]+=tmxbai[mu,b,a,i]

	enddo b

    enddo lambda

    do b
	prepare Mxbai[mu,b,a,i]=lxbai[mu,b,a,i]
    enddo b

    deallocate Lxbai[mu,*,a,i]

endpardo mu, a, i

pardo mu, a, i

    allocate Lxaai[mu,*,a,i]

    do lambda

	request Mxxai[mu,lambda,a,i] 

	do a1

	tmxaai[mu,a1,a,i]=Mxxai[mu,lambda,a,i]*ca[lambda,a1]
	lxaai[mu,a1,a,i]+=tmxaai[mu,a1,a,i]

	enddo a1

    enddo lambda

    do a1
	prepare Mxaai[mu,a1,a,i]=lxaai[mu,a1,a,i]
    enddo a1

    deallocate Lxaai[mu,*,a,i]

endpardo mu, a, i

pardo mu, b, j

    allocate Lxbbj[mu,*,b,j]

    do lambda

	request Mxxbj[mu,lambda,b,j] 

	do b1

	tmxbbj[mu,b1,b,j]=Mxxbj[mu,lambda,b,j]*ca[lambda,b1]
	lxbbj[mu,b1,b,j]+=tmxbbj[mu,b1,b,j]

	enddo b1

    enddo lambda

    do b1
	prepare Mxbbj[mu,b1,b,j]=lxbbj[mu,b1,b,j]
    enddo b1

    deallocate Lxbbj[mu,*,b,j]

endpardo mu, b, j

server_barrier

#  end 3RD STAGE OF TRANSFORMATION
#  ------------------------------- 

pardo a, b, j

    allocate Laabj[*,a,b,j]

    do mu

	request Mxabj[mu,a,b,j] 

	do a1

	    tmaabj[a1,a,b,j]=Mxabj[mu,a,b,j]*ca[mu,a1]
	    Laabj[a1,a,b,j]+=tmaabj[a1,a,b,j]

	enddo a1

    enddo mu

    do a1
	prepare HBAR_ABCI_aabb[a1,a,b,j]+=Laabj[a1,a,b,j]
    enddo a1

    deallocate Laabj[*,a,b,j]

endpardo a, b, j

#    ALPHA-ALPHA spin combination

ENDPROC AO4VIR

PROC form_H_CCPT

# ---------------------------------------------------------
#
# LHBAR_ii JNB verified A3
# LHBAR_ia JNB verified A3
# LHBAR_jb JNB verified A3
# LHBAR_aa JNB verified A3
# HBAR_iiii JNB verified A3
# HBAR_iijj JNB verified A3
# HBAR_JKIA_aaaa JNB verified A3
# HBAR_JKIA_aabb JNB verified A3
# HBAR_IAJK_aaaa JNB verified A3
# HBAR_IAJK_aabb JNB verified A3
# HBAR_AJIB_aaaa JNB verified A3
# HBAR_AJIB_aabb JNB verified A3
# HBAR_AJIB_iibb JNB verified A3
# HBAR_AIBC_aaaa JNB verified A3
# HBAR_AIBC_aabb JNB verified A3
# HBAR_ABCI_aaaa JNB verified A3
# HBAR_ABCI_aabb JNB verified A3
#
# ---------------------------------------------------------

print "-- Entering Hbar formation"

server_barrier
allocate LHBAR_ii[*,*]
allocate LHBAR_ia[*,*]
allocate LHBAR_jb[*,*]
allocate LHBAR_aa[*,*]
pardo i,i1
    put HBAR_ii[i,i1] = 0.0
endpardo i,i1
pardo i,a
    put HBAR_ia[i,a] = 0.0
endpardo i,a
pardo j,b
    put HBAR_jb[j,b] = 0.0
endpardo j,b
pardo a,a1
    put HBAR_aa[a,a1] = 0.0
endpardo a,a1
server_barrier

print "Forming H_ab"
CALL HBAR_AB_CCPT
server_barrier
print "Forming H_ij"
CALL HBAR_IJ_CCPT
server_barrier
print "Forming H_ib"
CALL HBAR_IB_CCPT
server_barrier

delete HBAR_ii
delete HBAR_ia
delete HBAR_jb

print "Forming H_ijkl"
CALL HBAR_IJKL_CCPT
server_barrier
print "Forming H_jkia"
CALL HBAR_JKIA_CCPT
server_barrier
print "Forming H_iajk"
CALL HBAR_IAJK_CCPT
server_barrier

print "Forming H_iabc"
CALL HBAR_AIBC_CCPT
server_barrier
print "Forming H_ajib"
CALL HBAR_AJIB_CCPT
server_barrier ## keep this barrier
print "Forming H_abci"
CALL HBAR_ABCI_CCPT
server_barrier

call AO4VIR

server_barrier
print "Finishing H_aibc"
pardo a, a1, a2, i
    request                             HBAR_AIBC_aabb[a,a1,i,a2]
    request                             HBAR_AIBC_aabb[a,a2,i,a1]
    tpppp[a,a1,i,a2]                  = HBAR_AIBC_aabb[a,a1,i,a2]
    t1pppp[a,a1,i,a2]                 = HBAR_AIBC_aabb[a,a2,i,a1]
    tpppp[a,a1,i,a2]                 -= t1pppp[a,a1,i,a2]
    prepare HBAR_AIBC_aaaa[a,a1,i,a2] = tpppp[a,a1,i,a2]
endpardo a, a1, a2, i

print "Finishing H_abci"
pardo a, a1, a2, i
    request                             HBAR_ABCI_aabb[a,a1,a2,i]
    request                             HBAR_ABCI_aabb[a2,a1,a,i]
    tpppp[a,a1,a2,i]                  = HBAR_ABCI_aabb[a,a1,a2,i]
    t1pppp[a,a1,a2,i]                 = HBAR_ABCI_aabb[a2,a1,a,i]
    tpppp[a,a1,a2,i]                 -= t1pppp[a,a1,a2,i]
    prepare HBAR_ABCI_aaaa[a,a1,a2,i] = tpppp[a,a1,a2,i]
endpardo a, a1, a2, i
server_barrier



server_barrier

ENDPROC form_H_CCPT

# ---------------------------------------------------------

PROC form_diag

# ---------------------------------------------------------
#
# VCONV1A  JNB verified A3
# VCONV2AB JNB verified A3
# VCONV2AA JNB verified A3
#
# ---------------------------------------------------------

print "-- Forming diagonals"
server_barrier

pardo a, a1, i, i1
    taiai[a,i,a1,i1]            = 0.0
    prepare VCONV2AA[a,i,a1,i1] = taiai[a,i,a1,i1]
endpardo a, a1, i, i1

pardo a, b, i, j
    taibj[a,i,b,j]            = 0.0 
    prepare VCONV2AB[a,i,b,j] = taibj[a,i,b,j]
endpardo a, b, i, j
server_barrier

pardo mu, nu, lambda, sigma 

    execute compute_integral_batch aoint[mu,nu,lambda,sigma] 

    do a 
	Txxxp[mu,nu,lambda,a] = aoint[mu,nu,lambda,sigma]*ca[sigma,a] 
	do a1 
	if a == a1 
	    Txxpp[mu,nu,a1,a] = Txxxp[mu,nu,lambda,a]*ca[lambda,a1] 
	    prepare Vxxaa[mu,nu,a1,a] += Txxpp[mu,nu,a1,a] 
	endif 
	enddo a1 
    enddo a 

    do b 
	Txxxq[mu,nu,lambda,b] = aoint[mu,nu,lambda,sigma]*ca[sigma,b] 
	do b1 
	if b == b1 
	    Txxqq[mu,nu,b1,b] = Txxxq[mu,nu,lambda,b]*ca[lambda,b1] 
	    prepare Gxxbb[mu,nu,b1,b] += Txxqq[mu,nu,b1,b] 
	endif 
	enddo b1 
    enddo b 

endpardo mu, nu, lambda, sigma 

pardo mu, nu, lambda, sigma 

    execute compute_integral_batch            aoint[mu,sigma,lambda,nu] 
    txxxx[mu,nu,lambda,sigma]  = aoint[mu,sigma,lambda,nu] 
    txxxx[mu,nu,lambda,sigma] *= -1.0  

    do a 
	Txxxp[mu,nu,lambda,a] = txxxx[mu,nu,lambda,sigma]*ca[sigma,a] 
	do a1 
	if a == a1 
	    Txxpp[mu,nu,a1,a] = Txxxp[mu,nu,lambda,a]*ca[lambda,a1] 
	    prepare Vxxaa[mu,nu,a1,a] += Txxpp[mu,nu,a1,a] 
	endif 
	enddo a1 
    enddo a 

endpardo mu, nu, lambda, sigma 

server_barrier

pardo mu, nu, a, a1 
WHERE a == a1 
    request Vxxaa[mu,nu,a1,a]             
    do a2 
	Txppp[mu,a2,a1,a] = Vxxaa[mu,nu,a1,a]*ca[nu,a2] 
	do a3 
	if a2 == a3 
	    Tpppp[a3,a2,a1,a] = Txppp[mu,a2,a1,a]*ca[mu,a3] 
	    prepare Vaaaa[a3,a2,a1,a] += Tpppp[a3,a2,a1,a] 
	endif 
	enddo a3 
    enddo a2 
endpardo mu, nu, a, a1 

pardo mu, nu, b, b1 
WHERE b == b1 
    request Gxxbb[mu,nu,b1,b]             
    do a2 
	Txpqq[mu,a2,b1,b] = Gxxbb[mu,nu,b1,b]*ca[nu,a2] 
	do a3 
	if a2 == a3 
	    Tppqq[a3,a2,b1,b] = Txpqq[mu,a2,b1,b]*ca[mu,a3] 
	    prepare Vaabb[a3,a2,b1,b] += Tppqq[a3,a2,b1,b] 
	endif 
	enddo a3 
    enddo a2 
endpardo mu, nu, b, b1 

server_barrier

# -----prepare f_aa diagonal = Sdaa

pardo a, a1, a2, a3   
WHERE a  == a1 
WHERE a2 == a3 

    request Vaaaa[a,a1,a2,a3] 
    Tpppp[a,a1,a2,a3]  = Vaaaa[a,a1,a2,a3]
    execute return_diagonal_elements Tpppp[a,a1,a2,a3]
    taa[a3,a1]         = 1.0
    t1aa[a,a2]         = Tpppp[a,a1,a2,a3]*taa[a3,a1]

    PUT Faa[a,a2]     += t1aa[a,a2]

endpardo a, a1, a2, a3  

pardo a, a1, b2, b3   
WHERE a  == a1 
WHERE b2 == b3 

    request Vaabb[a,a1,b2,b3] 
    Tppqq[a,a1,b2,b3]  = Vaabb[a,a1,b2,b3]
    execute return_diagonal_elements Tppqq[a,a1,b2,b3]
    tba[b3,a1]         = 1.0
    tab[a,b2]          = Tppqq[a,a1,b2,b3]*tba[b3,a1]

    PUT Fab[a,b2]     += tab[a,b2]

endpardo a, a1, b2, b3  

pardo a, a1
WHERE a==a1 

    taa[a,a1]      = LHBAR_aa[a,a1]
    execute return_diagonal_elements taa[a,a1]
    put DDaa[a,a1] = taa[a,a1]

endpardo a, a1

# -----prepare f_ii diagonal = Sdii

pardo i, i1
WHERE i==i1 

    tii[i1,i]      = LHBAR_ii[i1,i]
    execute return_diagonal_elements tii[i1,i]
    put DDii[i1,i] = tii[i1,i]

endpardo i, i1

# -----prepare f_jj diagonal = DDjj

#pardo j, j1
#WHERE j==j1 
#
#    tjj[j1,j]      = LHBAR_ii[j1,j]
#    execute return_diagonal_elements tjj[j1,j]
#    put DDjj[j1,j] = tjj[j1,j]
#
#endpardo j, j1

server_barrier

# -----prepare Hbar_aiai diagonal

pardo a, i

    tai[a,i]=0.0

    do a1
    do i1
	where a==a1
	where i==i1

	request HBAR_AJIB_aaaa[i1,a1,a,i] 
	Taaii[a,a1,i,i1] = HBAR_AJIB_aaaa[i1,a1,a,i]
	execute return_diagonal_elements Taaii[a,a1,i,i1]
	tia[i1,a1]       = 1.0
	t1ai[a,i]        = Taaii[a,a1,i,i1]*tia[i1,a1]
	tai[a,i]        += t1ai[a,i]

    enddo i1
    enddo a1

    PUT VCONV1A[a,i] = tai[a,i]

endpardo a, i

# -----prepare Hbar_bjbj diagonal

server_barrier

pardo a, a1, i, i1

    get                            VCONV1A[a,i1]
    get                            VCONV1A[a1,i]
    tia[i1,a]                    = 1.0
    t1ia[i,a1]                   = 1.0
    tai[a,i1]                    = VCONV1A[a,i1]
    t2ai[a1,i]                   = VCONV1A[a1,i]
    t1aiai[a,i,a1,i1]            = tai[a,i1]^t1ia[i,a1]
    t2aiai[a,i,a1,i1]            = t2ai[a1,i]^tia[i1,a]

    prepare VCONV2AA[a,i,a1,i1] += t1aiai[a,i,a1,i1]
    prepare VCONV2AA[a,i,a1,i1] += t2aiai[a,i,a1,i1]

endpardo a, a1, i, i1

server_barrier


# -----prepare Hbar_aiai diagonal

pardo a, i

    tai[a,i]=0.0

    do a1
    do i1
	where a==a1
	where i==i1

	request HBAR_AJIB_aaaa[i1,a1,a,i] 
	Taaii[a,a1,i,i1] = HBAR_AJIB_aaaa[i1,a1,a,i]
	execute return_diagonal_elements Taaii[a,a1,i,i1]
	tia[i1,a1]       = 1.0
	t1ai[a,i]        = Taaii[a,a1,i,i1]*tia[i1,a1]
	tai[a,i]        += t1ai[a,i]

    enddo i1
    enddo a1

    PUT VCONV1A[a,i] = tai[a,i]

endpardo a, i

# -----prepare Hbar_bjbj diagonal

server_barrier

# ---------compute T(a,i)=F(a,a)-f(i,i)-v(a,i,a,i)

pardo a, i

    tai[a,i]=0.0

    do a1
	where a==a1

	get         DDaa[a,a1]
	tia[i,a1] = 1.0
	taa[a1,a] = DDaa[a,a1]
	execute return_diagonal_elements taa[a1,a]

	t2ai[a,i] = tia[i,a1]*taa[a1,a]
	tai[a,i] += t2ai[a,i]

    enddo a1

    do i1
	where i==i1

	get          DDii[i1,i]
	t2ia[i1,a] = 1.0
	tii[i,i1]  = DDii[i1,i]
	execute return_diagonal_elements Tii[i,i1]

	t2ai[a,i]  = tii[i,i1]*t2ia[i1,a]
	t2ai[a,i] *= -1.0
	tai[a,i]  += t2ai[a,i]

    enddo i1

    PUT VCONV1A[a,i] += tai[a,i]

endpardo a, i

# ---------compute T(b,j)=F(b,b)-f(j,j)

server_barrier

pardo a, a1, i, i1

    get                 VCONV1A[a,i]
    get                 VCONV1A[a1,i1]
    tia[i,a]          = 1.0
    t1ia[i1,a1]       = 1.0
    tai[a,i]          = VCONV1A[a,i]
    t2ai[a1,i1]       = VCONV1A[a1,i1]
    t1aiai[a,i,a1,i1] = tai[a,i]^t1ia[i1,a1]
    t2aiai[a,i,a1,i1] = t2ai[a1,i1]^tia[i,a]

    taiai[a,i,a1,i1]  = t1aiai[a,i,a1,i1]
    taiai[a,i,a1,i1] += t2aiai[a,i,a1,i1]

    do i2
    do i3
	where  i==i2
	where i1==i3

	request             HBAR_iiii[i,i2,i1,i3] 
	tiiii[i,i2,i1,i3] = HBAR_iiii[i,i2,i1,i3]
	execute return_diagonal_elements Tiiii[i,i2,i1,i3]
	t1aiai[a,i2,a1,i3]=1.0
	t2aiai[a,i,a1,i1] = Tiiii[i,i2,i1,i3]*t1aiai[a,i2,a1,i3]
	taiai[a,i,a1,i1] += t2aiai[a,i,a1,i1]

    enddo i3
    enddo i2

    get                 Faa[a,a1]
    tii[i,i1]         = 1.0
    t1aiai[a,i,a1,i1] = Faa[a,a1]^tii[i,i1]
    taiai[a,i,a1,i1] += t1aiai[a,i,a1,i1]

    prepare VCONV2AA[a,i,a1,i1] += taiai[a,i,a1,i1]

endpardo a, a1, i, i1

# alpha/beta contribution 
# ----------------------- 

pardo a, i, b, j

    get               VCONV1A[b,j]
    get               VCONV1A[a,i]
    t1ai[a,i]       = 1.0
    t1bj[b,j]       = 1.0

    tbj[b,j]        = VCONV1A[b,j]
    tai[a,i]        = VCONV1A[a,i]
    t1aibj[a,i,b,j] = t1ai[a,i]^tbj[b,j]
    t2aibj[a,i,b,j] = tai[a,i]^t1bj[b,j]

    taibj[a,i,b,j]  = 0.0  
    taibj[a,i,b,j]  = t1aibj[a,i,b,j]
    taibj[a,i,b,j] += t2aibj[a,i,b,j]

    do i1
    do j1
	where i==i1
	where j==j1

	request                   HBAR_iijj[i,i1,j,j1] 
	Tiijj[i,i1,j,j1]        = HBAR_iijj[i,i1,j,j1]
	execute return_diagonal_elements  Tiijj[i,i1,j,j1]
	t2aibj[a,i1,b,j1]       = 1.0
	t1aibj[a,i,b,j]         = Tiijj[i,i1,j,j1]*t2aibj[a,i1,b,j1]
	taibj[a,i,b,j]         += t1aibj[a,i,b,j]

    enddo j1
    enddo i1

    get Fab[a,b]
    tij[i,j]=1.0
    t1aibj[a,i,b,j]=Fab[a,b]^tij[i,j]
    taibj[a,i,b,j]+=t1aibj[a,i,b,j]

    do i1
    do b1
	where i==i1
	where b==b1

	request HBAR_AJIB_iibb[i1,i,b,b1] 
	Tiibb[i1,i,b,b1]=HBAR_AJIB_iibb[i1,i,b,b1]
	execute return_diagonal_elements Tiibb[i1,i,b,b1]
	t2aibj[a,i1,b1,j]=1.0
	t1aibj[a,i,b,j]=Tiibb[i1,i,b,b1]*t2aibj[a,i1,b1,j]
	taibj[a,i,b,j]+=t1aibj[a,i,b,j]

    enddo b1
    enddo i1

    do j1
    do a1
	where j==j1
	where a==a1

	request HBAR_AJIB_iibb[j1,j,a,a1] 
	Tjjaa[j1,j,a,a1]=HBAR_AJIB_iibb[j1,j,a,a1]
	execute return_diagonal_elements Tjjaa[j1,j,a,a1]
	t2aibj[a1,i,b,j1]=1.0
	t1aibj[a,i,b,j]=Tjjaa[j1,j,a,a1]*t2aibj[a1,i,b,j1]
	taibj[a,i,b,j]+=t1aibj[a,i,b,j]

    enddo a1
    enddo j1

    prepare VCONV2AB[a,i,b,j] = taibj[a,i,b,j]

endpardo a, i, b, j

server_barrier

delete Faa
delete Fab

server_barrier

ENDPROC form_diag

#------------------------------------------------------------------------

#------------------------------------------------------------------------

PROC HB_zero

pardo a,i,ksub
    prepare HB1_a[ksub,a,i] = 0.0
endpardo a,i,ksub

pardo a,i,a1,i1,ksub
    prepare HB2_aa[ksub,a,i,a1,i1] = 0.0
endpardo a,i,a1,i1,ksub

pardo a,i,b,j,ksub
    prepare HB2_ab[ksub,a,i,b,j] = 0.0
endpardo a,i,b,j,ksub

server_barrier

ENDPROC HB_zero

PROC VCHACT_ZERO
pardo a,i
    put VCHACT1A[a,i] = 0.0
endpardo a,i

pardo a,i,a1,i1
    prepare VCHACT2AA[a,i,a1,i1] = 0.0
endpardo a,i,a1,i1

pardo a,i,b,j
    prepare VCHACT2AB[a,i,b,j] = 0.0
endpardo a,i,b,j

server_barrier
ENDPROC VCHACT_ZERO

PROC place_VCACT
#
# in loops taken from ACESIII eom we go over 1 subspace vector at a time in H.B so strip ksub out.
#
server_barrier
Tk[ksub] = 1.0
pardo a,i,a1,i1
    request RB2_aa[ksub,a,i,a1,i1]
    Taiai[a,i,a1,i1] = Tk[ksub]*RB2_aa[ksub,a,i,a1,i1]
    prepare VCACT2AA[a,i,a1,i1] = Taiai[a,i,a1,i1]
endpardo a,i,a1,i1

pardo a,i,b,j
    request RB2_ab[ksub,a,i,b,j]
    Taibj[a,i,b,j] = Tk[ksub]*RB2_ab[ksub,a,i,b,j]
    prepare VCACT2AB[a,i,b,j] = Taibj[a,i,b,j]
endpardo a,i,b,j

pardo a,i
    request RB1_a[ksub,a,i]
    Tai[a,i] = Tk[ksub]*RB1_a[ksub,a,i]
    put VCACT1A[a,i] = Tai[a,i]
endpardo a,i

server_barrier
ENDPROC place_VCACT

PROC FACTORS_NEW_CCPT
#     ---------------- 
#print "Forming intermediates"

pardo i, i1, j, b 
    prepare Niibj[i1,b,i,j] = 0.0
endpardo i, i1, j, b 

pardo i, i1, j, b 
    prepare Njjai[i1,b,i,j] = 0.0
endpardo i, i1, j, b 

pardo i, i1, i2, a 
    prepare Niiai[i1,a,i,i2] = 0.0
endpardo i, i1, i2, a 

pardo i, i1, j, j1 
    put Niijj[i,i1,j,j1] = 0.0
endpardo i, i1, j, j1 

pardo i, i1, i2, i3 
    PUT Niiii[i,i1,i2,i3] = 0.0
endpardo i, i1, i2, i3 

pardo a1, i, b, j 
    request VCACT2AB[a1,i,b,j]  
    tpqpq[a1,b,i,j]         = VCACT2AB[a1,i,b,j] 
    prepare VFLAB[a1,b,i,j] = tpqpq[a1,b,i,j]  
endpardo a1,i,b,j 

pardo a2, i, a1, i2 
    request VCACT2AA[a2,i,a1,i2] 
    tpppp[a2,a1,i,i2]         = VCACT2AA[a2,i,a1,i2]
    prepare VFLAA[a2,a1,i,i2] = tpppp[a2,a1,i,i2]  
endpardo a2,i,a1,i2 

server_barrier 

pardo a, i1, a2, i
WHERE i < i1
    request VCACT2AA[a,i,a2,i1] 
    do a1
	request VSpipi[a2,i1,a1,i] 
	taa[a,a1]        = VCACT2AA[a,i,a2,i1]*VSpipi[a2,i1,a1,i]
	taa[a,a1]       *= -1.0
	LFae_a[a,a1] += taa[a,a1]
    enddo a1
endpardo a, i1, a2, i

pardo a, i1, a2, i
WHERE i == i1
    request VCACT2AA[a,i,a2,i1] 
    do a1
	request VSpipi[a2,i1,a1,i] 
	taa[a,a1]        = VCACT2AA[a,i,a2,i1]*VSpipi[a2,i1,a1,i]
	taa[a,a1]       *= -0.5
	LFae_a[a,a1] += taa[a,a1]
    enddo a1
endpardo a, i1, a2, i

pardo a, i, b, j
request VCACT2AB[a,i,b,j] 
    do a1  
	request Vpiqj[a1,i,b,j] 
	taa[a,a1]        = VCACT2AB[a,i,b,j]*Vpiqj[a1,i,b,j]
	taa[a,a1]       *= -1.0
	LFae_a[a,a1] += taa[a,a1]
    enddo a1  
endpardo a, i, b, j

#    Fmi_a

pardo i, i1, i2, a
    request VSpipi[a,i2,i,i1] 
    GET                VCACT1A[a,i2]
    tii[i1,i]        = VSpipi[a,i2,i,i1]*VCACT1A[a,i2]
    LFmi_a[i1,i] += tii[i1,i]
endpardo i, i1, i2, a

pardo i, a1, i2, a
WHERE a == a1
    request VCACT2AA[a,i,a1,i2] 
    do i1
	request VSpipi[a,i1,a1,i2] 
	tii[i1,i]        = VCACT2AA[a,i,a1,i2]*VSpipi[a,i1,a1,i2]
	tii[i1,i]       *= 0.5
	LFmi_a[i1,i] += tii[i1,i]
    enddo i1
endpardo i, a1, i2, a

pardo i, a1, i2, a
WHERE a < a1
    request VCACT2AA[a,i,a1,i2] 
    do i1
	request VSpipi[a,i1,a1,i2] 
	tii[i1,i]        = VCACT2AA[a,i,a1,i2]*VSpipi[a,i1,a1,i2]
	LFmi_a[i1,i] += tii[i1,i]
    enddo i1
endpardo i, a1, i2, a

pardo i, i1, j, b
    request Vpiqj[i,i1,b,j] 
    GET                VCACT1A[b,j]
    tii[i1,i]        = Vpiqj[i,i1,b,j]*VCACT1A[b,j]
    LFmi_a[i1,i] += tii[i1,i]
endpardo i, i1, j, b

pardo i, a, j, b
    request VCACT2AB[a,i,b,j] 
    do i1  
	request Vpiqj[a,i1,b,j] 
	tii[i1,i]        = VCACT2AB[a,i,b,j]*Vpiqj[a,i1,b,j]
	LFmi_a[i1,i] += tii[i1,i]
    enddo i1  
endpardo i, a, j, b

#     Fmi_b

pardo j, j1, j2, b
    request VSqjqj[b,j2,j,j1] 
    GET                VCACT1A[b,j2]
    tjj[j1,j]        = VSqjqj[b,j2,j,j1]*VCACT1A[b,j2]
    LFmi_b[j1,j] += tjj[j1,j]
endpardo j, j1, j2, b

pardo j, b1, j2, b
WHERE b < b1
    request VCACT2AA[b,j,b1,j2] 
    do j1
	request VSqjqj[b,j1,b1,j2] 
	tjj[j1,j]        = VCACT2AA[b,j,b1,j2]*VSqjqj[b,j1,b1,j2]
	LFmi_b[j1,j] += tjj[j1,j]
    enddo j1
endpardo j, b1, j2, b

pardo j, b1, j2, b
WHERE b == b1
    request VCACT2AA[b,j,b1,j2] 
    do j1
	request VSqjqj[b,j1,b1,j2] 
	tjj[j1,j]        = VCACT2AA[b,j,b1,j2]*VSqjqj[b,j1,b1,j2]
	tjj[j1,j]       *= 0.5
	LFmi_b[j1,j] += tjj[j1,j]
    enddo j1
endpardo j, b1, j2, b

pardo j, j1, i, a
    request Vpiqj[a,i,j,j1] 
    GET                VCACT1A[a,i]
    tjj[j1,j]        = Vpiqj[a,i,j,j1]*VCACT1A[a,i]
    LFmi_b[j1,j] += tjj[j1,j]
endpardo j, j1, i, a

pardo j, b, i, a
    request VCACT2AB[a,i,b,j] 
    do j1  
	request Vpiqj[a,i,b,j1] 
	tjj[j1,j]        = VCACT2AB[a,i,b,j]*Vpiqj[a,i,b,j1]
	LFmi_b[j1,j] += tjj[j1,j]
    enddo j1  
endpardo j, b, i, a

pardo j1, a, b, a1

    request Vaabj[a,a1,b,j1] 
    GET             VCACT1A[b,j1]
    tqppq[j1,a,a1,b] = Vaabj[a,a1,b,j1]

    t1aa[a1,a]    = Vaabj[a,a1,b,j1]*VCACT1A[b,j1]
    LFae_a[a1,a] += t1aa[a1,a]

    do i
    do j

	request                    VFLAB[a1,b,i,j] 
	T1qppq[j1,a,i,j]         = tqppq[j1,a,a1,b]*VFLAB[a1,b,i,j]
	prepare Njjai[j1,a,i,j] += T1qppq[j1,a,i,j]

    enddo j
    enddo i

endpardo j1, a, b, a1

pardo i1, b, a, b1  

    request Vbbai[b,b1,a,i1] 
    tpqpq[i1,b,a,b1] = Vbbai[b,b1,a,i1] 

    do i
    do j
	request                    VFLAB[a,b1,i,j] 
	T1pqpq[i1,b,i,j]         = tpqpq[i1,b,a,b1]*VFLAB[a,b1,i,j]
	prepare Niibj[i1,b,i,j] += T1pqpq[i1,b,i,j]
    enddo j
    enddo i

endpardo i1, b, a, b1  

pardo i1, a, a1, a2  

    request VSaaai[a1,a,a2,i1] 
    GET                 VCACT1A[a2,i1]
    tpppp[i1,a,a2,a1] = VSaaai[a1,a,a2,i1] 

    t1aa[a,a1]        = VSaaai[a1,a,a2,i1]*VCACT1A[a2,i1]
    LFae_a[a,a1]  += t1aa[a,a1]

    do i
    do i2

	request                     VFLAA[a2,a1,i,i2] 
	T1pppp[i1,a,i,i2]         = tpppp[i1,a,a2,a1]*VFLAA[a2,a1,i,i2]
	T1pppp[i1,a,i,i2]        *= 0.5
	prepare Niiai[i1,a,i,i2] += T1pppp[i1,a,i,i2]

    enddo i2
    enddo i

endpardo i1, a, a1, a2  

pardo i1, j1, a, b 

    request            Vpiqj[a,i1,b,j1] 
    tpqpq[i1,j1,a,b] = Vpiqj[a,i1,b,j1] 

    do i
    do j
	request                 VFLAB[a,b,i,j] 
	tiijj[i,i1,j,j1]      = tpqpq[i1,j1,a,b]*VFLAB[a,b,i,j]
	put Niijj[i,i1,j,j1] += tiijj[i,i1,j,j1]
    enddo j
    enddo i

endpardo i1, j1, a, b  

pardo i1, i3, a, a1  

    request             VSpipi[a,i1,a1,i3] 
    tpppp[i1,i3,a,a1] = VSpipi[a,i1,a1,i3]  

    do i  
    do i2  
	request                  VFLAA[a,a1,i,i2] 
	tiiii[i1,i,i3,i2]      = tpppp[i1,i3,a,a1]*VFLAA[a,a1,i,i2]  
	tiiii[i1,i,i3,i2]     *= 0.5
	put Niiii[i1,i,i3,i2] += tiiii[i1,i,i3,i2]
    enddo i2  
    enddo i

endpardo i1, i3, a, a1  

#    Form Half back transformed cluster arrays  
#    -----------------------------------------

pardo a1, i1, i   

    allocate LLaiai[*,i,a1,i1] 

    do a  
	request VCACT2AA[a,i,a1,i1]  
	LLaiai[a,i,a1,i1]  = VCACT2AA[a, i,a1,i1] 
	LLaiai[a,i,a1,i1] *= 2.0  
    enddo a  

    do lambda   
	Zaa[lambda,i,a1,i1] = 0.0 
	do a  
	    Txiai[lambda,i,a1,i1] = LLaiai[a,i,a1,i1]*ca[lambda,a]
	    Zaa[lambda,i,a1,i1]  += Txiai[lambda,i,a1,i1] 
	enddo a 
	prepare T1AO_aa[lambda,i,a1,i1] = Zaa[lambda,i,a1,i1] 
    enddo lambda  

    deallocate LLaiai[*,i,a1,i1] 

endpardo a1, i1, i   

pardo b, j, i   

    allocate LLaibj[*,i,b,j] 

    do a  
	request VCACT2AB[a,i,b,j]  
	LLaibj[a,i,b,j] = VCACT2AB[a,i,b,j] 
    enddo a  

    do lambda   
	Zab[lambda,i,b,j] = 0.0 
	do a  
	    Txibj[lambda,i,b,j] = LLaibj[a,i,b,j]*ca[lambda,a]
	    Zab[lambda,i,b,j]  += Txibj[lambda,i,b,j] 
	enddo a 
	prepare T1AO_ab[lambda,i,b,j] = Zab[lambda,i,b,j] 
    enddo lambda  

    deallocate LLaibj[*,i,b,j] 

endpardo b, j, i   

server_barrier 
do i 
do i1 
    tii[i,i1]        = LFmi_a[i,i1] 
    PUT Fmi_a[i,i1] += tii[i,i1] 
enddo i1 
enddo i 
do j 
do j1 
    tjj[j,j1]        = LFmi_b[j,j1] 
    PUT Fmi_b[j,j1] += tjj[j,j1] 
enddo j1 
enddo j 
do a 
do a1 
    taa[a,a1]        = LFae_a[a,a1] 
    PUT Fae_a[a,a1] += taa[a,a1] 
enddo a1 
enddo a 
server_barrier 
do a 
do a1 
    GET            Fae_a[a,a1] 
    taa[a,a1] = Fae_a[a,a1]  
    LFae_a[a,a1] = taa[a,a1] # Fae_a(a,a1) 
enddo a1 
enddo a 
do i 
do i1 
    GET            Fmi_a[i,i1] 
    tii[i,i1] =  Fmi_a[i,i1]    
    LFmi_a[i,i1] = tii[i,i1] # Fmi_a(i,i1) 
enddo i1 
enddo i 
do j 
do j1 
    GET            Fmi_b[j,j1] 
    tjj[j,j1] = Fmi_b[j,j1] 
    LFmi_b[j,j1] = tjj[j,j1] # Fmi_b(j,j1) 
enddo j1 
enddo j 
server_barrier 

ENDPROC FACTORS_NEW_CCPT

PROC R2AALIN_NEW_CCPT
#    ---------------- 
#print "Starting Q2*H*B _aa"

create D2aa 
server_barrier 

pardo a, a1, i2, i3
WHERE i2 < i3

    request VCACT2AA[a,i2,a1,i3] 
    request T2AA[a,i2,a1,i3] 

    T2aiai[a,i2,a1,i3] = T2AA[a,i2,a1,i3]

    do i
    do i1
	request HBAR_iiii[i2,i,i3,i1] 
	GET                             Niiii[i2,i,i3,i1]

	T1aiai[a,i,a1,i1]             = HBAR_iiii[i2,i,i3,i1]*VCACT2AA[a,i2,a1,i3]
	T1aiai[a,i,a1,i1]            *= 0.25
	Taiai[a,i,a1,i1]              = T1aiai[a,i,a1,i1]
#   
	T1aiai[a,i,a1,i1]             = Niiii[i2,i,i3,i1]*T2aiai[a,i2,a1,i3]
	T1aiai[a,i,a1,i1]            *= 0.25
	Taiai[a,i,a1,i1]             += T1aiai[a,i,a1,i1]

	PUT D2aa[a,i,a1,i1] += Taiai[a,i,a1,i1]

    enddo i1
    enddo i

endpardo a, a1, i2, i3

pardo a, a1, i2, i3
WHERE i2 == i3

    request VCACT2AA[a,i2,a1,i3] 
    request T2AA[a,i2,a1,i3] 

    T2aiai[a,i2,a1,i3] = T2AA[a,i2,a1,i3]

    do i
    do i1
	request HBAR_iiii[i2,i,i3,i1] 
	GET                             Niiii[i2,i,i3,i1]

	T1aiai[a,i,a1,i1]             = HBAR_iiii[i2,i,i3,i1]*VCACT2AA[a,i2,a1,i3]
	T1aiai[a,i,a1,i1]            *= 0.125
	Taiai[a,i,a1,i1]              = T1aiai[a,i,a1,i1]
#   
	T1aiai[a,i,a1,i1]             = Niiii[i2,i,i3,i1]*T2aiai[a,i2,a1,i3]
	T1aiai[a,i,a1,i1]            *= 0.125
	Taiai[a,i,a1,i1]             += T1aiai[a,i,a1,i1]

	PUT D2aa[a,i,a1,i1] += Taiai[a,i,a1,i1]

    enddo i1
    enddo i

endpardo a, a1, i2, i3

pardo i1, a1, i2, a2  

    request HBAR_AJIB_aaaa[i2,a2,a1,i1] 
    t1aiai[a2,i2,a1,i1] = HBAR_AJIB_aaaa[i2,a2,a1,i1] 

    do a
    do i
	request VCACT2AA[a,i,a2,i2] 
	Taiai[a,i,a1,i1] = VCACT2AA[a,i,a2,i2]*t1aiai[a2,i2,a1,i1]

	PUT D2aa[a,i,a1,i1] += Taiai[a,i,a1,i1]

    enddo i
    enddo a

endpardo i1, a1, i2, a2  

pardo a1, i1, b, j 

    request HBAR_AJIB_aabb[j,b,a1,i1] 
    tbjai[b,j,a1,i1] = HBAR_AJIB_aabb[j,b,a1,i1] 

    do a
    do i
	request VCACT2AB[a,i,b,j] 
	Taiai[a,i,a1,i1] = VCACT2AB[a,i,b,j]*tbjai[b,j,a1,i1]

	PUT D2aa[a,i,a1,i1] += Taiai[a,i,a1,i1]

    enddo i
    enddo a

endpardo a1, i1, b, j 

pardo i, i1, a, a2 

    request VCACT2AA[a,i,a2,i1] 
    request T2AA[a,i,a2,i1] 

    do a1

	T1aiai[a,i,a1,i1]             = VCACT2AA[a,i,a2,i1]*LHBAR_aa[a1,a2]
	Taiai[a,i,a1,i1]              = T1aiai[a,i,a1,i1]

	T1aiai[a,i,a1,i1]             = T2AA[a,i,a2,i1]*LFae_a[a1,a2]
	Taiai[a,i,a1,i1]             += T1aiai[a,i,a1,i1]
	Taiai[a,i,a1,i1]             *= 0.5

	PUT D2aa[a,i,a1,i1] += Taiai[a,i,a1,i1]

    enddo a1

endpardo i, i1, a, a2 

pardo a, a1, i, i2

    request VCACT2AA[a,i,a1,i2] 
    request T2AA[a,i,a1,i2] 

    do i1

	T1aiai[a,i,a1,i1]             = VCACT2AA[a,i,a1,i2]*LHBAR_ii[i2,i1]
	Taiai[a,i,a1,i1]              = T1aiai[a,i,a1,i1]

	T1aiai[a,i,a1,i1]             = T2AA[a,i,a1,i2]*LFmi_a[i2,i1]
	Taiai[a,i,a1,i1]             += T1aiai[a,i,a1,i1]
	Taiai[a,i,a1,i1]             *= -0.5

	PUT D2aa[a,i,a1,i1] += Taiai[a,i,a1,i1]

    enddo i1

endpardo a, a1, i, i2

#  PART       <2|HT1|0>

pardo a, i, i1

    allocate Liiai[*,i,a,i1]
    allocate L2iiai[i,*,a,i1]

    do i2

	request HBAR_IAJK_aaaa[i2,i,a,i1] 
	Liiai[i2,i,a,i1]  = HBAR_IAJK_aaaa[i2,i,a,i1]
	request Niiai[i2,a,i,i1]   
	L2iiai[i,i2,a,i1] = Niiai[i2,a,i,i1]  

    enddo i2

    do a1
	Taiai[a,i,a1,i1] = 0.0
	do i2
	    get                 VCACT1A[a1,i2]
#get                 T1A(a1,i2)
	    T1aiai[a,i,a1,i1] = Liiai[i2,i,a,i1]*VCACT1A[a1,i2]
	    Taiai[a,i,a1,i1] += T1aiai[a,i,a1,i1]

	    T1aiai[a,i,a1,i1] = L2iiai[i,i2,a,i1]*St1a[a1,i2]
	    Taiai[a,i,a1,i1] += T1aiai[a,i,a1,i1]
	enddo i2

	T3aiai[a1,i,a,i1]             = Taiai[a,i,a1,i1]
	T3aiai[a1,i,a,i1]            *= -1.0

	prepare VCHACT2AA[a,i,a1,i1] += Taiai[a,i,a1,i1]
	prepare VCHACT2AA[a1,i,a,i1] += T3aiai[a1,i,a,i1]

    enddo a1

    deallocate Liiai[*,i,a,i1]
    deallocate L2iiai[i,*,a,i1]

endpardo a, i, i1

pardo a, a1, a2, i
WHERE a < a1 

    request HBAR_ABCI_aaaa[a,a2,a1,i] 

    do i1

	GET                            VCACT1A[a2,i1]
	T1aiai[a,i,a1,i1]            = HBAR_ABCI_aaaa[a,a2,a1,i]*VCACT1A[a2,i1]
	T1aiai[a,i,a1,i1]           *= -1.0

	PUT D2aa[a,i,a1,i1] += T1aiai[a,i,a1,i1]

    enddo i1

endpardo a, a1, a2, i

pardo a, a1, a2, i
WHERE a == a1 

    request HBAR_ABCI_aaaa[a,a2,a1,i] 

    do i1

	GET                             VCACT1A[a2,i1]
	T1aiai[a,i,a1,i1]             = HBAR_ABCI_aaaa[a,a2,a1,i]*VCACT1A[a2,i1]
	T3aiai[a,i1,a1,i]             = T1aiai[a,i,a1,i1]
	T1aiai[a,i,a1,i1]            *= -1.0

	prepare VCHACT2AA[a,i,a1,i1] += T1aiai[a,i,a1,i1]
	prepare VCHACT2AA[a,i1,a1,i] += T3aiai[a,i1,a1,i]

    enddo i1

endpardo a, a1, a2, i

server_barrier 
pardo a, i, a1, i1 
    GET                 D2aa[a,i,a1,i1] 
    T2aiai[a1,i1,a,i] = D2aa[a,i,a1,i1]  
    T3aiai[a1,i,a,i1] = D2aa[a,i,a1,i1]  
    T4aiai[a,i1,a1,i] = D2aa[a,i,a1,i1]  
    T3aiai[a1,i,a,i1] *= -1.0  
    T4aiai[a,i1,a1,i] *= -1.0  

    prepare VCHACT2AA[a,i,a1,i1] += D2aa[a,i,a1,i1]
    prepare VCHACT2AA[a1,i1,a,i] += T2aiai[a1,i1,a,i]
    prepare VCHACT2AA[a1,i,a,i1] += T3aiai[a1,i,a,i1]
    prepare VCHACT2AA[a,i1,a1,i] += T4aiai[a,i1,a1,i]
endpardo a, i, a1, i1 
server_barrier 
delete D2aa 

ENDPROC R2AALIN_NEW_CCPT

PROC R2ABLIN_NEW_CCPT
#    ---------------- 
#print "Starting Q2*H*B _ab"

pardo i, j, b, a1  

    request VCACT2AB[a1,i,b,j] 
    request T2AB[a1,i,b,j] 

    do a
	Taibj[a,i,b,j]              = VCACT2AB[a1,i,b,j]*LHBAR_aa[a,a1]
	T1aibj[a,i,b,j]             = T2AB[a1,i,b,j]*LFae_a[a,a1]
	Taibj[a,i,b,j]             += T1aibj[a,i,b,j]
	prepare VCHACT2AB[a,i,b,j] += Taibj[a,i,b,j]
    enddo a

endpardo i, j, b, a1 

pardo j, a, a1, j1  

    request HBAR_AJIB_iibb[j1,j,a,a1] 

    do i
    do b

    if a < b 
	request VCACT2AB[a1,i,b,j1] 
	Taibj[a,i,b,j]              = HBAR_AJIB_iibb[j1,j,a,a1]*VCACT2AB[a1,i,b,j1]
	T1aibj[b,j,a,i]             = Taibj[a,i,b,j] 
	prepare VCHACT2AB[a,i,b,j] += Taibj[a,i,b,j]
	prepare VCHACT2AB[b,j,a,i] += T1aibj[b,j,a,i]
    endif 

    if a == b 
	request VCACT2AB[a1,i,b,j1] 
	Taibj[a,i,b,j]              = HBAR_AJIB_iibb[j1,j,a,a1]*VCACT2AB[a1,i,b,j1]
	prepare VCHACT2AB[a,i,b,j] += Taibj[a,i,b,j]
    endif 

    enddo b
    enddo i

endpardo j, a, a1, j1  

pardo j, b, i1, a1  

    request VCACT2AB[a1,i1,b,j] 
    request HBAR_AJIB_aabb[i1,a1,b,j] 

    do i
    do a

    if a < b 
	request VCACT2AA[a,i,a1,i1] 
	request HBAR_AJIB_aaaa[i1,a1,a,i] 
	T1aibj[a,i,b,j]             = HBAR_AJIB_aaaa[i1,a1,a,i]*VCACT2AB[a1,i1,b,j]
	T2aibj[a,i,b,j]             = HBAR_AJIB_aabb[i1,a1,b,j]*VCACT2AA[a,i,a1,i1]
	Taibj[a,i,b,j]              = T1aibj[a,i,b,j]
	Taibj[a,i,b,j]             += T2aibj[a,i,b,j]
	T3aibj[b,j,a,i]             = Taibj[a,i,b,j]
	prepare VCHACT2AB[a,i,b,j] += Taibj[a,i,b,j]
	prepare VCHACT2AB[b,j,a,i] += T3aibj[b,j,a,i]
    endif 

    if a == b 
	request VCACT2AA[a,i,a1,i1] 
	request HBAR_AJIB_aaaa[i1,a1,a,i] 
	T1aibj[a,i,b,j]             = HBAR_AJIB_aaaa[i1,a1,a,i]*VCACT2AB[a1,i1,b,j]
	T2aibj[a,i,b,j]             = HBAR_AJIB_aabb[i1,a1,b,j]*VCACT2AA[a,i,a1,i1]
	Taibj[a,i,b,j]              = T1aibj[a,i,b,j]
	Taibj[a,i,b,j]             += T2aibj[a,i,b,j]
	prepare VCHACT2AB[a,i,b,j] += Taibj[a,i,b,j]
    endif 

    enddo a
    enddo i

endpardo j, b, i1, a1  

pardo i, a, j, b1 

    request VCACT2AB[a,i,b1,j] 
    request T2AB[a,i,b1,j] 

    do b
	Taibj[a,i,b,j]              = VCACT2AB[a,i,b1,j]*LHBAR_aa[b,b1]
	T1aibj[a,i,b,j]             = T2AB[a,i,b1,j]*LFae_a[b,b1]
	Taibj[a,i,b,j]             += T1aibj[a,i,b,j]
	prepare VCHACT2AB[a,i,b,j] += Taibj[a,i,b,j]
    enddo  b

endpardo i, a, j, b1 

pardo i, b, i1, b1 

    request HBAR_AJIB_iibb[i1,i,b,b1] 

    do j
    do a

    if a < b 
	request VCACT2AB[a,i1,b1,j] 
	Taibj[a,i,b,j]              = HBAR_AJIB_iibb[i1,i,b,b1]*VCACT2AB[a,i1,b1,j]
	T1aibj[b,j,a,i]             = taibj[a,i,b,j]  
	prepare VCHACT2AB[a,i,b,j] += Taibj[a,i,b,j]
	prepare VCHACT2AB[b,j,a,i] += T1aibj[b,j,a,i]
    endif 

    if a == b 
	request VCACT2AB[a,i1,b1,j] 
	Taibj[a,i,b,j]              = HBAR_AJIB_iibb[i1,i,b,b1]*VCACT2AB[a,i1,b1,j]
	prepare VCHACT2AB[a,i,b,j] += Taibj[a,i,b,j]
    endif 

    enddo a
    enddo j

endpardo i, b, i1, b1 

pardo i, a, j1, b1  

    request VCACT2AB[a,i,b1,j1] 
    request HBAR_AJIB_aabb[j1,b1,a,i] 

    do j
    do b

    if a < b 
	request VCACT2AA[b,j,b1,j1] 
	request HBAR_AJIB_aaaa[j1,b1,b,j] 
	T1aibj[a,i,b,j]             = HBAR_AJIB_aaaa[j1,b1,b,j]*VCACT2AB[a,i,b1,j1]
	T2aibj[a,i,b,j]             = HBAR_AJIB_aabb[j1,b1,a,i]*VCACT2AA[b,j,b1,j1]
	Taibj[a,i,b,j]              = T1aibj[a,i,b,j]
	Taibj[a,i,b,j]             += T2aibj[a,i,b,j]
	T3aibj[b,j,a,i]             = Taibj[a,i,b,j]
	prepare VCHACT2AB[a,i,b,j] += Taibj[a,i,b,j]
	prepare VCHACT2AB[b,j,a,i] += T3aibj[b,j,a,i]
    endif 

    if a == b 
	request VCACT2AA[b,j,b1,j1] 
	request HBAR_AJIB_aaaa[j1,b1,b,j] 
	T1aibj[a,i,b,j]             = HBAR_AJIB_aaaa[j1,b1,b,j]*VCACT2AB[a,i,b1,j1]
	T2aibj[a,i,b,j]             = HBAR_AJIB_aabb[j1,b1,a,i]*VCACT2AA[b,j,b1,j1]
	Taibj[a,i,b,j]              = T1aibj[a,i,b,j]
	Taibj[a,i,b,j]             += T2aibj[a,i,b,j]
	prepare VCHACT2AB[a,i,b,j] += Taibj[a,i,b,j]
    endif 

    enddo b
    enddo j

endpardo i, a, j1, b1 

pardo j, b, a, i1  

    request VCACT2AB[a,i1,b,j] 
    request T2AB[a,i1,b,j] 

    do i
	Taibj[a,i,b,j]              = VCACT2AB[a,i1,b,j]*LHBAR_ii[i1,i]
	T1aibj[a,i,b,j]             = T2AB[a,i1,b,j]*LFmi_a[i1,i]
	Taibj[a,i,b,j]             += T1aibj[a,i,b,j]
	Taibj[a,i,b,j]             *= -1.0  
	prepare VCHACT2AB[a,i,b,j] += Taibj[a,i,b,j]
    enddo i

endpardo j, b, a, i1  

pardo i1, j1, a, b 
WHERE a < b 

    request VCACT2AB[a,i1,b,j1] 
    request T2AB[a,i1,b,j1] 
    t2aibj[a,i1,b,j1] = T2AB[a,i1,b,j1]

    do i
    do j
	request HBAR_iijj[i1,i,j1,j] 
	GET                           Niijj[i,i1,j,j1]
	Taibj[a,i,b,j]              = HBAR_iijj[i1,i,j1,j]*VCACT2AB[a,i1,b,j1]
	T1aibj[a,i,b,j]             = Niijj[i,i1,j,j1]*t2aibj[a,i1,b,j1]
	Taibj[a,i,b,j]             += T1aibj[a,i,b,j]
	T3aibj[b,j,a,i]             = Taibj[a,i,b,j]
	prepare VCHACT2AB[a,i,b,j] += Taibj[a,i,b,j]
	prepare VCHACT2AB[b,j,a,i] += T3aibj[b,j,a,i]
    enddo j
    enddo i

endpardo i1, j1, a, b  

pardo i1, j1, a, b 
WHERE a == b 

    request VCACT2AB[a,i1,b,j1] 
    request T2AB[a,i1,b,j1] 
    t2aibj[a,i1,b,j1] = T2ab[a,i1,b,j1]

    do i
    do j
	request HBAR_iijj[i1,i,j1,j] 
	GET                           Niijj[i,i1,j,j1]
	Taibj[a,i,b,j]              = HBAR_iijj[i1,i,j1,j]*VCACT2AB[a,i1,b,j1]
	T1aibj[a,i,b,j]             = Niijj[i,i1,j,j1]*t2aibj[a,i1,b,j1]
	Taibj[a,i,b,j]             += T1aibj[a,i,b,j]
	prepare VCHACT2AB[a,i,b,j] += Taibj[a,i,b,j]
    enddo j
    enddo i

endpardo i1, j1, a, b  

pardo j1, i, a, b  

    request VCACT2AB[a,i,b,j1] 
    request T2AB[a,i,b,j1] 

    do j
	Taibj[a,i,b,j]              = VCACT2AB[a,i,b,j1]*LHBAR_ii[j1,j]
	T1aibj[a,i,b,j]             = T2AB[a,i,b,j1]*LFmi_b[j1,j]
	Taibj[a,i,b,j]             += T1aibj[a,i,b,j]
	Taibj[a,i,b,j]             *= -1.0  
	prepare VCHACT2AB[a,i,b,j] += Taibj[a,i,b,j]
    enddo j

endpardo j1, i, a, b  

#  PART       <2|HT1|0>

pardo a, i, j

    allocate Laijj[a,i,*,j]

    do j1
	request HBAR_IAJK_aabb[j1,j,a,i] 
	Laijj[a,i,j1,j] = HBAR_IAJK_aabb[j1,j,a,i]
    enddo j1

    do b
	Taibj[a,i,b,j]=0.0
	do j1
	    GET               VCACT1A[b,j1]
	    T1aibj[a,i,b,j] = Laijj[a,i,j1,j]*VCACT1A[b,j1]
	    Taibj[a,i,b,j] -= T1aibj[a,i,b,j]
	enddo j1
	prepare VCHACT2AB[a,i,b,j] += Taibj[a,i,b,j]
    enddo b

    deallocate Laijj[a,i,*,j]

endpardo a, i, j

pardo a, i, j

    allocate Laijj[a,i,*,j]

    do j1
	request Njjai[j1,a,i,j] 
	Laijj[a,i,j1,j] = Njjai[j1,a,i,j]
    enddo j1

    do b
	Taibj[a,i,b,j]=0.0
	do j1
	    T1aibj[a,i,b,j] = Laijj[a,i,j1,j]*St1a[b,j1]
	    Taibj[a,i,b,j] -= T1aibj[a,i,b,j]
	enddo j1
	prepare VCHACT2AB[a,i,b,j] += Taibj[a,i,b,j]
    enddo b

    deallocate Laijj[a,i,*,j]

endpardo a, i, j

pardo i, j, b

    allocate Liibj[*,i,b,j]
    allocate L2iibj[*,i,b,j]

    do i1
	request HBAR_IAJK_aabb[i1,i,b,j] 
	Liibj[i1,i,b,j]  = HBAR_IAJK_aabb[i1,i,b,j]
    enddo i1

    do i1
	request Niibj[i1,b,i,j]   
	L2iibj[i1,i,b,j] = Niibj[i1,b,i,j]
    enddo i1

    do a
	Taibj[a,i,b,j]=0.0
	do i1
	    GET               VCACT1A[a,i1]
	    T1aibj[a,i,b,j] = Liibj[i1,i,b,j]*VCACT1A[a,i1]
	    Taibj[a,i,b,j] -= T1aibj[a,i,b,j]

	    T1aibj[a,i,b,j] = L2iibj[i1,i,b,j]*St1a[a,i1]
	    Taibj[a,i,b,j] -= T1aibj[a,i,b,j]
	enddo i1
	prepare VCHACT2AB[a,i,b,j] += Taibj[a,i,b,j]
    enddo a

    deallocate Liibj[*,i,b,j]
    deallocate L2iibj[*,i,b,j]

endpardo i, j, b

pardo a, b1, i

    allocate Lbbai[b1,*,a,i]

    do b
	request HBAR_ABCI_aabb[b1,b,a,i] 
	Lbbai[b1,b,a,i] = HBAR_ABCI_aabb[b1,b,a,i]
    enddo b

    do j
	Taibj[a,i,b1,j]=0.0
	do b
	    GET               VCACT1A[b,j]
	    T1aibj[a,i,b1,j] = Lbbai[b1,b,a,i]*VCACT1A[b,j]
	    Taibj[a,i,b1,j] += T1aibj[a,i,b1,j]
	enddo b
	prepare VCHACT2AB[a,i,b1,j] += Taibj[a,i,b1,j]
    enddo j

    deallocate Lbbai[b1,*,a,i]

endpardo a, b1, i

pardo a1, b, j

    allocate Laabj[a1,*,b,j]

    do a
	request HBAR_ABCI_aabb[a1,a,b,j] 
	Laabj[a1,a,b,j] = HBAR_ABCI_aabb[a1,a,b,j]
    enddo a

    do i
	Taibj[a1,i,b,j] = 0.0
	do a
	    GET               VCACT1A[a,i]
	    T1aibj[a1,i,b,j] = Laabj[a1,a,b,j]*VCACT1A[a,i]
	    Taibj[a1,i,b,j] += T1aibj[a1,i,b,j]
	enddo a
	prepare VCHACT2AB[a1,i,b,j] += Taibj[a1,i,b,j]
    enddo i

    deallocate Laabj[a1,*,b,j]

endpardo a1, b, j

ENDPROC R2ABLIN_NEW_CCPT

PROC AOLADDER_NEW  

#    ------------------------------------------------------------------------ 
#server_barrier 
#print "Starting AO basis 4p ladder"

pardo lambda, i, i1  

    allocate Lxiai[lambda,i,*,i1] 

    do a1 
	request T1AO_aa[lambda,i,a1,i1]   
	Lxiai[lambda,i,a1,i1] = T1AO_aa[lambda,i,a1,i1] 
    enddo a1 

    do sigma 
	ZZaa[lambda,i,sigma,i1]  = 0.0 
	prepare T2AO_aa[lambda,i,sigma,i1] = ZZaa[lambda,i,sigma,i1]
	do a1 
	    Txixi[lambda,i,sigma,i1] = Lxiai[lambda,i,a1,i1]*ca[sigma,a1]
	    ZZaa[lambda,i,sigma,i1] += Txixi[lambda,i,sigma,i1]  
	enddo a1 
	prepare TAO_aa[lambda,i,sigma,i1] = ZZaa[lambda,i,sigma,i1]
    enddo sigma 

    deallocate Lxiai[lambda,i,*,i1] 

endpardo lambda, i, i1   

pardo lambda, i, j  

    allocate Lxibj[lambda,i,*,j] 

    do b 
	request T1AO_ab[lambda,i,b,j]   
	Lxibj[lambda,i,b,j] = T1AO_ab[lambda,i,b,j] 
    enddo b 

    do sigma 
	ZZab[lambda,i,sigma,j]  = 0.0 
	prepare T2AO_ab[lambda,i,sigma,j] = ZZab[lambda,i,sigma,j]
	do b 
	    Txixj[lambda,i,sigma,j] = Lxibj[lambda,i,b,j]*ca[sigma,b]
	    ZZab[lambda,i,sigma,j] += Txixj[lambda,i,sigma,j]  
	enddo b 
	prepare TAO_ab[lambda,i,sigma,j] = ZZab[lambda,i,sigma,j]
    enddo sigma 

    deallocate Lxibj[lambda,i,*,j] 

endpardo lambda, i, j   

server_barrier   

#    Contract AOINT with half back transformed Amplitudes 
#    ----------------------------------------------------    

pardo mu, nu, lambda, sigma

    execute compute_integral_batch aoint[lambda,mu,sigma,nu]

    do i
    do i1
    if i < i1 
	request TAO_aa[lambda,i,sigma,i1] 
	Yaa[mu,i,nu,i1]              = aoint[lambda,mu,sigma,nu]*TAO_aa[lambda,i,sigma,i1]
	Y1aa[nu,i1,mu,i]             = Yaa[mu,i,nu,i1]  
	prepare T2AO_aa[mu,i,nu,i1] += Yaa[mu,i,nu,i1]
	prepare T2AO_aa[nu,i1,mu,i] += Y1aa[nu,i1,mu,i]
    endif 
    if i == i1 
	request TAO_aa[lambda,i,sigma,i1] 
	Yaa[mu,i,nu,i1]              = aoint[lambda,mu,sigma,nu]*TAO_aa[lambda,i,sigma,i1]
	prepare T2AO_aa[mu,i,nu,i1] += Yaa[mu,i,nu,i1]
    endif 
    enddo i1
    enddo i

    do i
    do i1
    if i < i1 
	request TAO_ab[lambda,i,sigma,i1] 
	Yaa[mu,i,nu,i1]              = aoint[lambda,mu,sigma,nu]*TAO_ab[lambda,i,sigma,i1]
	Y1aa[nu,i1,mu,i]             = Yaa[mu,i,nu,i1]  
	prepare T2AO_ab[mu,i,nu,i1] += Yaa[mu,i,nu,i1]
	prepare T2AO_ab[nu,i1,mu,i] += Y1aa[nu,i1,mu,i]
    endif 
    if i == i1 
	request TAO_ab[lambda,i,sigma,i1] 
	Yaa[mu,i,nu,i1]              = aoint[lambda,mu,sigma,nu]*TAO_ab[lambda,i,sigma,i1]
	prepare T2AO_ab[mu,i,nu,i1] += Yaa[mu,i,nu,i1]
    endif 
    enddo i1
    enddo i

endpardo mu, nu, lambda, sigma

server_barrier  

#    Perform final transformation 
#    ---------------------------- 

pardo nu, i, i1
    allocate LLaa[*,i,nu,i1]
    do mu
	request T2AO_aa[mu,i,nu,i1] 
	do a
	    Taixi[a,i,nu,i1] = T2AO_aa[mu,i,nu,i1]*ca[mu,a]
	    LLaa[a,i,nu,i1] += Taixi[a,i,nu,i1]
	enddo a
    enddo mu
    do a
	LLaa[a,i,nu,i1] *= 0.5
	do a1
	    Taiai[a,i,a1,i1]             = LLaa[a,i,nu,i1]*ca[nu,a1]
	    prepare VCHACT2AA[a,i,a1,i1] += Taiai[a,i,a1,i1] 
	enddo a1
    enddo a
    deallocate LLaa[*,i,nu,i1]
endpardo nu, i, i1

pardo nu, i, j
    allocate LLab[*,i,nu,j]
    do mu
	request T2AO_ab[mu,i,nu,j] 
	do a
	    Taixj[a,i,nu,j] = T2AO_ab[mu,i,nu,j]*ca[mu,a]
	    LLab[a,i,nu,j] += Taixj[a,i,nu,j]
	enddo a
    enddo mu
    do a
    do b
	Taibj[a,i,b,j]             = LLab[a,i,nu,j]*ca[nu,b]
	prepare VCHACT2AB[a,i,b,j] += Taibj[a,i,b,j] 
    enddo b
    enddo a
    deallocate LLab[*,i,nu,j]
endpardo nu, i, j

#    ------------------------------------------------------------------------ 

ENDPROC AOLADDER_NEW  
#    -------------------- 

#    ------------------------------------------------------------------------ 

PROC R1ANEW_CCPT
#     ----------- 

#print "Starting Q1*H*B"

pardo a, i, i1  
#     
    GET                  VCACT1A[a,i1]
    tai[a,i]           = VCACT1A[a,i1]*LHBAR_ii[i1,i]
    tai[a,i]          *= -1.0
    PUT VCHACT1A[a,i] += tai[a,i]

endpardo a, i, i1 

pardo a, i, b, j  
#     
    request HBAR_AJIB_aabb[j,b,a,i] 
    GET                  VCACT1A[b,j]
    tai[a,i]           = HBAR_AJIB_aabb[j,b,a,i]*VCACT1A[b,j]
    PUT VCHACT1A[a,i] += tai[a,i]

endpardo a, i, b, j 

pardo a, i, b, j  

    request VCACT2AB[a,i,b,j] 
    tai[a,i]           = VCACT2AB[a,i,b,j]*LHBAR_jb[j,b]
    PUT VCHACT1A[a,i] += tai[a,i]

endpardo a, i, b, j 

pardo i, a, a1  
#     
    GET                  VCACT1A[a1,i]
    tai[a,i]           = VCACT1A[a1,i]*LHBAR_aa[a,a1]
    PUT VCHACT1A[a,i] += tai[a,i]

endpardo i, a, a1  

pardo a, i, a1, i1  
#     
    request HBAR_AJIB_aaaa[i1,a1,a,i] 
    GET                  VCACT1A[a1,i1]
    tai[a,i]           = HBAR_AJIB_aaaa[i1,a1,a,i]*VCACT1A[a1,i1]
    PUT VCHACT1A[a,i] += tai[a,i]

endpardo a, i, a1, i1 

pardo a, i, a1, i1  

    request VCACT2AA[a,i,a1,i1] 
    tai[a,i]           = VCACT2AA[a,i,a1,i1]*LHBAR_ia[i1,a1]
    PUT VCHACT1A[a,i] += tai[a,i]

endpardo a, i, a1, i1 

#     <ai|WT2|0>

pardo a1, a2, i1

    allocate Laiai[a1,*,a2,i1]

    if a1 == a2

	do i
	    request VCACT2AA[a1,i,a2,i1] 
	    Laiai[a1,i,a2,i1] = VCACT2AA[a1,i,a2,i1]
	enddo i

	do a
	    request HBAR_AIBC_aaaa[a,a1,i1,a2] 
	    do i
		tai[a,i]  = HBAR_AIBC_aaaa[a,a1,i1,a2]*Laiai[a1,i,a2,i1]
		tai[a,i] *= 0.5
		PUT VCHACT1A[a,i] += tai[a,i]
	    enddo i
	enddo a

    endif

    if a1 < a2

    do i
	request VCACT2AA[a1,i,a2,i1] 
	Laiai[a1,i,a2,i1] = VCACT2AA[a1,i,a2,i1]
    enddo i

    do a
	request HBAR_AIBC_aaaa[a,a1,i1,a2] 
	do i
	    tai[a,i]  = HBAR_AIBC_aaaa[a,a1,i1,a2]*Laiai[a1,i,a2,i1]
	    PUT VCHACT1A[a,i] += tai[a,i]
	enddo i
    enddo a

    endif

    deallocate Laiai[a1,*,a2,i1]

endpardo a1, a2, i1


pardo a1, i1, i2

    allocate Laiii[a1,i2,*,i1]

    if i1 == i2

	do i
	    request HBAR_JKIA_aaaa[i1,i,i2,a1] 
	    Laiii[a1,i2,i,i1] = HBAR_JKIA_aaaa[i1,i,i2,a1]
	enddo i

	do a
	    request VCACT2AA[a,i1,a1,i2] 
	    do i
		tai[a,i]  = Laiii[a1,i2,i,i1]*VCACT2AA[a,i1,a1,i2]
		tai[a,i] *= -0.5
		PUT VCHACT1A[a,i] += tai[a,i]
	    enddo i
	enddo a

    endif

    if i1 < i2

	do i
	    request HBAR_JKIA_aaaa[i1,i,i2,a1] 
	    Laiii[a1,i2,i,i1] = HBAR_JKIA_aaaa[i1,i,i2,a1]
	enddo i

	do a
	    request VCACT2AA[a,i1,a1,i2] 
	    do i
		tai[a,i]  = Laiii[a1,i2,i,i1]*VCACT2AA[a,i1,a1,i2]
		tai[a,i] *= -1.0
		PUT VCHACT1A[a,i] += tai[a,i]
	    enddo i
	enddo a

    endif

    deallocate Laiii[a1,i2,*,i1]

endpardo a1, i1, i2

pardo a1, b, j

    allocate Laibj[a1,*,b,j]

    do i
	request VCACT2AB[a1,i,b,j] 
	Laibj[a1,i,b,j] = VCACT2AB[a1,i,b,j]
    enddo i

    do a
	request HBAR_AIBC_aabb[a,a1,j,b] 
	do i
	    tai[a,i]  = HBAR_AIBC_aabb[a,a1,j,b]*Laibj[a1,i,b,j]
	    PUT VCHACT1A[a,i] += tai[a,i]
	enddo i
    enddo a

    deallocate Laibj[a1,*,b,j]

endpardo a1, b, j

pardo b, j, i1

    allocate L1iibj[*,i1,b,j]

    do i
	request HBAR_JKIA_aabb[i1,i,j,b] 
	L1iibj[i,i1,b,j] = HBAR_JKIA_aabb[i1,i,j,b]
    enddo i

    do a
	request VCACT2AB[a,i1,b,j] 
	do i
	    tai[a,i]  = L1iibj[i,i1,b,j]*VCACT2AB[a,i1,b,j]
	    tai[a,i] *= -1.0
	    PUT VCHACT1A[a,i] += tai[a,i]
	enddo i
    enddo a

    deallocate L1iibj[*,i1,b,j]

endpardo b, j, i1

ENDPROC R1ANEW_CCPT

PROC SYMMETRHC_A

#print "Anti-symmetrizing Q2*H*B _aa"

server_barrier
pardo a,i,a1,i1
    put DRNaiai[a,i,a1,i1] = 0.0
endpardo a,i,a1,i1
pardo a,i,a1,i1
    put D2RNaiai[a,i,a1,i1] = 0.0
endpardo a,i,a1,i1
server_barrier
pardo a,i,a1,i1
    request VCHACT2AA[a,i,a1,i1]
    Taiai[a,i,a1,i1] = VCHACT2AA[a,i,a1,i1]
    T3aiai[a1,i,a,i1] = 0.0

    if a == a1
	execute anti_symm_v Taiai[a,i,a1,i1]
    endif
    if a < a1
	T3aiai[a1,i,a,i1]  = Taiai[a,i,a1,i1]
	T3aiai[a1,i,a,i1] *= -1.0
    endif

    put DRNaiai[a,i,a1,i1] += Taiai[a,i,a1,i1]
    put DRNaiai[a1,i,a,i1] += T3aiai[a1,i,a,i1]
endpardo a,i,a1,i1
server_barrier
pardo a,i,a1,i1
    get DRNaiai[a,i,a1,i1]
    Taiai[a,i,a1,i1] = DRNaiai[a,i,a1,i1]
    T3aiai[a,i1,a1,i] = 0.0

    if i == i1
	execute anti_symm_o Taiai[a,i,a1,i1]
    endif
    if i < i1
	T3aiai[a,i1,a1,i]  = Taiai[a,i,a1,i1]
	T3aiai[a,i1,a1,i] *= -1.0
    endif

    put D2RNaiai[a,i,a1,i1] += Taiai[a,i,a1,i1]
    put D2RNaiai[a,i1,a1,i] += T3aiai[a,i1,a1,i]

endpardo a,i,a1,i1
server_barrier
pardo a,i,a1,i1
    get D2RNaiai[a,i,a1,i1]
    Taiai[a,i,a1,i1] = D2RNaiai[a,i,a1,i1]
    prepare VCHACT2AA[a,i,a1,i1] = Taiai[a,i,a1,i1]
endpardo a,i,a1,i1
server_barrier
delete DRNaiai
delete D2RNaiai
server_barrier
ENDPROC SYMMETRHC_A

PROC place_HB
server_barrier
Tk[ksub] = 1.0
pardo a,i
    get VCHACT1A[a,i]
    Tkai[ksub,a,i] = Tk[ksub]*VCHACT1A[a,i]
    prepare HB1_a[ksub,a,i] = Tkai[ksub,a,i]
endpardo a,i

pardo a,i,a1,i1
    request VCHACT2AA[a,i,a1,i1]
    Tkaiai[ksub,a,i,a1,i1] = Tk[ksub]*VCHACT2AA[a,i,a1,i1]
    prepare HB2_aa[ksub,a,i,a1,i1] = Tkaiai[ksub,a,i,a1,i1]
endpardo a,i,a1,i1

pardo a,i,b,j
    request VCHACT2AB[a,i,b,j]
    Tkaibj[ksub,a,i,b,j] = Tk[ksub]*VCHACT2AB[a,i,b,j]
    prepare HB2_ab[ksub,a,i,b,j] = Tkaibj[ksub,a,i,b,j]
endpardo a,i,b,j
server_barrier
ENDPROC place_HB

#------------------------------------------------------------------------

PROC HB_mult_CCPT

#------------------------------------------------------------------------
#
# JNB verified A3
#
#------------------------------------------------------------------------
print "Starting HR multiplication"
server_barrier

call HB_zero

do ksub

    allocate LFmi_a[*,*]
    allocate LFmi_b[*,*]
    allocate LFae_a[*,*]

    call VCHACT_ZERO
    call place_VCACT

    call FACTORS_NEW_CCPT
    server_barrier

    call AOLADDER_NEW
    call R2ABLIN_NEW_CCPT
    call R2AALIN_NEW_CCPT
    call R1ANEW_CCPT

    server_barrier

    call SYMMETRHC_A

    call place_HB
    server_barrier
    delete Fae_a
    delete Fmi_a
    delete Fmi_b
    deallocate LFae_a[*,*]
    deallocate LFmi_a[*,*]
    deallocate LFmi_b[*,*]
    server_barrier

enddo ksub
server_barrier

ENDPROC HB_mult_CCPT

#------------------------------------------------------------------------

PROC BHB_mult
#
allocate LGmat[*,*]
print "Starting LHR mult"
server_barrier
do ksub
do ksub1
    LGmat[ksub,ksub1] = 0.0
enddo ksub1
enddo ksub

pardo ksub,ksub1
    prepare Gmat[ksub,ksub1] = 0.0
endpardo ksub,ksub1
server_barrier
#
pardo a,i
do ksub
    request HB1_a[ksub,a,i]
    Tkai[ksub,a,i] = HB1_a[ksub,a,i]
    do ksub1
	request LB1_a[ksub1,a,i]
	Tkk[ksub1,ksub] = LB1_a[ksub1,a,i]*Tkai[ksub,a,i]
	Tkk[ksub1,ksub] *= 2.0
	LGmat[ksub1,ksub] += Tkk[ksub1,ksub]
    enddo ksub1
enddo ksub
endpardo a,i
#
pardo a,i,a1,i1
where a < a1
where i < i1
do ksub
    request HB2_aa[ksub,a,i,a1,i1]
    Tkaiai[ksub,a,i,a1,i1] = HB2_aa[ksub,a,i,a1,i1]
    do ksub1
	request LB2_aa[ksub1,a,i,a1,i1]
	Tkk[ksub1,ksub] = LB2_aa[ksub1,a,i,a1,i1]*Tkaiai[ksub,a,i,a1,i1]
	Tkk[ksub1,ksub] *= 2.0
	LGmat[ksub1,ksub] += Tkk[ksub1,ksub]
    enddo ksub1
enddo ksub
endpardo a,i,a1,i1
#
pardo a,i,a1,i1
where a < a1
where i == i1
do ksub
    request HB2_aa[ksub,a,i,a1,i1]
    Tkaiai[ksub,a,i,a1,i1] = HB2_aa[ksub,a,i,a1,i1]
    do ksub1
	request LB2_aa[ksub1,a,i,a1,i1]
	Tkk[ksub1,ksub] = LB2_aa[ksub1,a,i,a1,i1]*Tkaiai[ksub,a,i,a1,i1]
	LGmat[ksub1,ksub] += Tkk[ksub1,ksub]
    enddo ksub1
enddo ksub
endpardo a,i,a1,i1
#
pardo a,i,a1,i1
where a == a1
where i < i1
do ksub
    request HB2_aa[ksub,a,i,a1,i1]
    Tkaiai[ksub,a,i,a1,i1] = HB2_aa[ksub,a,i,a1,i1]
    do ksub1
	request LB2_aa[ksub1,a,i,a1,i1]
	Tkk[ksub1,ksub] = LB2_aa[ksub1,a,i,a1,i1]*Tkaiai[ksub,a,i,a1,i1]
	LGmat[ksub1,ksub] += Tkk[ksub1,ksub]
    enddo ksub1
enddo ksub
endpardo a,i,a1,i1
#
pardo a,i,a1,i1
where a == a1
where i == i1
do ksub
    request HB2_aa[ksub,a,i,a1,i1]
    Tkaiai[ksub,a,i,a1,i1] = HB2_aa[ksub,a,i,a1,i1]
    do ksub1
	request LB2_aa[ksub1,a,i,a1,i1]
	Tkk[ksub1,ksub] = LB2_aa[ksub1,a,i,a1,i1]*Tkaiai[ksub,a,i,a1,i1]
	Tkk[ksub1,ksub] *= 0.5
	LGmat[ksub1,ksub] += Tkk[ksub1,ksub]
    enddo ksub1
enddo ksub
endpardo a,i,a1,i1
#
#
pardo a,i,b,j
do ksub
    request HB2_ab[ksub,a,i,b,j]
    Tkaibj[ksub,a,i,b,j] = HB2_ab[ksub,a,i,b,j]
    do ksub1
	request LB2_ab[ksub1,a,i,b,j]
	Tkk[ksub1,ksub] = LB2_ab[ksub1,a,i,b,j]*Tkaibj[ksub,a,i,b,j]
	LGmat[ksub1,ksub] += Tkk[ksub1,ksub]
    enddo ksub1
enddo ksub
endpardo a,i,b,j
server_barrier
#
do ksub
do ksub1
    Tkk[ksub1,ksub] = LGmat[ksub1,ksub]
    prepare Gmat[ksub1,ksub] += LGmat[ksub1,ksub]
enddo ksub1
enddo ksub
#
server_barrier
deallocate LGmat
server_barrier
#
ENDPROC BHB_mult

PROC form_G

call HB_mult_CCPT

call BHB_mult

ENDPROC form_G

#------------------------------------------------------------------------

PROC diag_G
#
server_barrier

execute get_my_rank rank
myrank = (int)rank
if myrank == root
    do ksub
    do ksub1
	request Gmat[ksub1,ksub]
	Tkk[ksub1,ksub] = Gmat[ksub1,ksub]
	GSmat[ksub1,ksub] = Tkk[ksub1,ksub]
    enddo ksub1
    enddo ksub

    do ksub
        SEk[ksub] = 0.0
    enddo ksub

    execute gen_eigen_calc GSmat SAlphaL SAlphaR SEk

    do kstate
	SEk0[kstate] = SEk[kstate]
    enddo kstate
    print "-- EOM-CCPT(2) excited state energies --"

    do kstate
	allocate contiguous EOM_EE_Energy[kstate:kstate]
	EOM_EE_Energy[kstate:kstate] = SEk0[kstate]
	print EOM_EE_Energy[kstate:kstate]
	deallocate contiguous EOM_EE_Energy[kstate:kstate]
    enddo kstate

endif
broadcast_from root SAlphaL
broadcast_from root SAlphaR
broadcast_from root SEk
broadcast_from root SEk0

server_barrier
#
ENDPROC diag_G

#------------------------------------------------------------------------

PROC move_by_one_RK1
#
pardo a,i,kstate
    request R1k1_a[kstate,a,i]
    prepare R0k1_a[kstate,a,i] = R1k1_a[kstate,a,i]
endpardo a,i,kstate
#
ENDPROC move_by_one_RK1

PROC move_by_one_RK2aa
#
pardo a,i,a1,i1,kstate
    request R1k2_aa[kstate,a,i,a1,i1]
    prepare R0k2_aa[kstate,a,i,a1,i1] = R1k2_aa[kstate,a,i,a1,i1]
endpardo a,i,a1,i1,kstate
#
ENDPROC move_by_one_RK2aa

PROC move_by_one_RK2ab
#
pardo a,i,b,j,kstate
    request R1k2_ab[kstate,a,i,b,j]
    prepare R0k2_ab[kstate,a,i,b,j] = R1k2_ab[kstate,a,i,b,j]
endpardo a,i,b,j,kstate
#
ENDPROC move_by_one_RK2ab

PROC move_by_one_LK1
#
pardo a,i,kstate
    request L1k1_a[kstate,a,i]
    prepare L0k1_a[kstate,a,i] = L1k1_a[kstate,a,i]
endpardo a,i,kstate
#
ENDPROC move_by_one_LK1

PROC move_by_one_LK2aa
#
pardo a,i,a1,i1,kstate
    request L1k2_aa[kstate,a,i,a1,i1]
    prepare L0k2_aa[kstate,a,i,a1,i1] = L1k2_aa[kstate,a,i,a1,i1]
endpardo a,i,a1,i1,kstate
#
ENDPROC move_by_one_LK2aa

PROC move_by_one_LK2ab
#
pardo a,i,b,j,kstate
    request L1k2_ab[kstate,a,i,b,j]
    prepare L0k2_ab[kstate,a,i,b,j] = L1k2_ab[kstate,a,i,b,j]
endpardo a,i,b,j,kstate
#
ENDPROC move_by_one_LK2ab

PROC form_new_RK1
#
pardo a,i,kstate
Tkai[kstate,a,i] = 0.0
do ksub
    request RB1_a[ksub,a,i]
    T1kai[kstate,a,i] = RB1_a[ksub,a,i]*SalphaR[ksub,kstate]
    Tkai[kstate,a,i] += T1kai[kstate,a,i]
enddo ksub
prepare R1k1_a[kstate,a,i] = Tkai[kstate,a,i]
endpardo a,i,kstate
#
#
ENDPROC form_new_RK1

PROC form_new_RK2aa
#
pardo a,i,a1,i1,kstate
Tkaiai[kstate,a,i,a1,i1] = 0.0
do ksub
    request RB2_aa[ksub,a,i,a1,i1]
    T1kaiai[kstate,a,i,a1,i1] = RB2_aa[ksub,a,i,a1,i1]*SalphaR[ksub,kstate]
    Tkaiai[kstate,a,i,a1,i1] += T1kaiai[kstate,a,i,a1,i1]
enddo ksub
prepare R1k2_aa[kstate,a,i,a1,i1] = Tkaiai[kstate,a,i,a1,i1]
endpardo a,i,a1,i1,kstate
#
#
ENDPROC form_new_RK2aa

PROC form_new_RK2ab
#
pardo a,i,b,j,kstate
Tkaibj[kstate,a,i,b,j] = 0.0
do ksub
    request RB2_ab[ksub,a,i,b,j]
    T1kaibj[kstate,a,i,b,j] = RB2_ab[ksub,a,i,b,j]*SalphaR[ksub,kstate]
    Tkaibj[kstate,a,i,b,j] += T1kaibj[kstate,a,i,b,j]
enddo ksub
prepare R1k2_ab[kstate,a,i,b,j] = Tkaibj[kstate,a,i,b,j]
endpardo a,i,b,j,kstate
#
ENDPROC form_new_RK2ab

PROC form_new_LK1
#
pardo a,i,kstate
Tkai[kstate,a,i] = 0.0
do ksub
    request LB1_a[ksub,a,i]
    T1kai[kstate,a,i] = LB1_a[ksub,a,i]*SalphaL[ksub,kstate]
    Tkai[kstate,a,i] += T1kai[kstate,a,i]
enddo ksub
prepare L1k1_a[kstate,a,i] = Tkai[kstate,a,i]
endpardo a,i,kstate
#
#
ENDPROC form_new_LK1

PROC form_new_LK2aa
#
pardo a,i,a1,i1,kstate
Tkaiai[kstate,a,i,a1,i1] = 0.0
do ksub
    request LB2_aa[ksub,a,i,a1,i1]
    T1kaiai[kstate,a,i,a1,i1] = LB2_aa[ksub,a,i,a1,i1]*SalphaL[ksub,kstate]
    Tkaiai[kstate,a,i,a1,i1] += T1kaiai[kstate,a,i,a1,i1]
enddo ksub
prepare L1k2_aa[kstate,a,i,a1,i1] = Tkaiai[kstate,a,i,a1,i1]
endpardo a,i,a1,i1,kstate
#
#
ENDPROC form_new_LK2aa

PROC form_new_LK2ab
#
pardo a,i,b,j,kstate
Tkaibj[kstate,a,i,b,j] = 0.0
do ksub
    request LB2_ab[ksub,a,i,b,j]
    T1kaibj[kstate,a,i,b,j] = LB2_ab[ksub,a,i,b,j]*SalphaL[ksub,kstate]
    Tkaibj[kstate,a,i,b,j] += T1kaibj[kstate,a,i,b,j]
enddo ksub
prepare L1k2_ab[kstate,a,i,b,j] = Tkaibj[kstate,a,i,b,j]
endpardo a,i,b,j,kstate
#
ENDPROC form_new_LK2ab

PROC form_residual_R1
#
pardo a,i

    get VCONV1A[a,i]

do kstate
    etemp = SEk[kstate]
    etemp *= -1.0
    Tkai[kstate,a,i] = 0.0

    do ksub
        request HB1_a[ksub,a,i]
        request RB1_a[ksub,a,i]

# a*HB
        T1kai[kstate,a,i] = HB1_a[ksub,a,i]*SalphaR[ksub,kstate]

        Tkai[kstate,a,i] += T1kai[kstate,a,i]
# a*E*B
        T2kai[kstate,a,i]  = RB1_a[ksub,a,i]*SalphaR[ksub,kstate]
        T2kai[kstate,a,i] *= etemp

        Tkai[kstate,a,i] += T2kai[kstate,a,i]
    enddo ksub

    Tk[kstate] = 1.0
    Tai[a,i]   = 1.0

    T3kai[kstate,a,i] = Tk[kstate]^VCONV1A[a,i]

    T4kai[kstate,a,i] = etemp
    T3kai[kstate,a,i] += T4kai[kstate,a,i]
    
    execute invert_diagonal Tkai[kstate,a,i] T3kai[kstate,a,i]
    Tkai[kstate,a,i] *= -1.0
    prepare cRk1_a[kstate,a,i] = Tkai[kstate,a,i]

enddo kstate
endpardo a,i
#
ENDPROC form_residual_R1

PROC form_residual_R2aa
#
pardo a,i,a1,i1

    request VCONV2AA[a,i,a1,i1]

do kstate
    etemp = SEk[kstate]
    etemp *= -1.0
    Tkaiai[kstate,a,i,a1,i1] = 0.0

    do ksub
        request HB2_aa[ksub,a,i,a1,i1]
        request RB2_aa[ksub,a,i,a1,i1]

# a*HB
        T1kaiai[kstate,a,i,a1,i1] = HB2_aa[ksub,a,i,a1,i1]*SalphaR[ksub,kstate]

        Tkaiai[kstate,a,i,a1,i1] += T1kaiai[kstate,a,i,a1,i1]
# a*E*B
        T2kaiai[kstate,a,i,a1,i1]  = RB2_aa[ksub,a,i,a1,i1]*SalphaR[ksub,kstate]
        T2kaiai[kstate,a,i,a1,i1] *= etemp

        Tkaiai[kstate,a,i,a1,i1] += T2kaiai[kstate,a,i,a1,i1]
    enddo ksub

    Tk[kstate] = 1.0
    Taiai[a,i,a1,i1]   = 1.0

    T3kaiai[kstate,a,i,a1,i1] = Tk[kstate]^VCONV2AA[a,i,a1,i1]
    T4kaiai[kstate,a,i,a1,i1] = etemp
    T3kaiai[kstate,a,i,a1,i1] += T4kaiai[kstate,a,i,a1,i1]

    execute invert_diagonal_asym Tkaiai[kstate,a,i,a1,i1] T3kaiai[kstate,a,i,a1,i1]
    Tkaiai[kstate,a,i,a1,i1] *= -1.0
    prepare cRk2_aa[kstate,a,i,a1,i1] = Tkaiai[kstate,a,i,a1,i1]

enddo kstate
endpardo a,i,a1,i1
#
ENDPROC form_residual_R2aa

PROC form_residual_R2ab
#
pardo a,i,b,j

    request VCONV2AB[a,i,b,j]

do kstate
    etemp = SEk[kstate]
    etemp *= -1.0
    Tkaibj[kstate,a,i,b,j] = 0.0

    do ksub
        request HB2_ab[ksub,a,i,b,j]
        request RB2_ab[ksub,a,i,b,j]

# a*HB
        T1kaibj[kstate,a,i,b,j] = HB2_ab[ksub,a,i,b,j]*SalphaR[ksub,kstate]

        Tkaibj[kstate,a,i,b,j] += T1kaibj[kstate,a,i,b,j]
# a*E*B
        T2kaibj[kstate,a,i,b,j]  = RB2_ab[ksub,a,i,b,j]*SalphaR[ksub,kstate]
        T2kaibj[kstate,a,i,b,j] *= etemp

        Tkaibj[kstate,a,i,b,j] += T2kaibj[kstate,a,i,b,j]
    enddo ksub

    Tk[kstate] = 1.0
    Taibj[a,i,b,j]   = 1.0

    T3kaibj[kstate,a,i,b,j] = Tk[kstate]^VCONV2AB[a,i,b,j]
    T4kaibj[kstate,a,i,b,j] = etemp
    T3kaibj[kstate,a,i,b,j] += T4kaibj[kstate,a,i,b,j]

    execute invert_diagonal Tkaibj[kstate,a,i,b,j] T3kaibj[kstate,a,i,b,j]
    Tkaibj[kstate,a,i,b,j] *= -1.0
    prepare cRk2_ab[kstate,a,i,b,j] = Tkaibj[kstate,a,i,b,j]

enddo kstate
endpardo a,i,b,j
#
ENDPROC form_residual_R2ab

PROC update_RB1
#
pardo a,i
    allocate contiguous CLRB1_a[1:subspc,a:a,i:i]
    do kstate
        request R1k1_a[kstate,a,i]
        request R0k1_a[kstate,a,i]
        request cRk1_a[kstate,a,i]

# davidson space 1
        kstart = kstate
        CLRB1_a[kstart:kstart,a:a,i:i] = R0k1_a[kstate,a,i]
# davidson space 2
        kstart = kstate + roots
        CLRB1_a[kstart:kstart,a:a,i:i] = R1k1_a[kstate,a,i]
# davidson space 3
        kstart = kstate + 2*roots
        CLRB1_a[kstart:kstart,a:a,i:i] = cRk1_a[kstate,a,i]
    enddo kstate
    do ksub
        Tkai[ksub,a,i] = CLRB1_a[ksub:ksub,a:a,i:i]
        prepare RB1_a[ksub,a,i] = Tkai[ksub,a,i]
    enddo ksub

    deallocate contiguous CLRB1_a[1:subspc,a:a,i:i]
endpardo a,i
#
ENDPROC update_RB1

PROC update_RB2aa
#
pardo a,i,a1,i1
    allocate contiguous CLRB2_aa[1:subspc,a:a,i:i,a1:a1,i1:i1]
    do kstate
        request R1k2_aa[kstate,a,i,a1,i1]
        request R0k2_aa[kstate,a,i,a1,i1]
        request cRk2_aa[kstate,a,i,a1,i1]

# davidson space 1
        kstart = kstate
        CLRB2_aa[kstart:kstart,a:a,i:i,a1:a1,i1:i1] = R0k2_aa[kstate,a,i,a1,i1]
# davidson space 2
        kstart = kstate + roots
        CLRB2_aa[kstart:kstart,a:a,i:i,a1:a1,i1:i1] = R1k2_aa[kstate,a,i,a1,i1]
# davidson space 3
        kstart = kstate + 2*roots
        CLRB2_aa[kstart:kstart,a:a,i:i,a1:a1,i1:i1] = cRk2_aa[kstate,a,i,a1,i1]
    enddo kstate
    do ksub
        Tkaiai[ksub,a,i,a1,i1] = CLRB2_aa[ksub:ksub,a:a,i:i,a1:a1,i1:i1]
        prepare RB2_aa[ksub,a,i,a1,i1] = Tkaiai[ksub,a,i,a1,i1]
    enddo ksub

    deallocate contiguous CLRB2_aa[1:subspc,a:a,i:i,a1:a1,i1:i1]
endpardo a,i,a1,i1
#
ENDPROC update_RB2aa

PROC update_RB2ab
#
pardo a,i,b,j
    allocate contiguous CLRB2_ab[1:subspc,a:a,i:i,b:b,j:j]
    do kstate
        request R1k2_ab[kstate,a,i,b,j]
        request R0k2_ab[kstate,a,i,b,j]
        request cRk2_ab[kstate,a,i,b,j]

# davidson space 1
        kstart = kstate
        CLRB2_ab[kstart:kstart,a:a,i:i,b:b,j:j] = R0k2_ab[kstate,a,i,b,j]
# davidson space 2
        kstart = kstate + roots
        CLRB2_ab[kstart:kstart,a:a,i:i,b:b,j:j] = R1k2_ab[kstate,a,i,b,j]
# davidson space 3
        kstart = kstate + 2*roots
        CLRB2_ab[kstart:kstart,a:a,i:i,b:b,j:j] = cRk2_ab[kstate,a,i,b,j]
    enddo kstate
    do ksub
        Tkaibj[ksub,a,i,b,j] = CLRB2_ab[ksub:ksub,a:a,i:i,b:b,j:j]
        prepare RB2_ab[ksub,a,i,b,j] = Tkaibj[ksub,a,i,b,j]
    enddo ksub

    deallocate contiguous CLRB2_ab[1:subspc,a:a,i:i,b:b,j:j]
endpardo a,i,b,j
#
ENDPROC update_RB2ab

PROC update_LB1
#
pardo a,i
    allocate contiguous CLLB1_a[1:subspc,a:a,i:i]
    do kstate
        request L1k1_a[kstate,a,i]
        request L0k1_a[kstate,a,i]
        request cRk1_a[kstate,a,i]

# davidson space 1
        kstart = kstate
        CLLB1_a[kstart:kstart,a:a,i:i] = L0k1_a[kstate,a,i]
# davidson space 2
        kstart = kstate + roots
        CLLB1_a[kstart:kstart,a:a,i:i] = L1k1_a[kstate,a,i]
# davidson space 3
        kstart = kstate + 2*roots
        CLLB1_a[kstart:kstart,a:a,i:i] = cRk1_a[kstate,a,i]
    enddo kstate
    do ksub
        Tkai[ksub,a,i] = CLLB1_a[ksub:ksub,a:a,i:i]
        prepare LB1_a[ksub,a,i] = Tkai[ksub,a,i]
    enddo ksub

    deallocate contiguous CLLB1_a[1:subspc,a:a,i:i]
endpardo a,i
#
ENDPROC update_LB1

PROC update_LB2aa
#
pardo a,i,a1,i1
    allocate contiguous CLLB2_aa[1:subspc,a:a,i:i,a1:a1,i1:i1]
    do kstate
        request L1k2_aa[kstate,a,i,a1,i1]
        request L0k2_aa[kstate,a,i,a1,i1]
        request cRk2_aa[kstate,a,i,a1,i1]

# davidson space 1
        kstart = kstate
        CLLB2_aa[kstart:kstart,a:a,i:i,a1:a1,i1:i1] = L0k2_aa[kstate,a,i,a1,i1]
# davidson space 2
        kstart = kstate + roots
        CLLB2_aa[kstart:kstart,a:a,i:i,a1:a1,i1:i1] = L1k2_aa[kstate,a,i,a1,i1]
# davidson space 3
        kstart = kstate + 2*roots
        CLLB2_aa[kstart:kstart,a:a,i:i,a1:a1,i1:i1] = cRk2_aa[kstate,a,i,a1,i1]
    enddo kstate
    do ksub
        Tkaiai[ksub,a,i,a1,i1] = CLLB2_aa[ksub:ksub,a:a,i:i,a1:a1,i1:i1]
        prepare LB2_aa[ksub,a,i,a1,i1] = Tkaiai[ksub,a,i,a1,i1]
    enddo ksub

    deallocate contiguous CLLB2_aa[1:subspc,a:a,i:i,a1:a1,i1:i1]
endpardo a,i,a1,i1
#
ENDPROC update_LB2aa

PROC update_LB2ab
#
pardo a,i,b,j
    allocate contiguous CLLB2_ab[1:subspc,a:a,i:i,b:b,j:j]
    do kstate
        request L1k2_ab[kstate,a,i,b,j]
        request L0k2_ab[kstate,a,i,b,j]
        request cRk2_ab[kstate,a,i,b,j]

# davidson space 1
        kstart = kstate
        CLLB2_ab[kstart:kstart,a:a,i:i,b:b,j:j] = L0k2_ab[kstate,a,i,b,j]
# davidson space 2
        kstart = kstate + roots
        CLLB2_ab[kstart:kstart,a:a,i:i,b:b,j:j] = L1k2_ab[kstate,a,i,b,j]
# davidson space 3
        kstart = kstate + 2*roots
        CLLB2_ab[kstart:kstart,a:a,i:i,b:b,j:j] = cRk2_ab[kstate,a,i,b,j]
    enddo kstate
    do ksub
        Tkaibj[ksub,a,i,b,j] = CLLB2_ab[ksub:ksub,a:a,i:i,b:b,j:j]
        prepare LB2_ab[ksub,a,i,b,j] = Tkaibj[ksub,a,i,b,j]
    enddo ksub

    deallocate contiguous CLLB2_ab[1:subspc,a:a,i:i,b:b,j:j]
endpardo a,i,b,j
#
ENDPROC update_LB2ab

PROC all_GS
#
#---------------------------------------------------------------
# we do Left | Right biorthogonalization.
# when coded this paper was open
#ROCKY MOUNTAIN JOURNAL OF MATHEMATICS Volume 44, Number 4, 2014
#INTRODUCTION TO A GRAM-SCHMIDT-TYPE BIORTHOGONALIZATION METHOD
#L. KOHAUPT
# modification to the scheme by having L and R scaled by 1/norm**0.5 
#  this is done for numerical stability concerns due to imballanced 
#  weighting of L and R within the above algorithm
#---------------------------------------------------------------
#
do ksub
where ksub == 1
server_barrier
#######################
# get k=k'=1 overlap
    normS   = 0.0
    Tk[ksub] = 1.0
    pardo a,i
	request RB1_a[ksub,a,i]
	request LB1_a[ksub,a,i]
	normT  = LB1_a[ksub,a,i]*RB1_a[ksub,a,i]
	normT *= 2.0
	normS += normT
    endpardo a,i
    pardo a,i,a1,i1
	request RB2_aa[ksub,a,i,a1,i1]
	request LB2_aa[ksub,a,i,a1,i1]
	normT  = LB2_aa[ksub,a,i,a1,i1]*RB2_aa[ksub,a,i,a1,i1]
	normT *= 0.5
	normS += normT
    endpardo a,i,a1,i1

    pardo a,i,b,j
	request RB2_ab[ksub,a,i,b,j]
	request LB2_ab[ksub,a,i,b,j]
	normT  = LB2_ab[ksub,a,i,b,j]*RB2_ab[ksub,a,i,b,j]
	normS += normT
    endpardo a,i,b,j
    server_barrier
    norm1   = 0.0
    collective norm1   += normS
    etemp = 1.0
    if norm1 < 0.0
	etemp = -1.0
    endif
    norm1 *= etemp
    norm2 = (norm1)**(-0.5)
#    if norm1 < (10.0)**(-12.0)
#	norm2 = 1.0
#    endif
#######################
    pardo a,i
        prepare RB1_a[ksub,a,i] *= norm2
    endpardo a,i
    pardo a,i,a1,i1
        prepare RB2_aa[ksub,a,i,a1,i1] *= norm2
    endpardo a,i,a1,i1
    pardo a,i,b,j
        prepare RB2_ab[ksub,a,i,b,j] *= norm2
    endpardo a,i,b,j
    server_barrier
#
# flip sign of left vector for negative bi-norm
    norm2 *= etemp
#
    pardo a,i
        prepare LB1_a[ksub,a,i] *= norm2
    endpardo a,i
    pardo a,i,a1,i1
        prepare LB2_aa[ksub,a,i,a1,i1] *= norm2
    endpardo a,i,a1,i1
    pardo a,i,b,j
        prepare LB2_ab[ksub,a,i,b,j] *= norm2
    endpardo a,i,b,j
server_barrier
enddo ksub

# loop over "k+1"
do qsub
server_barrier
#######################
# make copy of Ak+1
    Tk[qsub] = 1.0
    pardo a,i
	request LB1_a[qsub,a,i]
	Tai[a,i] = Tk[qsub]*LB1_a[qsub,a,i]
	put DLNai[a,i] = Tai[a,i]
    endpardo a,i
    pardo a,i,a1,i1
	request LB2_aa[qsub,a,i,a1,i1]
	Taiai[a,i,a1,i1] = Tk[qsub]*LB2_aa[qsub,a,i,a1,i1]
	put DLNaiai[a,i,a1,i1] = Taiai[a,i,a1,i1]
    endpardo a,i,a1,i1
    pardo a,i,b,j
	request LB2_ab[qsub,a,i,b,j]
	Taibj[a,i,b,j] = Tk[qsub]*LB2_ab[qsub,a,i,b,j]
	put DLNaibj[a,i,b,j] = Taibj[a,i,b,j]
    endpardo a,i,b,j
# make copy of Fk+1
    pardo a,i
	request RB1_a[qsub,a,i]
	Tai[a,i] = Tk[qsub]*RB1_a[qsub,a,i]
	put DRNai[a,i] = Tai[a,i]
    endpardo a,i
    pardo a,i,a1,i1
	request RB2_aa[qsub,a,i,a1,i1]
	Taiai[a,i,a1,i1] = Tk[qsub]*RB2_aa[qsub,a,i,a1,i1]
	put DRNaiai[a,i,a1,i1] = Taiai[a,i,a1,i1]
    endpardo a,i,a1,i1
    pardo a,i,b,j
	request RB2_ab[qsub,a,i,b,j]
	Taibj[a,i,b,j] = Tk[qsub]*RB2_ab[qsub,a,i,b,j]
	put DRNaibj[a,i,b,j] = Taibj[a,i,b,j]
    endpardo a,i,b,j
    server_barrier

    do ksub
    where ksub < qsub
server_barrier
#######################
# form (Ak+1,Gk) = Loverlap1
	Tk[ksub] = 1.0
        LoverlapS   = 0.0
	pardo a,i
	    get DLNai[a,i]
	    request RB1_a[ksub,a,i]
	    Tai[a,i]    = Tk[ksub]*RB1_a[ksub,a,i]
	    overlapT    = DLNai[a,i]*Tai[a,i]
	    overlapT   *= 2.0
	    LoverlapS  += overlapT
	endpardo a,i
	pardo a,i,a1,i1
	    get DLNaiai[a,i,a1,i1]
	    request RB2_aa[ksub,a,i,a1,i1]
	    Taiai[a,i,a1,i1] = Tk[ksub]*RB2_aa[ksub,a,i,a1,i1]
	    overlapT         = DLNaiai[a,i,a1,i1]*Taiai[a,i,a1,i1]
	    overlapT        *= 0.5
	    LoverlapS       += overlapT
	endpardo a,i,a1,i1
	pardo a,i,b,j
	    get DLNaibj[a,i,b,j]
	    request RB2_ab[ksub,a,i,b,j]
	    Taibj[a,i,b,j] = Tk[ksub]*RB2_ab[ksub,a,i,b,j]
	    overlapT       = DLNaibj[a,i,b,j]*Taibj[a,i,b,j]
	    LoverlapS     += overlapT
	endpardo a,i,b,j
#######################
# form (Ck,Fk+1)
	Tk[ksub] = 1.0
        RoverlapS   = 0.0
	pardo a,i
	    get DRNai[a,i]
	    request LB1_a[ksub,a,i]
	    Tai[a,i]    = Tk[ksub]*LB1_a[ksub,a,i]
	    overlapT    = DRNai[a,i]*Tai[a,i]
	    overlapT   *= 2.0
	    RoverlapS  += overlapT
	endpardo a,i
	pardo a,i,a1,i1
	    get DRNaiai[a,i,a1,i1]
	    request LB2_aa[ksub,a,i,a1,i1]
	    Taiai[a,i,a1,i1] = Tk[ksub]*LB2_aa[ksub,a,i,a1,i1]
	    overlapT         = DRNaiai[a,i,a1,i1]*Taiai[a,i,a1,i1]
	    overlapT        *= 0.5
	    RoverlapS       += overlapT
	endpardo a,i,a1,i1
	pardo a,i,b,j
	    get DRNaibj[a,i,b,j]
	    request LB2_ab[ksub,a,i,b,j]
	    Taibj[a,i,b,j] = Tk[ksub]*LB2_ab[ksub,a,i,b,j]
	    overlapT       = DRNaibj[a,i,b,j]*Taibj[a,i,b,j]
	    RoverlapS     += overlapT
	endpardo a,i,b,j
	server_barrier
	Loverlap1   = 0.0
	Roverlap1   = 0.0
	collective Loverlap1   += LoverlapS
	collective Roverlap1   += RoverlapS
#######################
# do in place sum Bk+1 -= Loverlap1 * Ck
	Tkk[qsub,ksub] = -1.0*Loverlap1
	pardo a,i
	    request LB1_a[ksub,a,i]
	    Tkai[qsub,a,i] = Tkk[qsub,ksub]*LB1_a[ksub,a,i]
	    prepare LB1_a[qsub,a,i] += Tkai[qsub,a,i]
	endpardo a,i
	pardo a,i,a1,i1
	    request LB2_aa[ksub,a,i,a1,i1]
	    Tkaiai[qsub,a,i,a1,i1] = Tkk[qsub,ksub]*LB2_aa[ksub,a,i,a1,i1]
	    prepare LB2_aa[qsub,a,i,a1,i1] += Tkaiai[qsub,a,i,a1,i1]
	endpardo a,i,a1,i1
	pardo a,i,b,j
	    request LB2_ab[ksub,a,i,b,j]
	    Tkaibj[qsub,a,i,b,j] = Tkk[qsub,ksub]*LB2_ab[ksub,a,i,b,j]
	    prepare LB2_ab[qsub,a,i,b,j] += Tkaibj[qsub,a,i,b,j]
	endpardo a,i,b,j
#######################
# do in place sum Gk+1 -= Roverlap1 * Gk
	Tkk[qsub,ksub] = -1.0*Roverlap1
	pardo a,i
	    request RB1_a[ksub,a,i]
	    Tkai[qsub,a,i] = Tkk[qsub,ksub]*RB1_a[ksub,a,i]
	    prepare RB1_a[qsub,a,i] += Tkai[qsub,a,i]
	endpardo a,i
	pardo a,i,a1,i1
	    request RB2_aa[ksub,a,i,a1,i1]
	    Tkaiai[qsub,a,i,a1,i1] = Tkk[qsub,ksub]*RB2_aa[ksub,a,i,a1,i1]
	    prepare RB2_aa[qsub,a,i,a1,i1] += Tkaiai[qsub,a,i,a1,i1]
	endpardo a,i,a1,i1
	pardo a,i,b,j
	    request RB2_ab[ksub,a,i,b,j]
	    Tkaibj[qsub,a,i,b,j] = Tkk[qsub,ksub]*RB2_ab[ksub,a,i,b,j]
	    prepare RB2_ab[qsub,a,i,b,j] += Tkaibj[qsub,a,i,b,j]
	endpardo a,i,b,j
    server_barrier
    enddo ksub
    server_barrier

#######################
# scale Ck+1 = 1/(Bk+1,Fk+1)
#######################
    normS   = 0.0
    Tk[qsub] = 1.0
    pardo a,i
	request RB1_a[qsub,a,i]
	request LB1_a[qsub,a,i]
	normT  = LB1_a[qsub,a,i]*RB1_a[qsub,a,i]
	normT *= 2.0
	normS += normT
    endpardo a,i
    pardo a,i,a1,i1
	request RB2_aa[qsub,a,i,a1,i1]
	request LB2_aa[qsub,a,i,a1,i1]
	normT  = LB2_aa[qsub,a,i,a1,i1]*RB2_aa[qsub,a,i,a1,i1]
	normT *= 0.5
	normS += normT
    endpardo a,i,a1,i1
    pardo a,i,b,j
	request RB2_ab[qsub,a,i,b,j]
	request LB2_ab[qsub,a,i,b,j]
	normT  = LB2_ab[qsub,a,i,b,j]*RB2_ab[qsub,a,i,b,j]
	normS += normT
    endpardo a,i,b,j
    server_barrier
    norm1   = 0.0
    collective norm1   += normS
    etemp = 1.0
    if norm1 < 0.0
	etemp = -1.0
    endif
    norm1 *= etemp
    norm2 = (norm1)**(-0.5)
#    if norm1 < (10.0)**(-12.0)
#	norm2 = 1.0
#    endif
#######################
    pardo a,i
        prepare RB1_a[qsub,a,i] *= norm2
    endpardo a,i
    pardo a,i,a1,i1
        prepare RB2_aa[qsub,a,i,a1,i1] *= norm2
    endpardo a,i,a1,i1
    pardo a,i,b,j
        prepare RB2_ab[qsub,a,i,b,j] *= norm2
    endpardo a,i,b,j
    server_barrier
#
    norm2 *= etemp
#
    pardo a,i
        prepare LB1_a[qsub,a,i] *= norm2
    endpardo a,i
    pardo a,i,a1,i1
        prepare LB2_aa[qsub,a,i,a1,i1] *= norm2
    endpardo a,i,a1,i1
    pardo a,i,b,j
        prepare LB2_ab[qsub,a,i,b,j] *= norm2
    endpardo a,i,b,j
    server_barrier
enddo qsub
server_barrier
#
ENDPROC all_GS

PROC update_vecs
#
server_barrier

server_barrier
call move_by_one_RK1
call move_by_one_LK1

call move_by_one_RK2aa
call move_by_one_LK2aa

call move_by_one_RK2ab
call move_by_one_LK2ab
server_barrier

call form_new_RK1
call form_new_LK1

call form_new_RK2aa
call form_new_LK2aa

call form_new_RK2ab
call form_new_LK2ab

call form_residual_R1
call form_residual_R2aa
call form_residual_R2ab

server_barrier
call update_RB1
call update_LB1

call update_RB2aa
call update_LB2aa

call update_RB2ab
call update_LB2ab

server_barrier
sum1 = 0.0
pardo a,i,kstate
    request cRk1_a[kstate,a,i]
    Tkai[kstate,a,i] = cRk1_a[kstate,a,i]
    etemp = Tkai[kstate,a,i] * cRk1_a[kstate,a,i]
    sum1 += etemp
endpardo a,i,kstate

pardo a,i,a1,i1,kstate
    request cRk2_aa[kstate,a,i,a1,i1]
    Tkaiai[kstate,a,i,a1,i1] = cRk2_aa[kstate,a,i,a1,i1]
    etemp = Tkaiai[kstate,a,i,a1,i1]*cRk2_aa[kstate,a,i,a1,i1]
    sum1 += etemp
endpardo a,i,a1,i1,kstate

pardo a,i,b,j,kstate
    request cRk2_ab[kstate,a,i,b,j]
    Tkaibj[kstate,a,i,b,j] = cRk2_ab[kstate,a,i,b,j]
    etemp = Tkaibj[kstate,a,i,b,j]*cRk2_ab[kstate,a,i,b,j]
    sum1 += etemp
endpardo a,i,b,j,kstate
server_barrier
sum2 = 0.0
collective sum2 += sum1
etemp3 = (scalar)eom_roots
rms_orb_conv = (sum2/etemp3)**(0.5)
server_barrier
assert_same rms_orb_conv
#
ENDPROC update_vecs

PROC form_guess

server_barrier

pardo a,i,ksub
    request RB1_a[ksub,a,i]
    Tkai[ksub,a,i]  = RB1_a[ksub,a,i]
    Tkai[ksub,a,i] *= 0.5
    prepare LB1_a[ksub,a,i] = Tkai[ksub,a,i]
endpardo a,i,ksub

pardo a,i,kstate
    request R1k1_a[kstate,a,i]
    Tkai[kstate,a,i]  = R1k1_a[kstate,a,i]
    Tkai[kstate,a,i] *= 0.5
    prepare L1k1_a[kstate,a,i] = Tkai[kstate,a,i]
endpardo a,i,kstate


pardo a,i,kstate
    prepare R0k1_a[kstate,a,i] = 0.0
endpardo a,i,kstate

pardo a,i,kstate
    prepare cRk1_a[kstate,a,i] = 0.0
endpardo a,i,kstate

pardo a,i,kstate
    prepare L0k1_a[kstate,a,i] = 0.0
endpardo a,i,kstate

pardo a,i,kstate
    prepare cLk1_a[kstate,a,i] = 0.0
endpardo a,i,kstate

pardo a,i,a1,i1,ksub
    prepare RB2_aa[ksub,a,i,a1,i1] = 0.0
endpardo a,i,a1,i1,ksub

pardo a,i,a1,i1,ksub
    prepare LB2_aa[ksub,a,i,a1,i1] = 0.0
endpardo a,i,a1,i1,ksub

pardo a,i,a1,i1,kstate
    prepare R0k2_aa[kstate,a,i,a1,i1] = 0.0
endpardo a,i,a1,i1,kstate

pardo a,i,a1,i1,kstate
    prepare R1k2_aa[kstate,a,i,a1,i1] = 0.0
endpardo a,i,a1,i1,kstate

pardo a,i,a1,i1,kstate
    prepare cRk2_aa[kstate,a,i,a1,i1] = 0.0
endpardo a,i,a1,i1,kstate

pardo a,i,a1,i1,kstate
    prepare L0k2_aa[kstate,a,i,a1,i1] = 0.0
endpardo a,i,a1,i1,kstate

pardo a,i,a1,i1,kstate
    prepare L1k2_aa[kstate,a,i,a1,i1] = 0.0
endpardo a,i,a1,i1,kstate

pardo a,i,a1,i1,kstate
    prepare cLk2_aa[kstate,a,i,a1,i1] = 0.0
endpardo a,i,a1,i1,kstate

pardo a,i,b,j,ksub
    prepare RB2_ab[ksub,a,i,b,j] = 0.0
endpardo a,i,b,j,ksub

pardo a,i,b,j,ksub
    prepare LB2_ab[ksub,a,i,b,j] = 0.0
endpardo a,i,b,j,ksub

pardo a,i,b,j,kstate
    prepare R0k2_ab[kstate,a,i,b,j] = 0.0
endpardo a,i,b,j,kstate

pardo a,i,b,j,kstate
    prepare R1k2_ab[kstate,a,i,b,j] = 0.0
endpardo a,i,b,j,kstate

pardo a,i,b,j,kstate
    prepare cRk2_ab[kstate,a,i,b,j] = 0.0
endpardo a,i,b,j,kstate

pardo a,i,b,j,kstate
    prepare L0k2_ab[kstate,a,i,b,j] = 0.0
endpardo a,i,b,j,kstate

pardo a,i,b,j,kstate
    prepare L1k2_ab[kstate,a,i,b,j] = 0.0
endpardo a,i,b,j,kstate

pardo a,i,b,j,kstate
    prepare cLk2_ab[kstate,a,i,b,j] = 0.0
endpardo a,i,b,j,kstate

server_barrier

ENDPROC form_guess
#
#---------------------------------------------------------------
#
proc norm_lr_vec
#
do ksub
#######################
    normS   = 0.0
    Tk[ksub] = 1.0
    pardo a,i
	request RB1_a[ksub,a,i]
	Tkai[ksub,a,i] = RB1_a[ksub,a,i]
	normT  = Tkai[ksub,a,i]*RB1_a[ksub,a,i]
	normT *= 2.0
	normS += normT
    endpardo a,i
    pardo a,i,a1,i1
	request RB2_aa[ksub,a,i,a1,i1]
	Tkaiai[ksub,a,i,a1,i1] = RB2_aa[ksub,a,i,a1,i1]
	normT  = Tkaiai[ksub,a,i,a1,i1]*RB2_aa[ksub,a,i,a1,i1]
	normT *= 0.5
	normS += normT
    endpardo a,i,a1,i1

    pardo a,i,b,j
	request RB2_ab[ksub,a,i,b,j]
	Tkaibj[ksub,a,i,b,j] = RB2_ab[ksub,a,i,b,j]
	normT  = Tkaibj[ksub,a,i,b,j]*RB2_ab[ksub,a,i,b,j]
	normS += normT
    endpardo a,i,b,j
    server_barrier
    norm1   = 0.0
    collective norm1   += normS
    norm2 = (norm1)**(-0.5)
#######################

    pardo a,i
        prepare RB1_a[ksub,a,i] *= norm2
    endpardo a,i
    pardo a,i,a1,i1
        prepare RB2_aa[ksub,a,i,a1,i1] *= norm2
    endpardo a,i,a1,i1
    pardo a,i,b,j
        prepare RB2_ab[ksub,a,i,b,j] *= norm2
    endpardo a,i,b,j

    norm2 = (norm1)**(0.5)

    pardo a,i
        prepare LB1_a[ksub,a,i] *= norm2
    endpardo a,i
    pardo a,i,a1,i1
        prepare LB2_aa[ksub,a,i,a1,i1] *= norm2
    endpardo a,i,a1,i1
    pardo a,i,b,j
        prepare LB2_ab[ksub,a,i,b,j] *= norm2
    endpardo a,i,b,j
enddo ksub
#
endproc norm_lr_vec
#
proc form_r0
#
do kstate
    sum1 = 0.0
    sum2 = 0.0
    sum3 = 0.0
    pardo a,i
        request RB1_a[kstate,a,i]
        Tk[kstate] = 1.0
        Tai[a,i] = Tk[kstate]*RB1_a[kstate,a,i]
        etemp  = LHBAR_ia[i,a]*Tai[a,i]
        etemp *= 2.0
        sum1  += etemp
    endpardo a,i
    pardo a,i,a1,i1
        request VSpipi[a,i,a1,i1]
        request RB2_aa[kstate,a,i,a1,i1]
        Tk[kstate] = 1.0
        Taiai[a,i,a1,i1] = Tk[kstate]*RB2_aa[kstate,a,i,a1,i1]
        etemp  = VSpipi[a,i,a1,i1]*Taiai[a,i,a1,i1]
        etemp *= 0.5
        sum2  += etemp
    endpardo a,i,a1,i1

    pardo a,i,b,j
        request Vpiqj[a,i,b,j]
        request RB2_ab[kstate,a,i,b,j]
        Tk[kstate] = 1.0
        Taibj[a,i,b,j] = Tk[kstate]*RB2_ab[kstate,a,i,b,j]
        etemp = Vpiqj[a,i,b,j]*Taibj[a,i,b,j]
        sum3 += etemp
    endpardo a,i,b,j
    server_barrier
    etemp1 = 0.0
    etemp2 = 0.0
    etemp3 = 0.0
    collective etemp1 += sum1
    collective etemp2 += sum2
    collective etemp3 += sum3

    etemp4  = etemp1
    etemp4 += etemp2
    etemp4 += etemp3

    omega = SEk0[kstate]
    etemp = (etemp4/omega)
    normT = 1.0
    normT += etemp**2.0
    normS = 1.0/(normT)**0.5
    r0 = etemp*normS
    SR0[kstate] = r0
enddo kstate
#
endproc form_r0
#
#-------------------------------------------------------------------------
#
PROC  COMPUTE_DENSITY
#
pardo  a, a1

    taa[a,a1] = 0.0 

    do i
	GET           L1A [i,a1]
	taa1 [a,a1] = St1a [a,i] * L1A [i,a1]
	taa[a,a1]  += taa1[a,a1] 
    enddo i

    taa [a,a1]           *= R0
    PUT  DENS_VV_A [a,a1] = taa [a,a1]
#
#
#          ...Initialize intermediates...
#
#
    taa [a,a1]            = 0.0
    PUT  T2L2_VV_A [a,a1] = taa [a,a1]
    PUT  R2L2_VV_A [a,a1] = taa [a,a1]

endpardo  a, a1
#
pardo  b, b1

    tbb[b,b1] = 0.0 

    do j
	GET           L1B [j,b1]
	tbb1 [b,b1] = St1a [b,j] * L1B [j,b1]
	tbb[b,b1]  += tbb1[b,b1] 
    enddo j

    tbb [b,b1]           *= R0
    PUT  DENS_VV_B [b,b1] = tbb [b,b1]
#
#
#          ...Initialize the intermediates...
#
#
    tbb [b,b1]            = 0.0
    PUT  T2L2_VV_B [b,b1] = tbb [b,b1]
    PUT  R2L2_VV_B [b,b1] = tbb [b,b1]

endpardo  b, b1

pardo  i, a

    GET  L1A [i,a]

    tia  [i,a]  = L1A [i,a]
    tia  [i,a] *= R0
    tia2 [i,a]  = 0.0

    PUT  DENS_OV_A     [i,a] = tia [i,a]
    PUT  DENS_INT_OV_A [i,a] = tia2 [i,a]

endpardo  i, a

pardo  j, b

    GET  L1B [j,b] 

    tjb  [j,b]  = L1B [j,b]
    tjb  [j,b] *= R0 
    tjb2 [j,b]  = 0.0

    PUT  DENS_OV_B     [j,b] = tjb  [j,b]
    PUT  DENS_INT_OV_B [j,b] = tjb2 [j,b]

endpardo  j, b

pardo  i, i1
#
    tii[i,i1] = 0.0 

    do a

	GET  L1A [i1,a]

	tii1 [i,i1]  = St1a [a,i] * L1A [i1,a]
	tii1 [i,i1] *= -1.0
	tii[i,i1] += tii1[i,i1] 

    enddo a

    PUT  T1L1_OO_A [i,i1] = tii [i,i1]

    tii [i,i1] *= R0
    PUT  DENS_OO_A [i,i1] = tii [i,i1]

    tii [i,i1] = 0.0
#
#
#          ...Initialize intermediates...
#
#
    PUT  T2L2_OO_A [i,i1] = tii [i,i1]
    PUT  R2L2_OO_A [i,i1] = tii [i,i1]

endpardo  i, i1

#VFL 
pardo  j, j1
#
    tjj[j,j1] = 0.0 

    do b

	GET  T1B [b,j]
	GET  L1B [j1,b]

	tjj1 [j,j1]  = T1B [b,j] * L1B [j1,b]
	tjj1 [j,j1] *= -1.0
	tjj[j,j1] += tjj1[j,j1] 

    enddo b

    PUT  T1L1_OO_B [j,j1] = tjj [j,j1]

    tjj [j,j1] *= R0
    PUT  DENS_OO_B [j,j1] = tjj [j,j1]
#
#
#          ...Initialize the intermediates...
#
#
    tjj [j,j1] = 0.0
    PUT  T2L2_OO_B [j,j1] = tjj [j,j1]
    PUT  R2L2_OO_B [j,j1] = tjj [j,j1]

endpardo  j, j1
#
server_barrier
#     
#                          -------------------
#                          -                 -
#                          -  ALPHA DENSITY  -
#                          -                 -
#                          -------------------
#
#
#    ===========================================================
#       COMPUTE  OCCUPIED - OCCUPIED  PIECE  TO  THE  DENSITY
#    ===========================================================
#    ALPHA                                                 ALPHA
#    -----                                                 -----
#
#
#
#          ...L  * T  ...
#              2    2
#
#
pardo i, a, a1, i2

    REQUEST            T2AA [a,i,a1,i2] 
    tpppp[a,i2,a1,i] = T2AA [a,i,a1,i2]  

    do i1

	REQUEST  L2AA [i1,a,i2,a1] 

	tii1 [i1,i] = L2AA [i1,a,i2,a1] * tpppp [a,i2,a1,i]
	tii [i,i1]  = tii1[i1,i] 
	tii [i,i1] *= -0.5
	PUT  T2L2_OO_A [i,i1] += tii [i,i1]

	tii [i,i1] *= R0
	PUT  DENS_OO_A [i,i1] += tii [i,i1]

    enddo i1

endpardo i, a, a1, i2
#
#
#         ...ALPHA-BETA summation...
#
#
pardo i, a, b, j

    REQUEST          T2AB [a,i,b,j] 
    tpppp[a,j,b,i] = T2AB[a,i,b,j] 

    do i1

	REQUEST       L2AB [i1,a,j,b] 

	tii1[i1,i]  = L2AB [i1,a,j,b] * tpppp [a,j,b,i]
	tii [i,i1]  = tii1[i1,i] 
	tii [i,i1] *= -1.0
	PUT  T2L2_OO_A [i,i1] += tii [i,i1]

	tii [i,i1] *= R0
	PUT  DENS_OO_A   [i,i1] += tii [i,i1]

    enddo i1

endpardo  i, a, b, j
#
#
#           ...The other piece to the right moment density...
#
#                 R1 * A1  +  R2 * A2  +  T1 * R1 * A2
#
if  LOGRIGHT == ONE

    pardo  i, i1, a

	GET  R1A [a,i]
	GET  L1A [i1,a]

	tii  [i,i1]  = R1A [a,i] * L1A [i1,a]
	tii  [i,i1] *= -1.0

	PUT  DENS_OO_A [i,i1] += tii  [i,i1]
	PUT  R2L2_OO_A [i,i1] += tii  [i,i1]

    endpardo  i, i1, a 
#
#
#
    pardo  a, a1, i2

	ALLOCATE  laiai4 [a,i2,a1,*]
	ALLOCATE  laiai5 [a,i2,a1,*]

	do i

	    REQUEST               R2AA [a,i,a1,i2] 
	    laiai5 [a,i2,a1,i]  = R2AA [a,i,a1,i2]
	    laiai5 [a,i2,a1,i] *= 0.5

	    GET  R1A [a1,i2]
	    laiai4 [a,i2,a1,i]  = laiai5 [a,i2,a1,i]
	    taiai  [a,i2,a1,i]  = St1a [a,i] ^ R1A [a1,i2]
	    laiai4 [a,i2,a1,i] += taiai [a,i2,a1,i]

	enddo i

	do i1

	    REQUEST  L2AA [i1,a,i2,a1] 

	    do i

		tii1[i1,i]  = L2AA [i1,a,i2,a1] * laiai4 [a,i2,a1,i]
		tii [i,i1]  = tii1[i1,i]  
		tii [i,i1] *= -1.0
		PUT  DENS_OO_A [i,i1] += tii [i,i1]

		tii1[i1,i]  = L2AA [i1,a,i2,a1] * laiai5 [a,i2,a1,i]
		tii [i,i1]  = tii1[i1,i]  
		tii [i,i1] *= -1.0
		PUT  R2L2_OO_A [i,i1] += tii [i,i1]

	    enddo i

	enddo i1

	DEALLOCATE  laiai4 [a,i2,a1,*]
	DEALLOCATE  laiai5 [a,i2,a1,*]

    endpardo  a, a1, i2
#
#
#          ...ALPHA-BETA summation...
#
#
    pardo  a, b, j

	ALLOCATE  laibj4 [a,j,b,*]
	ALLOCATE  laibj5 [a,j,b,*]

	do i

	    REQUEST            R2AB [a,i,b,j] 
	    GET                R1B [b,j]
	    laibj5 [a,j,b,i] = R2AB[a,i,b,j]

	    laibj4 [a,j,b,i]  = laibj5 [a,j,b,i]
	    taibj  [a,j,b,i]  = St1a [a,i] ^ R1B [b,j]
	    laibj4 [a,j,b,i] += taibj [a,j,b,i]

	enddo i

	do i1

	    REQUEST  L2AB [i1,a,j,b] 

	    do i

		tii1[i1,i]  = L2AB [i1,a,j,b] * laibj4 [a,j,b,i]
		tii [i,i1]  = tii1[i1,i]  
		tii [i,i1] *= -1.0
		PUT  DENS_OO_A [i,i1] += tii [i,i1]

		tii1[i1,i]  = L2AB [i1,a,j,b] * laibj5 [a,j,b,i]
		tii [i,i1]  = tii1[i1,i]  
		tii [i,i1] *= -1.0
		PUT  R2L2_OO_A [i,i1] += tii [i,i1]

	    enddo i

	enddo i1

	DEALLOCATE  laibj5 [a,j,b,*]
	DEALLOCATE  laibj4 [a,j,b,*]

    endpardo  a, b, j

endif  # LOGRIGHT == ONE #
#
#
#
#    ===========================================================
#       COMPUTE  VIRTUAL - VIRTUAL  PIECE  TO  THE  DENSITY
#    ===========================================================
#    ALPHA                                                 ALPHA
#    -----                                                 -----
#
#
#
#
#    ...The following is the T1 * L1 piece...
#
#
#          ...This is the T2 * A2 piece
#
#
pardo  a2, a1, i, i1

    REQUEST             L2AA [i,a2,i1,a1] 
    tpppp[i,a1,i1,a2] = L2AA [i,a2,i1,a1] 

    do a

	REQUEST       T2AA [a,i,a1,i1] 

	taa [a,a2]  = T2AA [a,i,a1,i1] * tpppp[i,a1,i1,a2]  
	taa [a,a2] *= -0.50
	PUT  T2L2_VV_A [a,a2] += taa [a,a2]

	taa [a,a2] *= R0
	taa [a,a2] *= -1.0
	PUT  DENS_VV_A [a,a2] += taa [a,a2]

    enddo a

endpardo  a2, a1, i, i1
#
#
#          ...ALPHA-BETA summation...
#
#
pardo  a2, b, j, i

    REQUEST           L2AB [i,a2,j,b] 
    tpppp[i,b,j,a2] = L2AB [i,a2,j,b] 

    do a

	REQUEST  T2AB [a,i,b,j] 

	taa [a,a2]  = T2AB [a,i,b,j] * tpppp[i,b,j,a2] 
	taa [a,a2] *= -1.0
	PUT  T2L2_VV_A [a,a2] += taa [a,a2]

	taa [a,a2] *= R0
	taa [a,a2] *= -1.0
	PUT  DENS_VV_A [a,a2] += taa [a,a2]

    enddo a

endpardo  a2, b, j, i
#
#
#           ...The other piece to the right moment density...
#
#                 R1 * A1  +  R2 * A2  +  T1 * R1 * A2
#
if  LOGRIGHT == ONE

pardo  a, a1, i 

    GET  R1A [a,i]
    GET  L1A [i,a1]

    taa [a,a1]  = R1A [a,i] * L1A [i,a1]
    PUT  DENS_VV_A [a,a1] += taa [a,a1]

    taa [a,a1] *= -1.0
    PUT  R2L2_VV_A [a,a1] += taa [a,a1]

endpardo  a, a1, i 
#
pardo  a1, i, i1

    ALLOCATE  laiai  [*,i,a1,i1]
    ALLOCATE  laiai2 [*,i,a1,i1]

    GET  R1A [a1,i1]

    do a

	REQUEST               R2AA [a,i,a1,i1] 

	taiai  [a,i,a1,i1]  = St1a [a,i] ^ R1A [a1,i1]
	laiai  [a,i,a1,i1]  = R2AA [a,i,a1,i1]
	laiai  [a,i,a1,i1] *= 0.5
	laiai2 [a,i,a1,i1]  = laiai [a,i,a1,i1]
	laiai  [a,i,a1,i1] += taiai [a,i,a1,i1]

    enddo a

    do a2

	REQUEST              L2AA [i,a2,i1,a1] 
	tpppp[i,a1,i1,a2] =  L2AA [i,a2,i1,a1] 

	do a

	    taa  [a,a2] = laiai  [a,i,a1,i1] * tpppp[i,a1,i1,a2]  
	    PUT  DENS_VV_A [a,a2] += taa  [a,a2]

	enddo a

	do a

	    taa2 [a,a2]  = laiai2 [a,i,a1,i1] * tpppp[i,a1,i1,a2]
	    taa2 [a,a2] *= -1.0
	    PUT  R2L2_VV_A [a,a2] += taa2 [a,a2]

	enddo a

    enddo a2

    DEALLOCATE  laiai  [*,i,a1,i1]
    DEALLOCATE  laiai2 [*,i,a1,i1]

endpardo  a1, i, i1
#
#
#          ...ALPHA-BETA summation...
#
#
pardo  b, j, i

    ALLOCATE  laibj  [*,i,b,j]
    ALLOCATE  laibj2 [*,i,b,j]

    GET  R1B [b,j]

    do a

	REQUEST            R2AB [a,i,b,j] 
	laibj2 [a,i,b,j] = R2AB [a,i,b,j]

	laibj [a,i,b,j]  = laibj2 [a,i,b,j]
	taibj [a,i,b,j]  = St1a [a,i] ^ R1B [b,j]
	laibj [a,i,b,j] += taibj [a,i,b,j]

    enddo a

    do a2

	REQUEST            L2AB [i,a2,j,b] 
	tpppp[i,b,j,a2] =  L2AB [i,a2,j,b] 

	do a

	    taa  [a,a2] = laibj  [a,i,b,j] * tpppp[i,b,j,a2] 
	    PUT  DENS_VV_A [a,a2] += taa  [a,a2]

	    taa2 [a,a2]  = laibj2 [a,i,b,j] * tpppp[i,b,j,a2] 
	    taa2 [a,a2] *= -1.0
	    PUT  R2L2_VV_A [a,a2] += taa2 [a,a2]

	enddo a

    enddo a2

    DEALLOCATE  laibj  [*,i,b,j]
    DEALLOCATE  laibj2 [*,i,b,j]

endpardo  b, j, i

endif  # LOGRIGHT == ONE #
#
#
#
#          ------------------------------------------------
#                          !!! IMPORTANT !!!
#          ------------------------------------------------
#
#           The following Occupied - Virtual code computes
#           both the alpha and beta pieces since one needs
#           both to compute the Virtual - Occupied piece.
#
#          ------------------------------------------------
#          ------------------------------------------------
#
#
#    ===========================================================
#       COMPUTE  OCCUPIED - VIRTUAL  PIECE  TO  THE  DENSITY
#    ===========================================================
#    ALPHA                                                 ALPHA
#    -----                                                 -----
#
#
#
#
#
if  LOGRIGHT == ONE

pardo  i, a, a1, i1

    REQUEST                     L2AA [i,a,i1,a1] 
    GET                         R1A  [a1,i1]
    tia [i,a]                 = L2AA [i,a,i1,a1] * R1A [a1,i1]
    PUT  DENS_OV_A     [i,a] += tia [i,a]
    PUT  DENS_INT_OV_A [i,a] += tia [i,a]

endpardo  i, a, a1, i1

pardo  i, a, b, j

    REQUEST                     L2AB [i,a,j,b] 
    GET                         R1B  [b,j]
    tia [i,a]                 = L2AB [i,a,j,b] * R1B [b,j]
    PUT  DENS_OV_A     [i,a] += tia [i,a]
    PUT  DENS_INT_OV_A [i,a] += tia [i,a]

endpardo i, a, b, j

endif  # LOGRIGHT == ONE #
#
#
#
#    ===========================================================
#       COMPUTE  OCCUPIED - VIRTUAL  PIECE  TO  THE  DENSITY
#    ===========================================================
#    BETA                                                   BETA
#    ----                                                   ----
#

if  LOGRIGHT == ONE

pardo  j, b

    tjb[j,b] = 0.0 

    do b1
    do j1

	REQUEST                     L2BB [j,b,j1,b1] 
	GET                         R1B [b1,j1]
	tjb1 [j,b]                = L2BB [j,b,j1,b1] * R1B [b1,j1]
	tjb[j,b]                 += tjb1[j,b] 

    enddo j1
    enddo b1

    PUT  DENS_OV_B     [j,b] += tjb [j,b]
    PUT  DENS_INT_OV_B [j,b] += tjb [j,b]

endpardo  j, b

pardo  j, b

    tjb[j,b] = 0.0 

    do a
    do i

	REQUEST      L2AB [i,a,j,b] 
	GET          R1A [a,i]
	tjb1 [j,b] = L2AB [i,a,j,b] * R1A [a,i]
	tjb[j,b]  += tjb1[j,b] 

    enddo i
    enddo a

    PUT  DENS_OV_B     [j,b] += tjb [j,b]
    PUT  DENS_INT_OV_B [j,b] += tjb [j,b]

endpardo  j, b

endif  # LOGRIGHT == ONE #

server_barrier
#
#
#
#    ===========================================================
#       COMPUTE  VIRTUAL - OCCUPIED  PIECE  TO  THE  DENSITY
#    ===========================================================
#    ALPHA                                                 ALPHA
#    -----                                                 -----
#
#
#          ...Evaluate the R0 contribution...
#
#
# VFL 
pardo  a, i

    tai1[a,i] = 0.0 

    do i1 

	GET  T1L1_OO_A [i,i1]
	GET  T2L2_OO_A [i,i1]

	tii [i,i1]  = T1L1_OO_A [i,i1]
	tii [i,i1] += T2L2_OO_A [i,i1]

	tai [a,i]   = St1a [a,i1] * tii [i,i1]

	tai1[a,i] += tai[a,i] 

    enddo i1 

    if GROUNDSTATE == ONE
	tai1 [a,i]  += St1a [a,i]
    endif

    tai1 [a,i]  *= R0
    PUT  DENS_VO_A [a,i] = tai1 [a,i]

endpardo  a, i 

server_barrier
#
#
pardo  a, a1, i

    GET                     T2L2_VV_A [a,a1]
    tai [a,i]             = T2L2_VV_A [a,a1] * St1a [a1,i]
    tai [a,i]            *= R0
    PUT  DENS_VO_A [a,i] += tai [a,i]

endpardo  a, a1, i
#
#
pardo  a1, i1

    GET  L1A [i1,a1]

    do a
    do i
	REQUEST                 T2AA [a,i,a1,i1] 
	tai  [a,i]            = T2AA [a,i,a1,i1] * L1A [i1,a1]
	tai  [a,i]           *= R0
	PUT  DENS_VO_A [a,i] += tai [a,i]
    enddo i
    enddo a

endpardo  a1, i1

pardo  b, j

    GET  L1B [j,b]

    do a
    do i
	REQUEST                 T2AB [a,i,b,j] 
	tai  [a,i]            = T2AB [a,i,b,j] * L1B [j,b]
	tai  [a,i]           *= R0
	PUT  DENS_VO_A [a,i] += tai [a,i]
    enddo i
    enddo a

endpardo  b, j
#
#
if LOGRIGHT == ONE

pardo  a1, i1

    GET  DENS_INT_OV_A [i1,a1]
    tia [i1,a1] = DENS_INT_OV_A [i1,a1]

    do a
    do i
	REQUEST  T2AA [a,i,a1,i1] 
	tai [a,i] = T2AA [a,i,a1,i1] * tia [i1,a1]
	PUT  DENS_VO_A [a,i] += tai [a,i]
    enddo i
    enddo a

endpardo  a1, i1

pardo  b, j

    GET  DENS_INT_OV_B [j,b]
    tjb [j,b] = DENS_INT_OV_B [j,b]

    do a
    do i
	REQUEST  T2AB [a,i,b,j] 
	tai [a,i]    = T2AB [a,i,b,j] * tjb [j,b]
	PUT  DENS_VO_A [a,i] += tai [a,i]
    enddo i
    enddo a

endpardo  b, j
#
pardo  i, i1

    tii[i,i1] = 0.0 
    do a1  
	GET           DENS_INT_OV_A [i1,a1]
	tia [i1,a1] = DENS_INT_OV_A [i1,a1]
	tii1 [i,i1] = St1a [a1,i] * tia [i1,a1]
	tii[i,i1] += tii1[i,i1] 
    enddo a1  

    do a
	tai [a,i]             = St1a [a,i1] * tii [i,i1]
	tai [a,i]            *= -1.0
	PUT  DENS_VO_A [a,i] += tai [a,i]
    enddo a

endpardo  i, i1
#
pardo  a1, i1

    GET  L1A [i1,a1]

    do a
    do i
	REQUEST                 R2AA [a,i,a1,i1] 
	tai [a,i]             = R2AA [a,i,a1,i1] * L1A [i1,a1]
	PUT  DENS_VO_A [a,i] += tai [a,i]
    enddo i
    enddo a

endpardo  a1, i1

pardo  b, j

    GET  L1B [j,b]

    do a
    do i
	REQUEST                 R2AB [a,i,b,j] 
	tai [a,i]             = R2AB [a,i,b,j] * L1B [j,b]
	PUT  DENS_VO_A [a,i] += tai [a,i]
    enddo i
    enddo a

endpardo  b, j
# 
pardo  i, a, a1 

    GET  R2L2_VV_A [a,a1]
    GET  T2L2_VV_A [a,a1]
    GET  R1A [a1,i]
    tai  [a,i]  = R2L2_VV_A [a,a1] * St1a [a1,i]
    tai2 [a,i]  = T2L2_VV_A [a,a1] * R1A [a1,i]
    tai  [a,i] += tai2 [a,i]
    PUT  DENS_VO_A [a,i] += tai [a,i]

endpardo i, a, a1  
#
pardo i, a, i1  

    GET  R1A [a,i1]
    GET  R2L2_OO_A [i,i1]
    GET  T2L2_OO_A [i,i1]
    tai  [a,i]  = St1a [a,i1] * R2L2_OO_A [i,i1]
    tai2 [a,i]  = R1A [a,i1] * T2L2_OO_A [i,i1]
    tai  [a,i] += tai2 [a,i]
    PUT  DENS_VO_A [a,i] += tai [a,i]

endpardo  i, a, i1  
#
if EXCITESTATE == ZERO
    pardo  a, i
	GET  R1A [a,i]
	tai [a,i] = R1A [a,i]
	PUT  DENS_VO_A [a,i] += tai [a,i]
    endpardo  a, i
endif

if EXCITESTATE == ONE
    pardo  a, i
	tai [a,i] = St1a [a,i]
	PUT  DENS_VO_A [a,i] += tai [a,i]
    endpardo  a, i
endif


endif  # LOGRIGHT = ONE #

server_barrier
#
#
#     
#                          ------------------
#                          -                -
#                          -  BETA DENSITY  -
#                          -                -
#                          ------------------
#     
#
#
#
#    ===========================================================
#       COMPUTE  OCCUPIED - OCCUPIED  PIECE  TO  THE  DENSITY
#    ===========================================================
#    BETA                                                   BETA
#    ----                                                   ----
#
#
#
#
#
pardo  j, b, b1, j2

    REQUEST            T2BB [b,j,b1,j2] 
    tpppp[b,j2,b1,j] = T2BB [b,j,b1,j2] 

    do j1

	REQUEST  L2BB [j1,b,j2,b1] 

	tjj1[j1,j]  = L2BB [j1,b,j2,b1] * tpppp [b,j2,b1,j]
	tjj [j,j1]  = tjj1[j1,j]  
	tjj [j,j1] *= -0.5
	PUT  T2L2_OO_B [j,j1] += tjj [j,j1]

	tjj [j,j1] *= R0
	PUT  DENS_OO_B [j,j1] += tjj [j,j1]

    enddo j1

endpardo  j, b, b1, j2
#
#
#          ...ALPHA-BETA summation...
#
#
pardo  j1, a, b, i

    REQUEST  L2AB [i,a,j1,b] 
    tpppp[j1,a,i,b] = L2AB [i,a,j1,b] 

    do j

	REQUEST  T2AB [a,i,b,j] 

	tjj1[j1,j]  = tpppp [j1,a,i,b] * T2AB [a,i,b,j]
	tjj [j,j1]  = tjj1[j1,j]  
	tjj [j,j1] *= -1.0
	PUT  T2L2_OO_B [j,j1] += tjj [j,j1]

	tjj [j,j1] *= R0
	PUT  DENS_OO_B [j,j1] += tjj [j,j1]

    enddo j

endpardo  j1, a, b, i
#
#
#           ...The other piece to the right moment density...
#
#                 R1 * A1  +  R2 * A2  +  T1 * R1 * A2
#
if  LOGRIGHT == ONE

    pardo  j, j1

	tjj [j,j1] = 0.0

	do b

	    GET  R1B [b,j]
	    GET  L1B [j1,b]

	    tjj1 [j,j1]  = R1B [b,j] * L1B [j1,b]
	    tjj [j,j1] += tjj1[j,j1] 

	enddo b

	tjj [j,j1] *= -1.0
	PUT  DENS_OO_B [j,j1] += tjj [j,j1]
	PUT  R2L2_OO_B [j,j1] += tjj [j,j1]

    endpardo  j, j1
#
    pardo  b, b1, j2

	ALLOCATE  lbjbj4 [b,j2,b1,*]
	ALLOCATE  lbjbj5 [b,j2,b1,*]

	do j

	    REQUEST               R2AA [b,j,b1,j2] 
	    lbjbj5 [b,j2,b1,j]  = R2AA [b,j,b1,j2]
	    lbjbj5 [b,j2,b1,j] *= 0.5

	    GET  T1B [b,j]
	    GET  R1B [b1,j2]
	    lbjbj4 [b,j2,b1,j]  = lbjbj5 [b,j2,b1,j]
	    tbjbj  [b,j2,b1,j]  = T1B [b,j] ^ R1B [b1,j2]
	    lbjbj4 [b,j2,b1,j] += tbjbj [b,j2,b1,j]

	enddo j

	do j1

	    REQUEST  L2BB [j1,b,j2,b1] 

	    do j

		tjj1[j1,j]  = L2BB [j1,b,j2,b1] * lbjbj4 [b,j2,b1,j]
		tjj [j,j1]  = tjj1[j1,j]  
		tjj [j,j1] *= -1.0
		PUT  DENS_OO_B [j,j1] += tjj [j,j1]

		tjj1[j1,j] = L2BB [j1,b,j2,b1] * lbjbj5 [b,j2,b1,j]
		tjj [j,j1]  = tjj1[j1,j]  
		tjj [j,j1] *= -1.0
		PUT  R2L2_OO_B [j,j1] += tjj [j,j1]

	    enddo j

	enddo j1

	DEALLOCATE  lbjbj4 [b,j2,b1,*]
	DEALLOCATE  lbjbj5 [b,j2,b1,*]

    endpardo  b, b1, j2
#
#
#          ...ALPHA-BETA summation...
#
#
    pardo  a, b, i

	ALLOCATE  laibj2 [a,i,b,*]
	ALLOCATE  laibj3 [a,i,b,*]

	do j

	    REQUEST            R2AB [a,i,b,j] 
	    laibj3 [a,i,b,j] = R2AB[a,i,b,j]

	    GET  T1B [b,j]  
	    GET  R1A [a,i]
	    laibj2 [a,i,b,j]  = laibj3 [a,i,b,j]
	    taibj  [a,i,b,j]  = T1B [b,j] ^ R1A [a,i]
	    laibj2 [a,i,b,j] += taibj [a,i,b,j]

	enddo j

	do j1

	    REQUEST            L2AB [i,a,j1,b] 
	    tpppp[j1,a,i,b] =  L2AB [i,a,j1,b] 

	    do j

		tjj1[j1,j]  = tpppp[j1,a,i,b] * laibj2 [a,i,b,j]
		tjj [j,j1]  = tjj1[j1,j] 
		tjj [j,j1] *= -1.0
		PUT  DENS_OO_B [j,j1] += tjj [j,j1]

		tjj1[j1,j]  = tpppp[j1,a,i,b]  * laibj3 [a,i,b,j]
		tjj [j,j1]  = tjj1[j1,j] 
		tjj [j,j1] *= -1.0
		PUT  R2L2_OO_B [j,j1] += tjj [j,j1]

	    enddo j

	enddo j1

	DEALLOCATE  laibj3 [a,i,b,*]
	DEALLOCATE  laibj2 [a,i,b,*]

    endpardo  a, b, i

endif  # LOGRIGHT == ONE #
#
#
#
#    ===========================================================
#       COMPUTE  VIRTUAL - VIRTUAL  PIECE  TO  THE  DENSITY
#    ===========================================================
#    BETA                                                   BETA
#    ----                                                   ----
#
#
#
pardo  b1, b2, j, j1

    REQUEST             L2BB [j,b1,j1,b2] 
    tpppp[j,b2,j1,b1] = L2BB [j,b1,j1,b2] 

    do b

	REQUEST       T2BB [b,j,b2,j1] 

	tbb [b,b1]  = T2BB [b,j,b2,j1] * tpppp[j,b2,j1,b1] 
	tbb [b,b1] *= -0.50
	PUT  T2L2_VV_B [b,b1] += tbb [b,b1]

	tbb [b,b1] *= R0
	tbb [b,b1] *= -1.0
	PUT  DENS_VV_B [b,b1] += tbb [b,b1]

    enddo b

endpardo b1, b2, j, j1
#
#
#          ...ALPHA-BETA summation...
#
#
pardo  b, a, j, i

    REQUEST  T2AB [b,j,a,i] 
    tpppp[b,i,a,j] = T2AB[b,j,a,i] 

    do b1

	REQUEST  L2AB [i,a,j,b1] 

	tbb [b,b1]  = tpppp[b,i,a,j] * L2AB [i,a,j,b1] 
	tbb [b,b1] *= -1.0
	PUT  T2L2_VV_B [b,b1] += tbb [b,b1]

	tbb [b,b1] *= R0
	tbb [b,b1] *= -1.0
	PUT  DENS_VV_B [b,b1] += tbb [b,b1]

    enddo b1

endpardo  b, a, j, i
#
#
#           ...The other piece to the right moment density...
#
#                 R1 * A1  +  R2 * A2  +  T1 * R1 * A2
#
if  LOGRIGHT == ONE

    pardo  b, b1

	tbb [b,b1] = 0.0

	do j

	    GET  R1B [b,j]
	    GET  L1B [j,b1]

	    tbb1 [b,b1]  = R1B [b,j] * L1B [j,b1]
	    tbb[b,b1]   += tbb1[b,b1] 

	enddo j

	PUT  DENS_VV_B [b,b1] += tbb [b,b1]

	tbb [b,b1] *= -1.0
	PUT  R2L2_VV_B [b,b1] += tbb [b,b1]

    endpardo  b, b1
#
#
    pardo  b1, j, j1

	ALLOCATE  lbjbj  [*,j,b1,j1]
	ALLOCATE  lbjbj2 [*,j,b1,j1]

	GET  R1B [b1,j1]

	do b

	    REQUEST               R2AA [b,j,b1,j1] 
	    GET                   T1B [b,j]

	    tbjbj  [b,j,b1,j1]  = T1B [b,j] ^ R1B [b1,j1]
	    lbjbj  [b,j,b1,j1]  = R2AA [b,j,b1,j1]
	    lbjbj  [b,j,b1,j1] *= 0.5
	    lbjbj2 [b,j,b1,j1]  = lbjbj [b,j,b1,j1]
	    lbjbj  [b,j,b1,j1] += tbjbj [b,j,b1,j1]

	enddo b

	do b2

	    REQUEST             L2BB [j,b2,j1,b1] 
	    tpppp[j,b1,j1,b2] = L2BB [j,b2,j1,b1] 

	    do b

		tbb  [b,b2] = lbjbj  [b,j,b1,j1] * tpppp[j,b1,j1,b2]  
		PUT  DENS_VV_B [b,b2] += tbb [b,b2]

	    enddo b

	    do b

		tbb2 [b,b2]  = lbjbj2 [b,j,b1,j1] * tpppp[j,b1,j1,b2]
		tbb2 [b,b2] *= -1.0
		PUT  R2L2_VV_B [b,b2] += tbb2 [b,b2]

	    enddo b

	enddo b2

	DEALLOCATE  lbjbj  [*,j,b1,j1]
	DEALLOCATE  lbjbj2 [*,j,b1,j1]

    endpardo  b1, j, j1
#
#
#          ...ALPHA-BETA summation...
#
#
    pardo  a, j, i

	ALLOCATE  lbiaj  [*,i,a,j]
	ALLOCATE  lbiaj2 [*,i,a,j]

	GET  R1A [a,i]

	do b

	    REQUEST            R2AB [a,i,b,j] 
	    GET                T1B [b,j]
	    lbiaj2 [b,i,a,j] = R2AB [a,i,b,j]

	    lbiaj [b,i,a,j]  = R2AB [a,i,b,j]
	    taibj [b,i,a,j]  = R1A [a,i] ^ T1B [b,j]
	    lbiaj [b,i,a,j] += taibj [b,i,a,j]

	enddo b

	do b2

	    REQUEST  L2AB [i,a,j,b2] 

	    do b

		tbb  [b,b2] = lbiaj [b,i,a,j] * L2AB [i,a,j,b2] 
		PUT  DENS_VV_B [b,b2] += tbb  [b,b2]

		tbb2 [b,b2]  = lbiaj2 [b,i,a,j] * L2AB [i,a,j,b2]
		tbb2 [b,b2] *= -1.0
		PUT  R2L2_VV_B [b,b2] += tbb2 [b,b2]

	    enddo b

	enddo b2

	DEALLOCATE  lbiaj  [*,i,a,j]
	DEALLOCATE  lbiaj2 [*,i,a,j]

    endpardo  a, j, i

endif  # LOGRIGHT = ONE #

server_barrier
#
#
#    ===========================================================
#       COMPUTE  OCCUPIED - VIRTUAL  PIECE  TO  THE  DENSITY
#    ===========================================================
#    BETA                                                   BETA
#    ----                                                   ----
#
#                Remember, this was already computed
#                during the alpha part above.
#    -----------------------------------------------------------
#
#
#
#    ===========================================================
#       COMPUTE  VIRTUAL - OCCUPIED  PIECE  TO  THE  DENSITY
#    ===========================================================
#    BETA                                                   BETA
#    ----                                                   ----
#
#
#          ...Evaluate the R0 contribution...
#
#
pardo  b, j 

    tbj2[b,j] = 0.0 

    do j1 

	GET  T1B [b,j1]
	GET  T1L1_OO_B [j,j1]
	GET  T2L2_OO_B [j,j1]

	tjj [j,j1]  = T1L1_OO_B [j,j1]
	tjj [j,j1] += T2L2_OO_B [j,j1]

	tbj [b,j]   = T1B [b,j1] * tjj [j,j1]

	tbj2[b,j] += tbj[b,j] 

    enddo j1 

    if GROUNDSTATE == ONE
	GET  T1B [b,j]
	tbj2 [b,j]  += T1B [b,j]
    endif

    tbj2 [b,j]  *= R0

    PUT  DENS_VO_B [b,j] = tbj2[b,j]

endpardo  b, j 

server_barrier
#
pardo  b, b1, j

    GET  T1B [b1,j]
    GET  T2L2_VV_B [b,b1]

    tbj [b,j]  = T2L2_VV_B [b,b1] * T1B [b1,j]
    tbj [b,j] *= R0

    PUT  DENS_VO_B [b,j] += tbj [b,j]

endpardo  b, b1, j
#
pardo  b1, j1

    GET  L1B [j1,b1]

    do b
    do j
	REQUEST  T2BB [b,j,b1,j1] 
	tbj  [b,j]  = T2BB [b,j,b1,j1] * L1B [j1,b1]
	tbj  [b,j] *= R0
	PUT  DENS_VO_B [b,j] += tbj [b,j]
    enddo j
    enddo b

endpardo  b1, j1

pardo  i, a

    GET  L1A [i,a]

    do b
    do j
	REQUEST  T2AB [a,i,b,j] 
	tbj  [b,j]  = T2AB [a,i,b,j] * L1A [i,a]
	tbj  [b,j] *= R0
	PUT  DENS_VO_B [b,j] += tbj [b,j]
    enddo j
    enddo b

endpardo  i, a
#
if LOGRIGHT == ONE

    pardo  b1, j1

	GET            DENS_INT_OV_B [j1,b1]
	tjb  [j1,b1] = DENS_INT_OV_B [j1,b1]

	do b
	do j
	    REQUEST  T2BB [b,j,b1,j1] 
	    tbj [b,j] = T2BB [b,j,b1,j1] * tjb [j1,b1]
	    PUT  DENS_VO_B [b,j] += tbj [b,j]
	enddo j
	enddo b

    endpardo  b1, j1

    pardo  a, i

	GET          DENS_INT_OV_A [i,a]
	tia  [i,a] = DENS_INT_OV_A [i,a]

	do b
	do j
	    REQUEST  T2AB [a,i,b,j] 
	    tbj [b,j]    = T2AB [a,i,b,j] * tia [i,a]
	    PUT  DENS_VO_B [b,j] += tbj [b,j]
	enddo j
	enddo b

    endpardo  a, i
#
#
#
#
#
    pardo  b1, j1

	GET            DENS_INT_OV_B [j1,b1]
	tjb  [j1,b1] = DENS_INT_OV_B [j1,b1]

	do j
	    GET  T1B [b1,j]
	    tjj [j,j1] = T1B [b1,j] * tjb [j1,b1]
	    do b
		GET  T1B [b,j1]
		tbj [b,j]  = T1B [b,j1] * tjj [j,j1]
		tbj [b,j] *= -1.0
		PUT  DENS_VO_B [b,j] += tbj [b,j]
	    enddo b
	enddo j

    endpardo  b1, j1
#
#
#
#
#
    pardo  b1, j1

	GET  L1B [j1,b1]

	do b
	do j
	    REQUEST  R2AA [b,j,b1,j1] 
	    tbj [b,j] = R2AA [b,j,b1,j1] * L1B [j1,b1]
	    PUT  DENS_VO_B [b,j] += tbj [b,j]
	enddo j
	enddo b

    endpardo  b1, j1
#
#
#
#
#
    pardo  i, a

	GET  L1A [i,a]

	do b
	do j
	    REQUEST  R2AB [a,i,b,j] 
	    tbj [b,j] = R2AB [a,i,b,j] * L1A [i,a]
	    PUT  DENS_VO_B [b,j] += tbj [b,j]
	enddo j
	enddo b

    endpardo  i, a
#
#
#
#
#
    pardo j, b, b1  

	GET  R2L2_VV_B [b,b1]
	GET  T2L2_VV_B [b,b1]
	GET  R1B [b1,j]
	GET  T1B [b1,j]
	tbj  [b,j]  = R2L2_VV_B [b,b1] * T1B [b1,j]
	tbj2 [b,j]  = T2L2_VV_B [b,b1] * R1B [b1,j]
	tbj  [b,j] += tbj2 [b,j]
#
	PUT  DENS_VO_B [b,j] += tbj [b,j]

    endpardo j, b, b1  
#
#
#
#
#
    pardo  j, b, j1  

	GET  R1B [b,j1]
	GET  T1B [b,j1]
	GET  R2L2_OO_B [j,j1]
	GET  T2L2_OO_B [j,j1]
	tbj  [b,j]  = T1B [b,j1] * R2L2_OO_B [j,j1]
	tbj2 [b,j]  = R1B [b,j1] * T2L2_OO_B [j,j1]
	tbj  [b,j] += tbj2 [b,j]
	PUT  DENS_VO_B [b,j] += tbj [b,j]

    endpardo j, b, j1  
#
#
#
#
#
    if EXCITESTATE == ZERO
	pardo  b, j
	    GET  R1B [b,j]
	    tbj [b,j] = R1B [b,j]
	    PUT  DENS_VO_B [b,j] += tbj [b,j]
	endpardo  b, j
    endif

    if EXCITESTATE == ONE
	pardo  b, j
	    GET  T1B [b,j]
	    tbj [b,j] = T1B [b,j]
	    PUT  DENS_VO_B [b,j] += tbj [b,j]
	endpardo  b, j
    endif

endif  # LOGRIGHT == ONE #

server_barrier
#
ENDPROC  COMPUTE_DENSITY
#
PROC get_r_amps
#
    server_barrier
Tk[kstate] = 1.0
pardo a,i,a1,i1
    request RB2_aa[kstate,a,i,a1,i1]
    Taiai[a,i,a1,i1] = Tk[kstate]*RB2_aa[kstate,a,i,a1,i1]
    prepare R2AA[a,i,a1,i1] = Taiai[a,i,a1,i1]
endpardo a,i,a1,i1

pardo a,i,b,j
    request RB2_ab[kstate,a,i,b,j]
    Taibj[a,i,b,j] = Tk[kstate]*RB2_ab[kstate,a,i,b,j]
    prepare R2AB[a,i,b,j] = Taibj[a,i,b,j]
endpardo a,i,b,j

pardo a,i
    request RB1_a[kstate,a,i]
    Tai[a,i] = Tk[kstate]*RB1_a[kstate,a,i]
    put R1A[a,i] = Tai[a,i]
    put R1B[a,i] = Tai[a,i]
endpardo a,i
    server_barrier
#
ENDPROC get_r_amps

PROC  PUT_IN_Lk
#
if logright == one
# place lambda in
    pardo i,a
        get Lam1A[i,a]
	Tia[i,a] = Lam1A[i,a]
	put L1A[i,a] = Tia[i,a]
    endpardo i,a
    pardo j,b
        get Lam1B[j,b]
	Tia[j,b] = Lam1B[j,b]
	put L1B[j,b] = Tia[j,b]
    endpardo j,b
    pardo i,a,b,j
        request Lam2AB[i,a,j,b]
	Tiajb[i,a,j,b] = Lam2AB[i,a,j,b]
	prepare L2AB[i,a,j,b] = Tiajb[i,a,j,b]
    endpardo i,a,b,j
    pardo i,a,i1,a1
        request Lam2AA[i,a,i1,a1]
	Tiaia[i,a,i1,a1] = Lam2AA[i,a,i1,a1]
	prepare L2AA[i,a,i1,a1] = Tiaia[i,a,i1,a1]
    endpardo i,a,i1,a1
    pardo j,b,j1,b1
        request Lam2AA[j,b,j1,b1]
	Tjbjb[j,b,j1,b1] = Lam2AA[j,b,j1,b1]
	prepare L2BB[j,b,j1,b1] = Tjbjb[j,b,j1,b1]
    endpardo j,b,j1,b1
endif
if logright == zero
# place left eom vector in
    pardo i,a
        request LB1_a[kstate,a,i]
	Tk[kstate] = 1.0
	Tia[i,a] = Tk[kstate]*LB1_a[kstate,a,i]
	put L1A[i,a] = Tia[i,a]
	put L1B[i,a] = Tia[i,a]
    endpardo i,a
    pardo i,a,b,j
        request LB2_ab[kstate,a,i,b,j]
	Tk[kstate] = 1.0
	Tiajb[i,a,j,b] = Tk[kstate]*Lb2_ab[kstate,a,i,b,j]
	prepare L2AB[i,a,j,b] = Tiajb[i,a,j,b]
    endpardo i,a,b,j
    pardo i,a,i1,a1
        request LB2_aa[kstate,a,i,a1,i1]
	Tk[kstate] = 1.0
	Tiaia[i,a,i1,a1] = Tk[kstate]*LB2_aa[kstate,a,i,a1,i1]
	prepare L2AA[i,a,i1,a1] = Tiaia[i,a,i1,a1]
    endpardo i,a,i1,a1
    pardo j,b,j1,b1
        request LB2_aa[kstate,b,j,b1,j1]
	Tk[kstate] = 1.0
	Tjbjb[j,b,j1,b1] = Tk[kstate]*LB2_aa[kstate,b,j,b1,j1]
	prepare L2BB[j,b,j1,b1] = Tjbjb[j,b,j1,b1]
    endpardo j,b,j1,b1
endif
server_barrier
#
ENDPROC  PUT_IN_Lk
#
PROC hf_density
#
    pardo mu,nu
        Txx[mu,nu] = 0.0
        put DHF[mu,nu] = Txx[mu,nu]
    endpardo mu,nu
    server_barrier
    pardo mu,nu
        Txx[mu,nu] = 0.0
        do i
            T1xx[mu,nu] = Ca[mu,i]*Ca[nu,i]
            Txx[mu,nu] += T1xx[mu,nu]
        enddo i
        Txx[mu,nu] *= 2.0
        put DHF[mu,nu] += Txx[mu,nu]
    endpardo mu,nu
#
ENDPROC hf_density
#
PROC back_transform_dipole
#
pardo mu, nu
PUT AO_DENS[mu,nu] = 0.0
endpardo  mu, nu

server_barrier

pardo  i, i1
GET DENS_OO_A[i,i1]

    do mu
	txi[mu,i1] = DENS_OO_A [i,i1]*CA[mu,i]
	do nu
	    txx  [mu,nu] = txi[mu,i1]*CA[nu,i1]
	    PUT  AO_DENS[mu,nu] += txx[mu,nu]
	enddo nu
    enddo mu

endpardo  i, i1
#
pardo  j, j1

    GET  DENS_OO_B[j,j1]
    do mu
	txj[mu,j1] = DENS_OO_B[j,j1] * CA[mu,j]
	do nu
	    txx[mu,nu] = txj[mu,j1] * CA[nu,j1]
	    PUT AO_DENS [mu,nu] += txx[mu,nu]
	enddo nu
    enddo mu

endpardo  j, j1
#
pardo  a, a1

    GET  DENS_VV_A [a,a1]

    do mu

	txa  [mu,a1] = DENS_VV_A [a,a1] * CA [mu,a]

	do nu

	    txx  [mu,nu] = txa [mu,a1] * CA [nu,a1]
	    PUT  AO_DENS [mu,nu] += txx  [mu,nu]

	enddo nu

    enddo mu

endpardo  a, a1
#
#
#      ...Virtual-virtual beta...
#
#
pardo  b, b1

    GET  DENS_VV_B   [b,b1]

    do mu

	txb  [mu,b1] = DENS_VV_B [b,b1] * CA [mu,b]

	do nu

	    txx  [mu,nu] = txb [mu,b1] * CA [nu,b1]
	    PUT  AO_DENS [mu,nu] += txx  [mu,nu]

	enddo nu

    enddo mu

endpardo  b, b1
#
pardo  a, i

    GET  DENS_VO_A [a,i]

    do mu

	txi [mu,i] = DENS_VO_A [a,i] * CA [mu,a]

	do nu

	    txx  [mu,nu] = txi [mu,i] * CA [nu,i]
	    PUT  AO_DENS [mu,nu] += txx  [mu,nu]

	enddo nu

    enddo mu

endpardo  a, i
#
pardo  b, j

    GET  DENS_VO_B [b,j]

    do mu

	txj [mu,j] = DENS_VO_B [b,j] * CA [mu,b]

	do nu

	    txx  [mu,nu] = txj [mu,j] * CA [nu,j]
	    PUT  AO_DENS [mu,nu] += txx  [mu,nu]

	enddo nu

    enddo mu

endpardo  b, j
#
pardo  i, a

    GET  DENS_OV_A   [i,a]

    do mu

	txa [mu,a] = DENS_OV_A [i,a] * CA [mu,i]

	do nu

	    txx  [mu,nu] = txa [mu,a] * CA [nu,a]
	    PUT  AO_DENS [mu,nu] += txx  [mu,nu]

	enddo nu

    enddo mu

endpardo  i, a
#
#
#      ...Occupied-virtual beta...
#
#
pardo  j, b

    GET  DENS_OV_B   [j,b]

    do mu

	txb [mu,b] = DENS_OV_B [j,b] * CA [mu,j]

	do nu

	    txx  [mu,nu] = txb [mu,b] * CA [nu,b]
	    PUT  AO_DENS [mu,nu] += txx  [mu,nu]

	enddo nu

    enddo mu

endpardo  j, b

IF GROUNDSTATE == ONE                        # Grab HF Density
pardo  mu, nu
    GET                     DHF [mu,nu]
    txx [mu,nu]           = DHF [mu,nu]
    PUT  AO_DENS [mu,nu] += txx [mu,nu]
endpardo  mu, nu
ENDIF   #  GROUNDSTATE == ONE  #
#
server_barrier
#
do ixyz
    ncount2 = (scalar)ixyz
    dsum = 0.0
    esum = 0.0
    pardo mu,nu
	get ao_dens[mu,nu]
	ncount1 = 0.0
	execute compute_dipole_integrals DAOINT[mu,nu] ncount1 ncount2
	Txx[mu,nu] = ao_dens[mu,nu]
	etemp = Txx[mu,nu]*DAOINT[mu,nu]
	esum += etemp
    endpardo mu,nu
    server_barrier
    collective dsum += esum
    server_barrier
#    dsum += NucDip[ixyz]
    if logright == one
        Rdipole[ixyz] = dsum
    endif
    if logright == zero
        Ldipole[ixyz] = dsum
    endif
enddo ixyz
#
ENDPROC back_transform_dipole
#-------------------------------------------------------------------------
#
#-------------------------------------------------------------------------
#
#
# -----------------
#  MAIN
# -----------------
normcrit = 0.0000000000001
ZERO = 0.0
one = 1.0
root = 0
subspc = eom_subspc
roots = eom_roots

print " "
print "-- Parallel left-right EE-EOM-CCPT(2) program"
print "-- Subspace collapse non-symmetric davidson update"
print "-- J. Comp. Chem. 2001, 22, 1574-1589"
print "-- Written by Jason N. Byrd, 2015"
print " "
server_barrier
CALL READ_AMP
call tran_uhf
call form_H_CCPT

call form_diag

iguess=0
print "Assuming 0.0 for initial R2 vectors"
call form_guess

do kstate
    SEkold[kstate] = 0.0
enddo kstate

do kiter
    print " "
    print kiter

    call form_G
    call diag_G
    call update_vecs
    call all_GS

    etemp = 0.0
    etemp2 = 0.0
    do kstate
        etemp1 = SEk0[kstate]
        etemp2 = SEkold[kstate]
        etemp1 -= etemp2
        etemp2 = etemp1**2.0
        etemp += etemp2
    enddo kstate
    etemp3 = (scalar)eom_roots
    rms_e_conv = (etemp/etemp3)**0.5
    do kstate
        SEkold[kstate] = SEk0[kstate]
    enddo kstate
    print rms_e_conv
    print rms_orb_conv
    server_barrier
    assert_same rms_e_conv
    if rms_e_conv < eom_tol
        exit
    endif
    server_barrier
enddo kiter

print " "
print "EOM-CCPT has converged"
#print "FINAL excitation energies"
#do kstate
#    allocate contiguous EOM_EE_Energy[kstate:kstate]
#    EOM_EE_Energy[kstate:kstate] = SEk0[kstate] 
#    print EOM_EE_Energy[kstate:kstate]
#    deallocate contiguous EOM_EE_Energy[kstate:kstate]
#enddo kstate

# -----------------
# props
# -----------------
# scale so <R|R>=1.0 
call norm_lr_vec
call form_r0

call hf_density

allocate contiguous Dipole_Oscillator_Strength[1:eom_roots,1:3]
allocate contiguous Dipole_Oscillator_norm[1:eom_roots]
allocate contiguous EOM_EE_Energy[1:eom_roots]

do kstate
    print " "
    print "--------"
    print kstate

# logright = 0.0 : Left = left eom amplitudes
# logright = 1.0 : Left = lambda amplitudes

    omega = SEk0[kstate]
    EOM_EE_Energy[kstate:kstate] = SEk0[kstate] 
    r0 = SR0[kstate]
    print r0
    print EOM_EE_Energy[kstate:kstate]
    print " "

    print "***** EXPERIMENTAL OSCILLATOR STRENGTH *****"
    do ixyz
	RDipole[ixyz] = 0.0
	LDipole[ixyz] = 0.0
    enddo ixyz

    call get_r_amps

    logright = one
    CALL PUT_IN_Lk
    call compute_density
    call back_transform_dipole
#    print Rdipole

    logright = zero
    r0 = 1.0
    CALL PUT_IN_Lk
    call compute_density
    call back_transform_dipole
#    print Ldipole

    dsum = 0.0
    do ixyz
	sum1 = RDipole[ixyz]
	sum2 = LDipole[ixyz]
	etemp = sum1*sum2*omega*2.0/3.0
	Dipole_Oscillator_Strength[kstate:kstate,ixyz:ixyz] = etemp
        print Dipole_Oscillator_Strength[kstate:kstate,ixyz:ixyz]
	dsum += etemp
    enddo ixyz
    Dipole_Oscillator_Norm[kstate:kstate] = dsum
    print Dipole_Oscillator_Norm[kstate:kstate]
    print "***** EXPERIMENTAL OSCILLATOR STRENGTH *****"


enddo kstate

server_barrier

endSIAL R_EE_EOM_CCSD_RHF
