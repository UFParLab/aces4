import "trans_frag_defs.sialx" 
import "mcpt2_vars.sialx"
#
                           SIAL FRAG_2ORDER_CORR 
#
# ----------------------------------------------------------------------------

      PROC SET_FRAG_PARMS    
#     ------------------- 
#
#     Determine the number of fragments  
#     --------------------------------- 
      execute set_frag n_frags
     #print_scalar nfrags
      allocate wAO_frag[*] 
      allocate wOccA_frag[*] 
      allocate wOccB_frag[*] 
      allocate wVirtA_frag[*] 
      allocate wVirtB_frag[*] 

      allocate SwAO_frag[*] 
      allocate SwOccA_frag[*] 
      allocate SwOccB_frag[*] 
      allocate SwVirtA_frag[*] 
      allocate SwVirtB_frag[*] 

      allocate elst_dist[*,*]
      allocate rcut_dist[*,*]

      do kfrag
      do jfrag
	  where jfrag <= kfrag
	  icount = (scalar)kfrag
	  jcount = (scalar)jfrag

          execute return_pairs icount jcount elst_thresh pair_flag 
	  elst_dist[kfrag,jfrag] = 0.0
	  elst_dist[jfrag,kfrag] = 0.0

          if pair_flag > zero
	  elst_dist[kfrag,jfrag] = (scalar)kfrag
	  elst_dist[jfrag,kfrag] = (scalar)jfrag
	  endif

          execute return_pairs icount jcount r_thresh pair_flag 
	  rcut_dist[kfrag,jfrag] = 0.0
	  rcut_dist[jfrag,kfrag] = 0.0

          if pair_flag > zero
	  rcut_dist[kfrag,jfrag] = (scalar)kfrag
	  rcut_dist[jfrag,kfrag] = (scalar)jfrag
	  endif

      enddo jfrag
      enddo kfrag

      do jfrag
#
	  icount = (scalar)jfrag
          i_aostart = icount
          i_aoend   = 1.0
          execute frag_index_range i_aostart i_aoend
         i_vstart  = icount
         i_vend    = 6.0
         execute frag_index_range i_vstart i_vend
         a_vstart  = icount
         a_vend    = 7.0
         execute frag_index_range a_vstart a_vend

          m = 0.0
          do mu
              m += 1.0
              if m >= i_aostart
              if m <= i_aoend
              SwAO_frag[(index)mu] = (scalar)jfrag
              wAO_frag[mu] = (scalar)jfrag
              endif
              endif
          enddo mu
         DO i
            m = 0.0
            do i1
               m += 1.0
               if i == i1
                  exit
               endif
            enddo i1
	    print i
            if m >= i_vstart
            if m <= i_vend
               SwOccA_frag[(index)i] = (scalar)jfrag
               wOccA_frag[i] = (scalar)jfrag
            endif
            endif
         ENDDO i
         DO a
            m = 0.0
            do a1
               m += 1.0
               if a == a1
                  exit
               endif
            enddo a1
            if m >= a_vstart
            if m <= a_vend
               SwVirtA_frag[(index)a] = (scalar)jfrag
               wVirtA_frag[a] = (scalar)jfrag
            endif
            endif
         ENDDO a
      enddo jfrag

      sip_barrier
      ENDPROC SET_FRAG_PARMS    

      PROC FRAG_TRAN    
#     -------------- 

      sip_barrier

      print "Computing wC_ao"

# ----------------------------------------------------------------------------
#     zero wC_ao
# ----------------------------------------------------------------------------
      PARDO kfrag,mu,nu
      where (int)SwAO_frag[(index)mu] == kfrag
      where (int)SwAO_frag[(index)nu] == kfrag

	  PUT wC_ao[mu,nu] = 0.0

      ENDPARDO kfrag,mu,nu

      server_barrier

      PARDO ifrag, jfrag
      WHERE jfrag != ifrag
      where (int)elst_dist[ifrag,jfrag] == ifrag

	 icount = (scalar)ifrag
	 jcount = (scalar)jfrag

      DO mu
      where (int)SwAO_frag[(index)mu] == ifrag
      DO nu
      where (int)SwAO_frag[(index)nu] == ifrag
#
# ---------------------------------------------------------------------------- 
#     Form wC_ao  
# ---------------------------------------------------------------------------- 
#
	  LwC_ao[mu,nu] = 0.0 

	  DO j
	  where (int)SwOccA_frag[(index)j] == jfrag
	      allocate LVxxqq[mu,nu,j,j]
	  ENDDO j

	  DO lambda
          where (int)SwAO_frag[(index)lambda] == jfrag

	      DO j
	      where (int)SwOccA_frag[(index)j] == jfrag
		  allocate LVxxxq[mu,nu,lambda,j]
	      ENDDO j

	      DO sigma
	      where (int)SwAO_frag[(index)sigma] == jfrag

		  aoint[mu,nu,lambda,sigma]  = 0.0
		  execute compute_integral_batch aoint[mu,nu,lambda,sigma] #  1 1 2 2  

		  DO j
		  where (int)SwOccA_frag[(index)j] == jfrag
		      txxxq[mu,nu,lambda,j]   = aoint[mu,nu,lambda,sigma]*ca[sigma,j]
		      LVxxxq[mu,nu,lambda,j] += txxxq[mu,nu,lambda,j]
		  ENDDO j

	      ENDDO sigma

	      DO j
	      where (int)SwOccA_frag[(index)j] == jfrag

	      DO j1
	      where j == j1
	      where (int)SwOccA_frag[(index)j1] == jfrag
		  txxqq[mu,nu,j1,j]   = LVxxxq[mu,nu,lambda,j]*ca[lambda,j1]
		  LVxxqq[mu,nu,j1,j] += txxqq[mu,nu,j1,j] 
	      ENDDO j1
	      ENDDO j

	      DO j
	      where (int)SwOccA_frag[(index)j] == jfrag
		  deallocate LVxxxq[mu,nu,lambda,j]
	      ENDDO j

	  ENDDO lambda

	  DO j
	  where (int)SwOccA_frag[(index)j] == jfrag

	      DO j1
	      where j == j1 
	      where (int)SwOccA_frag[(index)j1] == jfrag
		  txxqq[mu,nu,j1,j] = LVxxqq[mu,nu,j1,j] 
		  txx[mu,nu]    = 0.0  
		  execute return_vpq txxqq[mu,nu,j1,j] txx[mu,nu] 
		  txx[mu,nu]   *= 2.0  
		  LwC_ao[mu,nu] += txx[mu,nu]
	      ENDDO j1

	  ENDDO j

	  PUT wC_ao[mu,nu] += LwC_ao[mu,nu]

	  DO j
	  where (int)SwOccA_frag[(index)j] == jfrag
	      deallocate LVxxqq[mu,nu,j,j]
	  ENDDO j
#
# ---------------------------------------------------------------------------- 
#     Done forming wC_ao  
# ---------------------------------------------------------------------------- 

      ENDDO nu
      ENDDO mu
      ENDPARDO ifrag, jfrag

      sip_barrier
      print "Done initial formation of wC(AO)"

      PARDO ifrag
         icount = (scalar)ifrag
         DO mu
	 where (int)SwAO_frag[(index)mu] == ifrag
         DO nu
         where (int)SwAO_frag[(index)nu] == ifrag

             GET             wC_ao[mu,nu]
   
	     DO a
	     where (int)SwVirtA_frag[(index)a] == ifrag
		 DO i
		 where (int)SwOccA_frag[(index)i] == ifrag
		     txp[mu,i]     = wC_ao[mu,nu]*ca[nu,i]
		     tpp[a,i]     = txp[mu,i]*ca[mu,a]
		     PUT wC[a,i] += tpp[a,i]
		     t1pp[i,a]    = tpp[a,i]
		     PUT wC[i,a] += t1pp[i,a]
		 ENDDO i
	      ENDDO a
       
	      DO a
	      where (int)SwVirtA_frag[(index)a] == ifrag
		  DO a1
		  where (int)SwVirtA_frag[(index)a1] == ifrag
		      txp[mu,a1] = wC_ao[mu,nu]*ca[nu,a1]
		      tpp[a,a1]  = txp[mu,a1]*ca[mu,a]
		      t1pp[a,a1] = tpp[a,a1]
		      PUT wC[a,a1] += tpp[a,a1]
		  ENDDO a1
	      ENDDO a
       
       
	      DO i1
	      where (int)SwOccA_frag[(index)i1] == ifrag
		  DO i
		  where (int)SwOccA_frag[(index)i] == ifrag
		      txp[mu,i] = wC_ao[mu,nu]*ca[nu,i]
		      tpp[i1,i]  = txp[mu,i]*ca[mu,i1]
		      t1pp[i1,i] = tpp[i1,i]
		      PUT wC[i1,i] += tpp[i1,i]
		  ENDDO i
	      ENDDO i1

         ENDDO nu
         ENDDO mu
      ENDPARDO ifrag

      sip_barrier 

      print "Done Final formation of wC(MO)"

      PARDO ifrag, jfrag 
      where (int)elst_dist[ifrag,jfrag] == ifrag
	  icount = (scalar)ifrag
	  jcount = (scalar)jfrag

# ---------------------------------------------------------------------------- 
#     First stage --> form Vxxxj (1122) 
# ---------------------------------------------------------------------------- 
#
      DO mu 
      where (int)SwAO_frag[(index)mu] == ifrag
      DO nu 
      where (int)SwAO_frag[(index)nu] == ifrag

      do lambda
      where (int)SwAO_frag[(index)lambda] == jfrag

	  icount = (scalar)ifrag
	  jcount = (scalar)jfrag

# ---------------------------------------------------------------------------- 
#     First stage --> form Vxxxj (1122) 
# ---------------------------------------------------------------------------- 

	  DO j 
	  where (int)SwOccA_frag[(index)j] == jfrag
	      allocate LVxxxq[mu,nu,lambda,j] 
	  ENDDO j 

	  DO sigma 
	  where (int)SwAO_frag[(index)sigma] == jfrag

	      aoint[mu,nu,lambda,sigma]  = 0.0 
	      execute compute_integral_batch aoint[mu,nu,lambda,sigma] #  1 1 2 2  

	      DO j 
	      where (int)SwOccA_frag[(index)j] == jfrag
		  txxxq[mu,nu,lambda,j]   = aoint[mu,nu,lambda,sigma]*ca[sigma,j] 
		  LVxxxq[mu,nu,lambda,j] += txxxq[mu,nu,lambda,j] 
	      ENDDO j 
	  ENDDO sigma 


	  DO j 
	  where (int)SwOccA_frag[(index)j] == jfrag

	      DO i 
	      where (int)SwOccA_frag[(index)i] == ifrag
		  txpxq[mu,i,lambda,j]      = LVxxxq[mu,nu,lambda,j]*ca[nu,i] 
		  PUT Vxpxq[mu,i,lambda,j] += txpxq[mu,i,lambda,j] 
	      ENDDO i 

	      DO i1 
	      where (int)SwOccA_frag[(index)i1] == ifrag
		  tpxxq[i1,nu,lambda,j]      = LVxxxq[mu,nu,lambda,j]*ca[mu,i1] 
		  PUT Vpxxq[i1,nu,lambda,j] += tpxxq[i1,nu,lambda,j] 
	      ENDDO i1 

	      DO j1  
	      where (int)SwOccA_frag[(index)j1] == jfrag
		  txxqq[mu,nu,j1,j]      = LVxxxq[mu,nu,lambda,j]*ca[lambda,j1] 
		  PUT Vxxqq[mu,nu,j1,j] += txxqq[mu,nu,j1,j] 
	      ENDDO j1  
	  ENDDO j 

	  DO j 
	  where (int)SwOccA_frag[(index)j] == jfrag
	      deallocate LVxxxq[mu,nu,lambda,j] 
	  ENDDO j 

      enddo lambda

      ENDDO nu 
      ENDDO mu
      ENDPARDO ifrag, jfrag 

# Exchange integrals 

      PARDO ifrag, jfrag 
      where (int)elst_dist[ifrag,jfrag] == ifrag
         icount = (scalar)ifrag
         jcount = (scalar)jfrag

      DO mu 
      where (int)SwAO_frag[(index)mu] == jfrag
      DO nu 
      where (int)SwAO_frag[(index)nu] == ifrag
      DO lambda 
      where (int)SwAO_frag[(index)lambda] == ifrag

	  icount = (scalar)ifrag
	  jcount = (scalar)jfrag

	  DO j 
	  where (int)SwOccA_frag[(index)j] == jfrag
	      allocate LVxxxq[mu,nu,lambda,j] 
	  ENDDO j 

	  DO sigma 
	  where (int)SwAO_frag[(index)sigma] == jfrag

	      aoint[mu,nu,lambda,sigma]  = 0.0 
	      execute compute_integral_batch aoint[mu,nu,lambda,sigma] #  1 1 2 2  

	      DO j 
	      where (int)SwOccA_frag[(index)j] == jfrag
		txxxq[mu,nu,lambda,j]   = aoint[mu,nu,lambda,sigma]*ca[sigma,j] 
		LVxxxq[mu,nu,lambda,j] += txxxq[mu,nu,lambda,j] 
	      ENDDO j 

	  ENDDO sigma 


	  DO j 
	  where (int)SwOccA_frag[(index)j] == jfrag

	      DO i 
	      where (int)SwOccA_frag[(index)i] == ifrag
  		 txxqq[mu,nu,i,j]      = LVxxxq[mu,nu,lambda,j]*ca[lambda,i] 
		 PUT Vxxqq_x[mu,nu,i,j] += txxqq[mu,nu,i,j] 
	      ENDDO i  
	  ENDDO j 

	  DO j 
	  where (int)SwOccA_frag[(index)j] == jfrag
	      deallocate LVxxxq[mu,nu,lambda,j] 
	  ENDDO j 

      ENDDO lambda 
      ENDDO nu 
      ENDDO mu
      ENDPARDO ifrag, jfrag 
#
      PARDO ifrag, jfrag 
      where (int)elst_dist[ifrag,jfrag] == ifrag
         icount = (scalar)ifrag
         jcount = (scalar)jfrag
      DO mu 
      where (int)SwAO_frag[(index)mu] == ifrag
      DO nu 
      where (int)SwAO_frag[(index)nu] == ifrag
      DO lambda 
      where (int)SwAO_frag[(index)lambda] == ifrag

	  DO j 
	  where (int)SwOccA_frag[(index)j] == jfrag
	      allocate LVxxxq[mu,nu,lambda,j] 
	  ENDDO j 

	  DO sigma 
	  where (int)SwAO_frag[(index)sigma] == jfrag

	      aoint[mu,nu,lambda,sigma]  = 0.0 
	      execute compute_integral_batch aoint[mu,nu,lambda,sigma] #  1 1 2 2  

	      DO j 
	      where (int)SwOccA_frag[(index)j] == jfrag
		    txxxq[mu,nu,lambda,j]   = aoint[mu,nu,lambda,sigma]*ca[sigma,j] 
		    LVxxxq[mu,nu,lambda,j] += txxxq[mu,nu,lambda,j] 
	      ENDDO j 

	  ENDDO sigma 


	  DO j 
	  where (int)SwOccA_frag[(index)j] == jfrag

	      DO i 
	      where (int)SwOccA_frag[(index)i] == ifrag
		    txxqq[mu,nu,i,j]      = LVxxxq[mu,nu,lambda,j]*ca[lambda,i] 
		    PUT Vxxqq_x[mu,nu,i,j] += txxqq[mu,nu,i,j] 
	      ENDDO i  

	  ENDDO j 

	  DO j 
	  where (int)SwOccA_frag[(index)j] == jfrag
	      deallocate LVxxxq[mu,nu,lambda,j] 
	  ENDDO j 

# ---------------------------------------------------------------------------- 
#     Done second stage --> form Vixxj (1122) 
# ---------------------------------------------------------------------------- 

      ENDDO lambda 
      ENDDO nu 
      ENDDO mu

      ENDPARDO ifrag, jfrag 

      sip_barrier 
      print "Done first two stages of two-electron integral transformation" 

      PARDO ifrag, jfrag 
      where (int)elst_dist[ifrag,jfrag] == ifrag
         icount = (scalar)ifrag
         jcount = (scalar)jfrag

# ---------------------------------------------------------------------------- 
#     Third stage --> form Vxibj (1122) 
# ---------------------------------------------------------------------------- 
#
      DO mu
      where (int)SwAO_frag[(index)mu] == ifrag
      DO i
      where (int)SwOccA_frag[(index)i] == ifrag
      DO j 
      where (int)SwOccA_frag[(index)j] == jfrag
      DO lambda
      where (int)SwAO_frag[(index)lambda] == jfrag

	  GET                    Vxpxq[mu,i,lambda,j] 

	  DO b 
	  where (int)SwVirtA_frag[(index)b] == jfrag
	      txpqq[mu,i,b,j]      = Vxpxq[mu,i,lambda,j]*ca[lambda,b] 
	      PUT Vxpbq[mu,i,b,j] += txpqq[mu,i,b,j] 
	  ENDDO b 

      ENDDO lambda
      ENDDO j 
      ENDDO i
      ENDDO mu
      ENDPARDO ifrag,jfrag

# ---------------------------------------------------------------------------- 
#     Third stage --> form Vixbj (1122) 
# ---------------------------------------------------------------------------- 
#
      PARDO ifrag, jfrag 
      where (int)elst_dist[ifrag,jfrag] == ifrag
         icount = (scalar)ifrag
         jcount = (scalar)jfrag

      DO i 
      where (int)SwOccA_frag[(index)i] == ifrag
      DO nu
      where (int)SwAO_frag[(index)nu] == ifrag
      DO j 
      where (int)SwOccA_frag[(index)j] == jfrag
      DO lambda
      where (int)SwAO_frag[(index)lambda] == jfrag

	  GET                    Vpxxq[i,nu,lambda,j] 

	  DO b 
	  where (int)SwVirtA_frag[(index)b] == jfrag
	      tpxqq[i,nu,b,j]      = Vpxxq[i,nu,lambda,j]*ca[lambda,b] 
	      PUT Vixbj[i,nu,b,j] += tpxqq[i,nu,b,j] 
	  ENDDO b 

	  DO j1 
	  where (int)SwOccA_frag[(index)j1] == jfrag
	      tpxqq[i,nu,j1,j]      = Vpxxq[i,nu,lambda,j]*ca[lambda,j1] 
	      PUT Vixjj[i,nu,j1,j] += tpxqq[i,nu,j1,j] 
	  ENDDO j1  
      ENDDO lambda
      ENDDO j 
      ENDDO nu
      ENDDO i 
      ENDPARDO ifrag,jfrag
#
      PARDO ifrag, jfrag 
      where (int)elst_dist[ifrag,jfrag] == ifrag
         icount = (scalar)ifrag
         jcount = (scalar)jfrag
      DO nu 
      where (int)SwAO_frag[(index)nu] == ifrag
      DO j1 
      where (int)SwOccA_frag[(index)j1] == jfrag
      DO j 
      where (int)SwOccA_frag[(index)j] == jfrag
      DO mu 
      where (int)SwAO_frag[(index)mu] == ifrag

	  GET                 Vxxqq[mu,nu,j1,j] 

	  DO a 
	  where (int)SwVirtA_frag[(index)a] == ifrag
	      tpxqq[a,nu,j1,j]      = Vxxqq[mu,nu,j1,j]*ca[mu,a] 
	      PUT Vaxjj[a,nu,j1,j] += tpxqq[a,nu,j1,j] 
	  ENDDO a 

      ENDDO mu 
      ENDDO j 
      ENDDO j1 
      ENDDO nu 
      ENDPARDO ifrag,jfrag
#
      PARDO ifrag, jfrag 
      where (int)elst_dist[ifrag,jfrag] == ifrag
         icount = (scalar)ifrag
         jcount = (scalar)jfrag
      DO nu 
      where (int)SwAO_frag[(index)nu] == ifrag
      DO i 
      where (int)SwOccA_frag[(index)i] == ifrag
      DO j 
      where (int)SwOccA_frag[(index)j] == jfrag
	  DO mu 
	  where (int)SwAO_frag[(index)mu] == jfrag
       
		 GET                 Vxxqq_x[mu,nu,i,j] 

		 DO i1 
		 where (int)SwOccA_frag[(index)i1] == ifrag
		       txpqq[mu,i1,i,j]      = Vxxqq_x[mu,nu,i,j]*ca[nu,i1] 
		       PUT Vxiij[mu,i1,i,j] += txpqq[mu,i1,i,j] 
		 ENDDO i1  
	  ENDDO mu 

	  DO mu 
	  where (int)SwAO_frag[(index)mu] == ifrag

		 GET                 Vxxqq_x[mu,nu,i,j] 

		 DO i1 
		 where (int)SwOccA_frag[(index)i1] == ifrag
		       txpqq[mu,i1,i,j]      = Vxxqq_x[mu,nu,i,j]*ca[nu,i1] 
		       PUT Vxiij[mu,i1,i,j] += txpqq[mu,i1,i,j] 
		 ENDDO i1  
	  ENDDO mu 

      ENDDO j 
      ENDDO i 
      ENDDO nu 

      ENDPARDO ifrag, jfrag 

      print "Done third stage of two-electron integral transformation" 
      sip_barrier 

      PARDO ifrag, jfrag 
      where (int)elst_dist[ifrag,jfrag] == ifrag
        icount = (scalar)ifrag
        jcount = (scalar)jfrag

# ---------------------------------------------------------------------------- 
#     Fourth stage --> form Vaibj (1122) 
# ---------------------------------------------------------------------------- 
#
      DO mu 
      where (int)SwAO_frag[(index)mu] == ifrag
      DO i 
      where (int)SwOccA_frag[(index)i] == ifrag
      DO b 
      where (int)SwVirtA_frag[(index)b] == jfrag
      DO j 
      where (int)SwOccA_frag[(index)j] == jfrag

	  GET               Vxpbq[mu,i,b,j] 

	  DO a 
	  where (int)SwVirtA_frag[(index)a] == ifrag
		tppqq[a,i,b,j]      = Vxpbq[mu,i,b,j]*ca[mu,a] 
		PUT Vaibj[a,i,b,j] += tppqq[a,i,b,j] 
	  ENDDO a 

      ENDDO j 
      ENDDO b 
      ENDDO i 
      ENDDO mu 
      ENDPARDO ifrag,jfrag

# ---------------------------------------------------------------------------- 
#     Fourth stage --> form Viabj (1122) 
# ---------------------------------------------------------------------------- 
      PARDO ifrag, jfrag 
      where (int)elst_dist[ifrag,jfrag] == ifrag
        icount = (scalar)ifrag
        jcount = (scalar)jfrag
#
      DO i 
      where (int)SwOccA_frag[(index)i] == ifrag
      DO nu 
      where (int)SwAO_frag[(index)nu] == ifrag
      DO b 
      where (int)SwVirtA_frag[(index)b] == jfrag
      DO j 
      where (int)SwOccA_frag[(index)j] == jfrag

	  GET               Vixbj[i,nu,b,j]  

	  DO a 
	  where (int)SwVirtA_frag[(index)a] == ifrag
		tppqq[i,a,b,j]      = Vixbj[i,nu,b,j]*ca[nu,a] 
		PUT Viabj[i,a,b,j] += tppqq[i,a,b,j] 
	  ENDDO a 

      ENDDO j 
      ENDDO b 
      ENDDO nu 
      ENDDO i 
      ENDPARDO ifrag,jfrag

      PARDO ifrag, jfrag 
      where (int)elst_dist[ifrag,jfrag] == ifrag
        icount = (scalar)ifrag
        jcount = (scalar)jfrag
      DO a 
      where (int)SwVirtA_frag[(index)a] == ifrag
      DO nu 
      where (int)SwAO_frag[(index)nu] == ifrag
      DO j1 
      where (int)SwOccA_frag[(index)j1] == jfrag
      DO j 
      where (int)SwOccA_frag[(index)j] == jfrag

	  GET                Vaxjj[a,nu,j1,j] 

	  DO a1 
	  where (int)SwVirtA_frag[(index)a1] == ifrag
		tppqq[a,a1,j1,j]      = Vaxjj[a,nu,j1,j]*ca[nu,a1] 
		PUT Vaajj[a,a1,j1,j] += tppqq[a,a1,j1,j] 
	  ENDDO a1 

      ENDDO j 
      ENDDO j1 
      ENDDO nu 
      ENDDO a 
      ENDPARDO ifrag,jfrag

# ---------------------------------------------------------------------------- 
#     Fourth stage --> form Viijj (1122) 
# ---------------------------------------------------------------------------- 
#
      PARDO ifrag, jfrag 
      where (int)elst_dist[ifrag,jfrag] == ifrag
        icount = (scalar)ifrag
        jcount = (scalar)jfrag
      DO i 
      where (int)SwOccA_frag[(index)i] == ifrag
      DO nu 
      where (int)SwAO_frag[(index)nu] == ifrag
      DO j1 
      where (int)SwOccA_frag[(index)j1] == jfrag
      DO j 
      where (int)SwOccA_frag[(index)j] == jfrag

	  GET                Vixjj[i,nu,j1,j] 

	  DO i1 
	  where (int)SwOccA_frag[(index)i1] == ifrag
		tppqq[i,i1,j1,j]      = Vixjj[i,nu,j1,j]*ca[nu,i1] 
		PUT Viijj[i,i1,j1,j] += tppqq[i,i1,j1,j] 
	  ENDDO i1 

      ENDDO j 
      ENDDO j1 
      ENDDO nu 
      ENDDO i 
      ENDPARDO ifrag,jfrag

      PARDO ifrag, jfrag 
      where (int)elst_dist[ifrag,jfrag] == ifrag
        icount = (scalar)ifrag
        jcount = (scalar)jfrag
      DO i1  
      where (int)SwOccA_frag[(index)i1] == ifrag
      DO i 
      where (int)SwOccA_frag[(index)i] == ifrag
      DO j 
      where (int)SwOccA_frag[(index)j] == jfrag
	  DO mu 
	  where (int)SwAO_frag[(index)mu] == jfrag

	     GET                 Vxiij[mu,i1,i,j] 

	     DO j1 
	     where (int)SwOccA_frag[(index)j1] == jfrag
		   tppqq[j1,i1,i,j]      = Vxiij[mu,i1,i,j]*ca[mu,j1] 
		   PUT Vjiij[j1,i1,i,j] += tppqq[j1,i1,i,j] 
	     ENDDO j1  
	  ENDDO mu 

	  DO mu 
	  where (int)SwAO_frag[(index)mu] == ifrag

	     GET                 Vxiij[mu,i1,i,j] 

	     DO j1 
	     where (int)SwOccA_frag[(index)j1] == ifrag
		   tppqq[j1,i1,i,j]      = Vxiij[mu,i1,i,j]*ca[mu,j1] 
		   PUT Viiij[j1,i1,i,j] += tppqq[j1,i1,i,j] 
	     ENDDO j1  

	  ENDDO mu 

      ENDDO j 
      ENDDO i 
      ENDDO i1  
      ENDPARDO ifrag, jfrag 
      
      print "Fone fourth stage of transformation" 

      sip_barrier 

# ---------------------------------------------------------------------------- 
#     Compute E^(20) on all dimers  
# ---------------------------------------------------------------------------- 
      PARDO ifrag,jfrag
      where (int)elst_dist[ifrag,jfrag] == ifrag
        icount = (scalar)ifrag
        jcount = (scalar)jfrag

#
      DO a 
      where (int)SwVirtA_frag[(index)a] == ifrag
      DO i 
      where (int)SwOccA_frag[(index)i] == ifrag
      DO b 
      where (int)SwVirtA_frag[(index)b] == jfrag
      DO j 
      where (int)SwOccA_frag[(index)j] == jfrag
         
	if icount != jcount 

	      GET                         Vaibj[a,i,b,j]  
	      tppqq[a,i,b,j]            = Vaibj[a,i,b,j] 
	      t1ppqq[a,i,b,j]           = Vaibj[a,i,b,j] 
	      execute energy_denominator_rhf  tppqq[a,i,b,j] fock_a  
	      etemp                     = tppqq[a,i,b,j]*t1ppqq[a,i,b,j]  
	      etemp                    *= 4.0 
	      t20disp[ifrag,jfrag]      = etemp 
	      PUT e20disp[ifrag,jfrag] += t20disp[ifrag,jfrag] 

	endif # icount != jcount 

	if icount == jcount 

	      GET                         Vaibj[a,i,b,j]  
	      GET                         Vaibj[a,j,b,i]  
	      tppqq[a,i,b,j]            = Vaibj[a,i,b,j] 
	      t2ppqq[a,i,b,j]           = Vaibj[a,i,b,j] 
	      t3ppqq[a,j,b,i]           = Vaibj[a,j,b,i] 
	      t1ppqq[a,i,b,j]           = t3ppqq[a,j,b,i] 
	      tppqq[a,i,b,j]           *= 2.0  
	      tppqq[a,i,b,j]           -= t1ppqq[a,i,b,j]   
	      execute energy_denominator_rhf  t2ppqq[a,i,b,j] fock_a  
	      etemp                     = tppqq[a,i,b,j]*t2ppqq[a,i,b,j]  
	     #print_scalar etemp 
	      t20disp[ifrag,jfrag]      = etemp 
	      PUT e20disp[ifrag,jfrag] += t20disp[ifrag,jfrag] 

	endif # icount != jcount 

      ENDDO j 
      ENDDO b 
      ENDDO i 
      ENDDO a 

      ENDPARDO ifrag,jfrag 

      sip_barrier 


    execute get_my_rank rank
    if rank == 0.0
    do ifrag
    do jfrag
    where (int)elst_dist[ifrag,jfrag] == ifrag
       allocate contiguous final_e20disp[ifrag:ifrag,jfrag:jfrag]
       GET e20disp[ifrag,jfrag] 
       final_e20disp[ifrag:ifrag,jfrag:jfrag] = e20disp[ifrag,jfrag]
       print final_e20disp[ifrag:ifrag,jfrag:jfrag]
       deallocate contiguous final_e20disp[ifrag:ifrag,jfrag:jfrag]
    enddo jfrag
    enddo ifrag
    endif
#
      ENDPROC FRAG_TRAN    

      PROC IGUESS   
#     ----------- 
#
#     Get memory requirements from integral calculation 
#     ------------------------------------------------- 
      print "Starting scratch memory calculation" 
      imax = 0.0  
      zmax = 0.0  
      execute compute_int_scratchmem_lowmem zmax imax 
      sip_barrier 
      print "Done computing scratch memory" 
#
      sip_barrier 
      allocate contiguous scr_1[1:max_aoseg,1:max_aoseg]
      allocate contiguous scr_2[1:max_aoseg,1:max_aoseg]
      allocate contiguous scr_3[1:max_aoseg,1:max_aoseg]
      allocate contiguous scr_4[1:max_aoseg,1:max_aoseg]
      allocate contiguous scr_5[1:max_aoseg,1:max_aoseg]
      sip_barrier 

    PARDO katom  
	icount = (scalar)katom

#	print icount # etemp 

	print "Starting computing fragment scf" 
	execute scf_atom_lowmem icount scr_1[1:max_aoseg,1:max_aoseg] scr_2[1:max_aoseg,1:max_aoseg] scr_3[1:max_aoseg,1:max_aoseg] scr_4[1:max_aoseg,1:max_aoseg]
	print "Done computing fragment scf" 
#
# Nowput the coefficients and fock matrices into the full distributed arrays 

	stype = 1.0 # HF coefficients  
	DO mu
	 x1[mu] = wAO_frag[mu]
	 execute return_sval x1[mu]  m
	 if m == icount
	DO a
	 xa[a]      = wVirtA_frag[a]
	 execute return_sval xa[a]  l
	 if l == icount
	    txp[mu,a]      = 0.0  
	    execute place_scratch txp[mu,a]  scr_1[1:max_aoseg,1:max_aoseg] stype icount 
	    PUT DCa[mu,a] += txp[mu,a]
	 endif
	ENDDO a
	DO i
	 xi[i]      = wOccA_frag[i]
	 execute return_sval xi[i]  s
	 if s == icount
	    txp[mu,i]      = 0.0  
	    execute place_scratch txp[mu,i]  scr_1[1:max_aoseg,1:max_aoseg] stype icount  
	    PUT DCa[mu,i] += txp[mu,i]
	 endif
	ENDDO i
	 endif
	ENDDO mu
	print "Done placing coefficients"

	stype = 2.0 # Fock matrix  
	DO a   
	 xa[a]      = wVirtA_frag[a]
	 execute return_sval xa[a]  l   
	 if l == icount 
	DO a1
	 xa1[a1]      = wVirtA_frag[a1]
	 execute return_sval xa1[a1]  m   
	 if m == icount 
	    tpp[a,a1]          = 0.0  
	    execute place_scratch tpp[a,a1]  scr_3[1:max_aoseg,1:max_aoseg] stype icount 
	    PUT Dfock_a[a,a1] += tpp[a,a1] 
	 endif 
	ENDDO a1
	DO i1
	 xi1[i1]      = wOccA_frag[i1]
	 execute return_sval xi1[i1]  m   
	 if m == icount 
	    tpp[a,i1]          = 0.0  
	    execute place_scratch tpp[a,i1]  scr_3[1:max_aoseg,1:max_aoseg] stype icount 
	    PUT Dfock_a[a,i1] += tpp[a,i1] 
	 endif 
	ENDDO i1
	 endif 
	ENDDO a   

	DO i   
	 xi[i]      = wOccA_frag[i]
	 execute return_sval xi[i]  l   
	 if l == icount 
	DO i1
	 xi1[i1]      = wOccA_frag[i1]
	 execute return_sval xi1[i1]  m
	 if m == icount
	    tpp[i,i1]          = 0.0  
	    execute place_scratch tpp[i,i1]  scr_3[1:max_aoseg,1:max_aoseg] stype icount 
	    PUT Dfock_a[i,i1] += tpp[i,i1]
	 endif
	ENDDO i1
	DO a1
	 xa1[a1]      = wVirtA_frag[a1]
	 execute return_sval xa1[a1]  m
	 if m == icount
	    tpp[i,a1]          = 0.0  
	    execute place_scratch tpp[i,a1]  scr_3[1:max_aoseg,1:max_aoseg] stype icount 
	    PUT Dfock_a[i,a1] += tpp[i,a1]
	 endif
	ENDDO a1
	 endif
	ENDDO i

#                 DO p 
#                 DO p1 
#                    tpp(p,p1) = 0.0 
#                    execute place_scratch tpp(p,p1)  scratch3 stype  
#                    PUT Dfock_a(p,p1) += tpp(p,p1)
#                 ENDDO p1 
#                 ENDDO p 
	print "Done placing fock_matrix"


    ENDPARDO katom   
      sip_barrier 
      deallocate contiguous scr_1[1:max_aoseg,1:max_aoseg]
      deallocate contiguous scr_2[1:max_aoseg,1:max_aoseg]
      deallocate contiguous scr_3[1:max_aoseg,1:max_aoseg]
      deallocate contiguous scr_4[1:max_aoseg,1:max_aoseg]
      deallocate contiguous scr_5[1:max_aoseg,1:max_aoseg]
      sip_barrier 

      print "Placing HF coefficients on nodes"
      DO p 
         Sx3[p] = 1.0 
      ENDDO p  

      DO p 
         t3[p] = 0.0 
      DO p1 
         if p == p1 
            GET Dfock_a[p,p1] 
#        execute print_block Dfock_a(p,p1)  
            t3_1[p] = Dfock_a[p,p1]*Sx3[p1] 
            t3[p] += t3_1[p] 
         endif 
      ENDDO p1 
         fock_a[p] = t3[p] 
      ENDDO p 

      DO p 
         t3[p] = fock_a[p] 
      ENDDO p 

      icount = 0.0
      DO ifrag
         icount   += 1.0

        #print_scalar icount

         DO mu
            x1[mu]     = wAO_frag[mu]
            execute return_sval x1[mu]  m
            if m == icount
            DO a 
               xa[a]     = wVirtA_frag[a]
               execute return_sval xa[a]  n
               if n == icount
                  GET        Dca[mu,a] 
                  ca[mu,a] = Dca[mu,a] 
               endif # n 
            ENDDO a 
            DO i 
               xi[i]     = wOccA_frag[i]
               execute return_sval xi[i]  n
               if n == icount
                  GET        Dca[mu,i] 
                  ca[mu,i] = Dca[mu,i] 
               endif # n 
            ENDDO i 
           endif # m
         ENDDO mu  

      ENDDO ifrag

      sip_barrier
#
      ENDPROC IGUESS   
#
# ---------------------------------------------------------------------------- 
#
#
# ---------------------------------------------------------------------------- 
#
      PROC FORM_ELSTPOT 
#     ----------------- 
#
#     Form the contribution /sum_C V(a,i,C,C) 
#
      sip_barrier 
#
# Form the contribution from /sum_C Hai(C) 
#

      PARDO ifrag   
         icount = (scalar)ifrag
         DO mu 
	 where (int)SwAO_frag[(index)mu] == ifrag
         DO nu 
	 where (int)SwAO_frag[(index)nu] == ifrag

               txx[mu,nu] = 0.0 
               execute return_h1frag txx[mu,nu] icount  
# Reform wC_ao for use in alternative exchange energy 
               PUT wC_ao[mu,nu]  = txx[mu,nu] 

               do b 
	       where (int)SwVirtA_frag[(index)b] == ifrag
                     tbx[b,nu] = txx[mu,nu]*ca[mu,b] 

                     do j 
	             where (int)SwOccA_frag[(index)j] == ifrag
                           tbj[b,j]     = tbx[b,nu]*ca[nu,j] 
                           PUT wC[b,j] += tbj[b,j] 
                           tpp[j,b]     = tbj[b,j] 
                           PUT wC[j,b] += tpp[j,b] 
                     enddo j 

                     do b1  
		     where (int)SwVirtA_frag[(index)b1] == ifrag
                           tpp[b,b1] = tbx[b,nu]*ca[nu,b1] 
                           t1pp[b,b1] = tpp[b,b1] 
                           PUT wC[b,b1] += tpp[b,b1] 
                     enddo b1  

               enddo b 

               do i 
	       where (int)SwOccA_frag[(index)i] == ifrag

                     tpx[i,nu] = txx[mu,nu]*ca[mu,i] 

                     do j 
		     where (int)SwOccA_frag[(index)j] == ifrag
                           t1pp[i,j] = tpx[i,nu]*ca[nu,j] 
                           tpp[i,j] = t1pp[i,j] 
                           PUT wC[i,j] += t1pp[i,j] 
                           PUT VE[i,j] += t1pp[i,j] 
                     enddo j 

               enddo i 

      ENDDO nu 
      ENDDO mu 

      ENDPARDO ifrag 
      print "Done first pardo in form_e1pol" 

      PARDO ifrag,jfrag
      where ifrag != jfrag
      where (int)elst_dist[ifrag,jfrag] == ifrag

         icount = (scalar)ifrag
         jcount = (scalar)jfrag

            DO mu 
	    where (int)SwAO_frag[(index)mu] == ifrag
            DO nu 
	    where (int)SwAO_frag[(index)nu] == jfrag

                  txx[mu,nu] = 0.0 
                  execute return_h1frag txx[mu,nu] icount  

               do i 
	       where (int)SwOccA_frag[(index)i] == ifrag

                     tpx[i,nu] = txx[mu,nu]*ca[mu,i] 

                     do j 
	             where (int)SwOccA_frag[(index)j] == jfrag
                           t1pp[i,j] = tpx[i,nu]*ca[nu,j] 
                           PUT VE_x[i,j] += t1pp[i,j] 
                     enddo j 

               enddo i 

         ENDDO nu 
         ENDDO mu 

      ENDPARDO ifrag,jfrag
      print "Done second pardo in form_e1pol" 

      sip_barrier 
#
      ENDPROC FORM_ELSTPOT 
# 
# -----------------------------------------------------------------------------
# 
      PROC OVERLAP_TRANS 
#     ------------------ 
      PARDO ifrag, jfrag 
         t20disp[ifrag,jfrag]    = 0.0  
         PUT e10pol[ifrag,jfrag] = t20disp[ifrag,jfrag] 
      ENDPARDO ifrag, jfrag 
      sip_barrier

      PARDO ifrag,jfrag
      where ifrag != jfrag
	 icount = (scalar)ifrag
	 jcount = (scalar)jfrag
#
         DO mu
	 where (int)SwAO_frag[(index)mu] == ifrag
         DO nu
	 where (int)SwAO_frag[(index)nu] == jfrag

	      execute return_ovl txx[mu,nu]  
	      PUT oed_ovl[mu,nu] = txx[mu,nu] 

         ENDDO nu
         ENDDO mu

      ENDPARDO ifrag,jfrag
      sip_barrier 
# 
      PARDO ifrag,jfrag
      where ifrag != jfrag
	 icount = (scalar)ifrag
	 jcount = (scalar)jfrag
#
         DO mu
	 where (int)SwAO_frag[(index)mu] == ifrag
         DO nu
	 where (int)SwAO_frag[(index)nu] == jfrag

	      GET oed_ovl[mu,nu] 

              DO a
	      where (int)SwVirtA_frag[(index)a] == jfrag
              DO i
	      where (int)SwOccA_frag[(index)i] ==ifrag

                    txp[mu,a] = oed_ovl[mu,nu]*ca[nu,a]  
                    tpp[i,a]  = txp[mu,a]*ca[mu,i] 
                    PUT SOVL[i,a] += tpp[i,a] 

              ENDDO i
              ENDDO a

              DO i1  
	      where (int)SwOccA_frag[(index)i1] == jfrag
              DO i
	      where (int)SwOccA_frag[(index)i] == ifrag

                    txp[mu,i1] = oed_ovl[mu,nu]*ca[nu,i1]  
                    tpp[i,i1]  = txp[mu,i1]*ca[mu,i] 
                    PUT SOVL[i,i1] += tpp[i,i1] 

              ENDDO i
              ENDDO i1  

              DO a1  
	      where (int)SwVirtA_frag[(index)a1] == jfrag
              DO a
	      where (int)SwVirtA_frag[(index)a] == ifrag

                    txp[mu,a1] = oed_ovl[mu,nu]*ca[nu,a1]  
                    tpp[a,a1]  = txp[mu,a1]*ca[mu,a] 
                    PUT SOVL[a,a1] += tpp[a,a1] 

              ENDDO a
              ENDDO a1  

         ENDDO nu
         ENDDO mu

      ENDPARDO ifrag,jfrag
      sip_barrier

# 
      PARDO ifrag,jfrag
      where ifrag != jfrag
	 icount = (scalar)ifrag
	 jcount = (scalar)jfrag
#
         esum = 0.0 
         DO a
	 where (int)SwVirtA_frag[(index)a] == ifrag
         DO i
	 where (int)SwOccA_frag[(index)i] == ifrag

               GET wC[a,i] 

               DO j
	       where (int)SwOccA_frag[(index)j] == jfrag

                     GET SOVL[j,a] 
                     GET SOVL[i,j] 

                     tpp[i,a] = SOVL[i,j]*SOVL[j,a] 
                     etemp = wC[a,i]*tpp[i,a] 
                     etemp*= -2.0  
                     esum += etemp 

               ENDDO j
         ENDDO i
         ENDDO a

         if (int)elst_dist[ifrag,jfrag] == ifrag
#
         DO a
	 where (int)SwVirtA_frag[(index)a] == ifrag
         DO i
	 where (int)SwOccA_frag[(index)i] == ifrag

               DO b
	       where (int)SwVirtA_frag[(index)b] == jfrag
               DO j
	       where (int)SwOccA_frag[(index)i] == jfrag
                     GET Vaibj[a,i,b,j] 
                     GET SOVL[j,a] 
                     GET SOVL[i,b] 
                     tpp[a,j] = Vaibj[a,i,b,j]*SOVL[i,b]  
                     etemp = SOVL[j,a]*tpp[a,j] 

                     etemp*= -1.0  # Not 2 to avoid overcounting ??? 
                     esum += etemp 
               ENDDO j
               ENDDO b
         ENDDO i
         ENDDO a
         endif # pair_flag > zero  

         t20disp[ifrag,jfrag]      = esum   
         PUT e10exch[ifrag,jfrag] += t20disp[ifrag,jfrag] 

      ENDPARDO ifrag,jfrag

# Now compute the first-order polarization energy 
#
      PARDO ifrag,jfrag
      where ifrag != jfrag
      where (int)elst_dist[ifrag,jfrag] == ifrag
	 icount = (scalar)ifrag
	 jcount = (scalar)jfrag

         esum = 0.0 

         DO i
	 where (int)SwOccA_frag[(index)i] == ifrag
         DO i1 
         where i == i1 
               DO j
	       where (int)SwOccA_frag[(index)j] == jfrag
               DO j1 
               where j == j1 
                     GET Viijj[i,i1,j,j1] 
                     tpppp[i,i1,j,j1] = Viijj[i,i1,j,j1]
                     execute return_diagonal tpppp[i,i1,j,j1] etemp  
                     etemp*= 2.0  
                     esum += etemp 
               ENDDO j1
               ENDDO j 
         ENDDO i1 
         ENDDO i

         t20disp[ifrag,jfrag]     = esum  
         PUT e10pol[ifrag,jfrag] += t20disp[ifrag,jfrag] 

      ENDPARDO ifrag, jfrag
# 
      PARDO ifrag,jfrag
      where ifrag == jfrag
	 icount = (scalar)ifrag
	 jcount = (scalar)jfrag
# 
         esum = 0.0 
         DO i
	 where (int)SwOccA_frag[(index)i] == ifrag
         DO i1
         where i == i1 
               GET         VE[i,i1] 
               tpp[i,i1] = VE[i,i1] 
               execute return_diagonal tpp[i,i1] etemp  
               etemp*= 2.0  
               esum += etemp 
         ENDDO i1 
         ENDDO i

         t20disp[ifrag,jfrag]     = esum  
         PUT e10pol[ifrag,jfrag] += t20disp[ifrag,jfrag] 

      ENDPARDO ifrag, jfrag
      sip_barrier

      e10pol_at = 0.0
      esum = 0.0 
      sip_barrier
      pardo ifrag,jfrag
         GET e10pol[ifrag,jfrag] 
         etemp = e10pol[ifrag,jfrag] 
         esum += etemp 
      endpardo ifrag,jfrag
      sip_barrier
      collective e10pol_at += esum 
# this is the total systems e10 polarization energy
      e10pol_at += nn_rep
      print e10pol_at
#
      execute get_my_rank rank
      if rank == 0.0
      do ifrag
      do jfrag
      where jfrag >= ifrag
      where (int)elst_dist[ifrag,jfrag] == ifrag
	  icount = (scalar)ifrag
	  jcount = (scalar)jfrag
      
      # nn rep between fragments
	  execute compute_pair_nn icount jcount nn_rep
	  allocate contiguous final_e10pol[ifrag:ifrag,jfrag:jfrag]
	  GET                 e10pol[ifrag,jfrag] 
	  Tij[ifrag,jfrag] = e10pol[ifrag,jfrag]
      # factor of two for upper triangle
	  if jfrag > ifrag
	      Tij[ifrag,jfrag] *= 2.0 
	  endif
	  T1ij[ifrag,jfrag] = nn_rep
	  Tij[ifrag,jfrag] += T1ij[ifrag,jfrag]
	  final_e10pol[ifrag:ifrag,jfrag:jfrag] = Tij[ifrag,jfrag]
#print pair polarization energies
	  print final_e10pol[ifrag:ifrag,jfrag:jfrag]
	  deallocate contiguous final_e10pol[ifrag:ifrag,jfrag:jfrag]
      enddo jfrag
      enddo ifrag
      endif
      sip_barrier

# 
      ENDPROC OVERLAP_TRANS 
#
# -----------------------------------------------------------------------------
# 
      PROC EXCHANGE_ALT
#     ----------------- 

      e1x_at = 0.0  
      esum = 0.0 

      PARDO ifrag, jfrag  
	  put e10exch[ifrag,jfrag] = 0.0
      endPARDO ifrag, jfrag  
      sip_barrier 


      PARDO ifrag, jfrag  
      where ifrag != jfrag
      where (int)elst_dist[ifrag,jfrag] == ifrag
	 icount = (scalar)ifrag
	 jcount = (scalar)jfrag

# 1st-term 
         DO i
	 where (int)SwOccA_frag[(index)i] == ifrag
         DO i1 
	 where i==i1

         DO j
	 where (int)SwOccA_frag[(index)j] == jfrag
         DO j1 
         where j == j1 
                  GET                Vjiij[j1,i1,i,j] 
                  tpppp[i,i1,j,j1] = Vjiij[j1,i1,i,j] 
                  etemp = 0.0 
                  execute return_diagonal tpppp[i,i1,j,j1] etemp
                  etemp *= -1.0 
                  esum += etemp 
         ENDDO j1 
         ENDDO j 

         ENDDO i1 
         ENDDO i 

      #print esum  

# second-term 

         DO j
	 where (int)SwOccA_frag[(index)j] == jfrag
         DO i2 
	 where (int)SwOccA_frag[(index)i2] == ifrag

	      GET SOVL[j,i2] 
	      tpp[i2,j] = 0.0 

	     DO i
	     where (int)SwOccA_frag[(index)i] == ifrag
	     DO i1 
	     where i == i1 
		  GET                 Viiij[i,i1,i2,j] 
		  GET                 Viiij[i2,i1,i,j] 
		  tpppp[i2,j,i,i1]  = Viiij[i,i1,i2,j] 
		  tpppp[i2,j,i,i1] *= 2.0  
		  t1pppp[i2,j,i,i1] = Viiij[i2,i1,i,j]   
		  tpppp[i2,j,i,i1] -= t1pppp[i2,j,i,i1] 

		  Ipp[i,i1] = 1.0 
		  execute return_diagonal Ipp[i,i1] etemp  

		  t1pp[i2,j] = tpppp[i2,j,i,i1] * Ipp[i,i1] 
		  tpp[i2,j] += t1pp[i2,j] 

	     ENDDO i1 
	     ENDDO i 

	      GET          VE_x[j,i2] 
	      GET          VE_x[i2,j] 
	      t1pp[i2,j] = VE_x[j,i2] 
	      t1pp[i2,j]+= VE_x[i2,j] 
	      t1pp[i2,j]*= 0.5  
	      tpp[i2,j] += t1pp[i2,j] 
	      etemp = SOVL[j,i2]*tpp[i2,j] 
	      etemp *= -2.0 
	      esum += etemp 

         ENDDO i2  
         ENDDO j 

# Third-term 

         DO j
	 where (int)SwOccA_frag[(index)j] == jfrag
         DO j1  
	 where (int)SwOccA_frag[(index)j1] == jfrag

	      tpp[j1,j] = 0.0 
	      t3pp[j,j1] = 0.0 

	     DO i
	     where (int)SwOccA_frag[(index)i] == ifrag
	     DO i1 
	     where i == i1 
		      GET Viijj[j1,j,i,i1] 
		      tpp[i,i1] = 2.0 
		      execute return_diagonal tpp[i,i1] etemp  
		      t2pp[j1,j] = Viijj[j1,j,i,i1]*tpp[i,i1] 
		      tpp[j1,j] += t2pp[j1,j] 
	     ENDDO i1 
	     ENDDO i 

	     DO i2 
	     where (int)SwOccA_frag[(index)i2] == ifrag

                  GET SOVL[j,i2] 
                  GET SOVL[i2,j1] 

                  t1pp[j,j1] = SOVL[j,i2]*SOVL[i2,j1] 
                  t3pp[j,j1] += t1pp[j,j1] 

	     ENDDO i2 

	      etemp = t3pp[j,j1]*tpp[j1,j] 
	      etemp *= 2.0 
	      esum += etemp 

         ENDDO j1 
         ENDDO j 

      #print esum 

# Fourth-term 

         DO j
	 where (int)SwOccA_frag[(index)j] == jfrag
         DO i1 
	 where (int)SwOccA_frag[(index)i1] == ifrag

                  tpp[i1,j] = 0.0 
                  GET         SOVL[j,i1] 

               DO i
	       where (int)SwOccA_frag[(index)i] == ifrag

                     DO j1  
	             where (int)SwOccA_frag[(index)j1] == jfrag
                           GET         Viijj[i1,i,j1,j] 
                           GET         SOVL[i,j1] 
                           t1pp[i1,j] = Viijj[i1,i,j1,j]*SOVL[i,j1] 
                           tpp[i1,j] += t1pp[i1,j] 
                     ENDDO j1 
               ENDDO i 

               etemp     = tpp[i1,j]*SOVL[j,i1]
               etemp    *= -1.0 
               esum     += etemp 

         ENDDO i1 
         ENDDO j 

         #print esum 


         DO i
	 where (int)SwOccA_frag[(index)i] == ifrag
         DO i1 
	 where (int)SwOccA_frag[(index)i1] == ifrag

               DO j
	       where (int)SwOccA_frag[(index)j] == jfrag
		       GET         VE[i1,i] 
		       GET         SOVL[j,i1] 
		       GET         SOVL[i,j] 
		       tpp[i1,j] = VE[i1,i]*SOVL[i,j] 
		       etemp     = tpp[i1,j]*SOVL[j,i1]
		       etemp    *=  2.0  
		       esum     += etemp 
               ENDDO j 

         ENDDO i1 
         ENDDO i 

	 put e10exch[ifrag,jfrag] += esum
# 
      ENDPARDO ifrag, jfrag  

      sip_barrier
      collective e1x_at += esum   
      print e1x_at 
# 
      execute get_my_rank rank
      if rank == 0.0
	 do ifrag
         do jfrag
	 where ifrag != jfrag
         where (int)elst_dist[ifrag,jfrag] == ifrag
	     icount = (scalar)ifrag
	     jcount = (scalar)jfrag

	     allocate contiguous final_e10exch[ifrag:ifrag,jfrag:jfrag]
	     get e10exch[ifrag,jfrag]
	     final_e10exch[ifrag:ifrag,jfrag:jfrag] = e10exch[ifrag,jfrag]
	     print final_e10exch[ifrag:ifrag,jfrag:jfrag]
	     deallocate contiguous final_e10exch[ifrag:ifrag,jfrag:jfrag]

	 enddo jfrag
	 enddo ifrag
      endif
   
      ENDPROC EXCHANGE_ALT
#
# -----------------------------------------------------------------------------
# 
      PROC FORM_T10
#     ------------- 
      esum = 0.0 
      et1_correction = 0.0  

      PARDO ifrag
	icount = (scalar)ifrag

        DO a
	where (int)SwVirtA_frag[(index)a] == ifrag
        DO i 
	where (int)SwOccA_frag[(index)i] == ifrag
# having gone through E1lst we now have the full contribution from wC as per rybak.
              GET        wC[a,i] 
              tai[a,i] = wC[a,i] 
              execute energy_denominator_rhf tai[a,i] fock_a  
              PUT t1old[a,i] += tai[a,i] 
        ENDDO i 
        ENDDO a 

      ENDPARDO ifrag 
      sip_barrier
      print "Done forming initial t1" 

# Compute initial singles energy of clusters  

      PARDO ifrag 
      icount = (scalar)ifrag
#
      esum = 0.0 

      DO a
      where (int)SwVirtA_frag[(index)a] == ifrag
      DO i 
      where (int)SwOccA_frag[(index)i] == ifrag

            GET     wC[a,i] 
            GET     t1old[a,i] 
            etemp = t1old[a,i]*wC[a,i]  
            etemp*= 2.0  
            esum += etemp 

      ENDDO i 
      ENDDO a 
 
       PUT e10c[ifrag]     = esum
       PUT e10c_old[ifrag] = esum
       esum = 10.0
       PUT e1error[ifrag]  = esum
# 
      ENDPARDO ifrag 
      sip_barrier
#
      print "Initial singles energies" 
      execute get_my_rank rank
      if rank == 0.0
      DO ifrag  
         allocate contiguous initial_e10c[ifrag:ifrag]
         GET e10c[ifrag] 
	 initial_e10c[ifrag:ifrag] = e10c[ifrag]
	 print initial_e10c[ifrag:ifrag]
         deallocate contiguous initial_e10c[ifrag:ifrag]
      ENDDO ifrag 
      endif

      ENDPROC FORM_T10
#     ---------------- 
#
# -----------------------------------------------------------------------------
# 
      PROC FORM_T1
#     ------------ 
# 

      print "Starting t1 iterations" 
      sip_barrier 

      DO kiter 
      print kiter

      PARDO ifrag 
         icount = (scalar)ifrag

         GET     e1error[ifrag] 
         etemp = e1error[ifrag] 
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 

         DO a 
	 where (int)SwVirtA_frag[(index)a] == ifrag
         DO i 
	 where (int)SwOccA_frag[(index)i] == ifrag

               PUT x1new[a,i] = 0.0

         ENDDO i 
         ENDDO a  
      ENDIF
      ENDPARDO ifrag
      server_barrier

      PARDO ifrag 
         icount = (scalar)ifrag

         GET     e1error[ifrag] 
         etemp = e1error[ifrag] 
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 

         DO a 
	 where (int)SwVirtA_frag[(index)a] == ifrag
         DO i 
	 where (int)SwOccA_frag[(index)i] == ifrag

               GET        wC[a,i] 
               tai[a,i] = wC[a,i] 
               PUT x1new[a,i] += tai[a,i] 

         ENDDO i 
         ENDDO a 

         DO a  
	 where (int)SwVirtA_frag[(index)a] == ifrag
         DO i  
	 where (int)SwOccA_frag[(index)i] == ifrag

            t1ai[a,i] = 0.0 

         DO a1  
	 where (int)SwVirtA_frag[(index)a1] == ifrag
         DO i1  
	 where (int)SwOccA_frag[(index)i1] == ifrag

               GET Viabj[i,a,a1,i1]  
               GET Vaajj[a,a1,i,i1] 
               GET     t1old[a1,i1] 

               tppqq[i,a,a1,i1]  = Viabj[i,a,a1,i1] 

               t2ppqq[a,a1,i,i1] = Vaajj[a,a1,i,i1] 
               t1ppqq[i,a,a1,i1] = t2ppqq[a,a1,i,i1] 

               tppqq[i,a,a1,i1] *= 2.0  
               tppqq[i,a,a1,i1] -= t1ppqq[i,a,a1,i1]

               tai[a,i] = tppqq[i,a,a1,i1]*t1old[a1,i1]
               t1ai[a,i] += tai[a,i]  

        ENDDO i1  
        ENDDO a1  

            PUT x1new[a,i] += t1ai[a,i] 

        ENDDO i  
        ENDDO a  
      ENDIF # etemp > cc_conv 

      ENDPARDO ifrag 
# 

      PARDO ifrag,jfrag
      where ifrag != jfrag
      where (int)elst_dist[ifrag,jfrag] == ifrag
         icount = (scalar)ifrag
            jcount = (scalar)jfrag

         GET     e1error[ifrag] 
         etemp = e1error[ifrag] 
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 

         DO a  
	 where (int)SwVirtA_frag[(index)a] == ifrag
         DO i  
	 where (int)SwOccA_frag[(index)i] == ifrag
            t1ai[a,i] = 0.0 
         DO a1
	 where (int)SwVirtA_frag[(index)a1] == jfrag
         DO i1
	 where (int)SwOccA_frag[(index)i1] == jfrag

               GET Viabj[i,a,a1,i1]  
               GET t1old[a1,i1] 

               tppqq[i,a,a1,i1]  = Viabj[i,a,a1,i1] 
               tppqq[i,a,a1,i1] *= 2.0  
               tai[a,i] = tppqq[i,a,a1,i1]*t1old[a1,i1]
               t1ai[a,i] += tai[a,i] 

        ENDDO i1  
        ENDDO a1   

            PUT x1new[a,i] += t1ai[a,i] 

        ENDDO i  
        ENDDO a  

      ENDIF # etemp > cc_conv 

      ENDPARDO ifrag, jfrag
      sip_barrier 

      PARDO ifrag 
         icount = (scalar)ifrag

        et1_correction = 0.0 
        esum = 0.0 
# 
         DO a  
	 where (int)SwVirtA_frag[(index)a] == ifrag
         DO i  
	 where (int)SwOccA_frag[(index)i] == ifrag

               GET        x1new[a,i] 
               GET        wC[a,i] 
               tai[a,i] = x1new[a,i] 
               execute energy_denominator_rhf tai[a,i] fock_a  
               PUT t1old[a,i] = tai[a,i] 

               etemp = tai[a,i]*wC[a,i]  
               etemp*= 2.0  
               esum += etemp 

        ENDDO i 
        ENDDO a 

        PUT e10c[ifrag] = esum

      ENDPARDO ifrag 
      sip_barrier 


      PARDO ifrag 
         GET                   e10c[ifrag] 
         GET                   e10c_old[ifrag] 
         tp[ifrag]           = e10c_old[ifrag]  
         tp[ifrag]          -= e10c[ifrag]  
         PUT e1error[ifrag]  = tp[ifrag] 
         PUT e10c_old[ifrag] = e10c[ifrag] 
      ENDPARDO ifrag 
      sip_barrier 

      ENDDO kiter 
#
# Print singles energies 
      print "Done singles energy" 
      singles = 0.0
      sip_barrier 

      DO ifrag  
         allocate contiguous final_e10c[ifrag:ifrag]
         GET e10c[ifrag] 
         final_e10c[ifrag:ifrag] = e10c[ifrag] 
	 print final_e10c[ifrag:ifrag]
         etemp = e10c[ifrag] 
         singles += etemp
         deallocate contiguous final_e10c[ifrag:ifrag]
      ENDDO ifrag 
      sip_barrier 

# 
      ENDPROC FORM_T1 
#     --------------- 
#
# -----------------------------------------------------------------------------
# 
      PROC FORM_T2_0GUESS 
#     ------------------- 

      sip_barrier 

# -----------------------------------------------------------------------------
# First form the initial guess to Taiai 
# -----------------------------------------------------------------------------

      esum = 0.0 

      PARDO ifrag 
	  DO a
	  where (int)SwVirtA_frag[(index)a] == ifrag
	  DO i  
	  where (int)SwOccA_frag[(index)i] == ifrag
	  DO a1  
	  where (int)SwVirtA_frag[(index)a1] == ifrag
	  DO i1  
	  where (int)SwOccA_frag[(index)i1] == ifrag

	     GET                             Vaibj[a,i,a1,i1]  
	     tppqq[a,i,a1,i1]              = Vaibj[a,i,a1,i1] 
	     execute energy_denominator_rhf  tppqq[a,i,a1,i1] fock_a  
	     PUT T2old[a,i,a1,i1]         += tppqq[a,i,a1,i1] 

	  ENDDO i1  
	  ENDDO a1  
	  ENDDO i  
	  ENDDO a  
      ENDPARDO ifrag 
      server_barrier
      PARDO ifrag 
      esum = 0.0 
	  DO a
	  where (int)SwVirtA_frag[(index)a] == ifrag
	  DO i  
	  where (int)SwOccA_frag[(index)i] == ifrag
	  DO a1  
	  where (int)SwVirtA_frag[(index)a1] == ifrag
	  DO i1  
	  where (int)SwOccA_frag[(index)i1] == ifrag

		   GET                T2old[a,i,a1,i1] 
		   GET                Vaibj[a,i,a1,i1]  
		   GET                Vaibj[a,i1,a1,i]  

		   t1ppqq[a,i,a1,i1] = Vaibj[a,i,a1,i1]  
		   t3ppqq[a,i1,a1,i] = Vaibj[a,i1,a1,i]  
		   t2ppqq[a,i,a1,i1] = t3ppqq[a,i1,a1,i] 
		   t1ppqq[a,i,a1,i1]*= 2.0  
		   t1ppqq[a,i,a1,i1]-= t2ppqq[a,i,a1,i1] 

		   etemp = T2old[a,i,a1,i1]*t1ppqq[a,i,a1,i1] 
		   esum += etemp 

	  ENDDO i1  
	  ENDDO a1  
	  ENDDO i  
	  ENDDO a  

          PUT e20c[ifrag] = esum
      ENDPARDO ifrag 
       sip_barrier   

# -----------------------------------------------------------------------------
# Now form the initial guess to Taibj 
# -----------------------------------------------------------------------------

      PARDO ifrag, jfrag  
      where ifrag != jfrag
      where (int)elst_dist[ifrag,jfrag] == ifrag
         icount = (scalar)ifrag
         jcount = (scalar)jfrag
#
	  DO a
	  where (int)SwVirtA_frag[(index)a] == ifrag
	  DO i  
	  where (int)SwOccA_frag[(index)i] == ifrag
	  DO b
	  where (int)SwVirtA_frag[(index)b] == jfrag
	  DO j  
	  where (int)SwOccA_frag[(index)j] == jfrag

	     GET                             Vaibj[a,i,b,j]  
	     tppqq[a,i,b,j]                = Vaibj[a,i,b,j] 
	     execute energy_denominator_rhf  tppqq[a,i,b,j] fock_a  
	     PUT T2old[a,i,b,j]           += tppqq[a,i,b,j] 

# Add the experimental exchange term 
#        GET SOVL(j,a) 
#        GET SOVL(i,b) 
#        t1ppqq(a,i,b,j) = SOVL(j,a)^SOVL(i,b)  
#        t1ppqq(a,i,b,j)*= -1.0  
#        PUT T2old(a,i,b,j)           += t1ppqq(a,i,b,j) 

	  ENDDO j  
	  ENDDO b  
	  ENDDO i  
	  ENDDO a  

      ENDPARDO ifrag, jfrag  

      sip_barrier

      ENDPROC FORM_T2_0GUESS 
#     ---------------------- 
#
# -----------------------------------------------------------------------------
# 
      PROC FORM_T2_GUESS 
#     ------------------ 
# Zero out the T20aiai array at the beginning of the microiterations 
# This is the updated doubles V_X + H_0XY*T_XY

      PARDO ifrag, jfrag  
      where (int)elst_dist[ifrag,jfrag] == ifrag
         icount = (scalar)ifrag
         jcount = (scalar)jfrag
#
	  DO a
	  where (int)SwVirtA_frag[(index)a] == ifrag
	  DO i  
	  where (int)SwOccA_frag[(index)i] == ifrag
	  DO b
	  where (int)SwVirtA_frag[(index)b] == jfrag
	  DO j  
	  where (int)SwOccA_frag[(index)j] == jfrag

            PUT T20aiai[a,i,b,j] = 0.0

	  ENDDO j  
	  ENDDO b  
	  ENDDO i  
	  ENDDO a  
      ENDPARDO ifrag, jfrag  

      sip_barrier 

# -----------------------------------------------------------------------------
# First form the initial guess to Taiai 
# -----------------------------------------------------------------------------

      PARDO ifrag  
         icount = (scalar)ifrag

	  esum = 0.0 
#
	  DO a
	  where (int)SwVirtA_frag[(index)a] == ifrag
	  DO i  
	  where (int)SwOccA_frag[(index)i] == ifrag
	  DO a1  
	  where (int)SwVirtA_frag[(index)a1] == ifrag
	  DO i1  
	  where (int)SwOccA_frag[(index)i1] == ifrag

	     GET                Vaibj[a,i,a1,i1]  
	     xaiai[a,i,a1,i1] = 0.0  

	     DO jfrag 
	     where ifrag != jfrag
	     where (int)elst_dist[ifrag,jfrag] == ifrag
		jcount = (scalar)jfrag

		  DO b
		  where (int)SwVirtA_frag[(index)b] == jfrag
		  DO j  
		  where (int)SwOccA_frag[(index)j] == jfrag

		      GET                         Viabj[i1,a1,b,j] 
		      GET                         T2old[a,i,b,j] 

		      t3ppqq[b,j,a1,i1]         = Viabj[i1,a1,b,j]  
		      t1ppqq[a,i,a1,i1]         = T2old[a,i,b,j]*t3ppqq[b,j,a1,i1] 
		      xaiai[a,i,a1,i1]         += t1ppqq[a,i,a1,i1] 

		ENDDO j 
		ENDDO b 
	     ENDDO jfrag 

	     t1ppqq[a1,i1,a,i]     = xaiai[a,i,a1,i1] 
	     tppqq[a,i,a1,i1]      = xaiai[a,i,a1,i1] 
	     tppqq[a,i,a1,i1]     += Vaibj[a,i,a1,i1] 
	     t1ppqq[a1,i1,a,i]     = t1ppqq[a1,i1,a,i] 

	     PUT T20aiai[a,i,a1,i1]+= tppqq[a,i,a1,i1] 
	     PUT T20aiai[a1,i1,a,i]+= t1ppqq[a1,i1,a,i] 

	  ENDDO i1  
	  ENDDO a1  
	  ENDDO i  
	  ENDDO a  
      ENDPARDO ifrag 

#      server_barrier
#
#      PARDO ifrag  
#         icount = (scalar)ifrag
#
#	  esum = 0.0 
##
#
#	  DO a
#	  where (int)SwVirtA_frag[(index)a] == ifrag
#	  DO i  
#	  where (int)SwOccA_frag[(index)i] == ifrag
#	  DO a1  
#	  where (int)SwVirtA_frag[(index)a1] == ifrag
#	  DO i1  
#	  where (int)SwOccA_frag[(index)i1] == ifrag
#
#               GET                T20aiai[a,i,a1,i1] 
#               GET                Vaibj[a,i,a1,i1]  
#               GET                Vaibj[a,i1,a1,i]  
#
#               tppqq[a,i,a1,i1] = T20aiai[a,i,a1,i1] 
#
#               execute energy_denominator_rhf tppqq[a,i,a1,i1] fock_a  
#
#               t1ppqq[a,i,a1,i1] = Vaibj[a,i,a1,i1]  
#               t3ppqq[a,i1,a1,i] = Vaibj[a,i1,a1,i]  
#               t2ppqq[a,i,a1,i1]   = t3ppqq[a,i1,a1,i] 
#               t1ppqq[a,i,a1,i1]*= 2.0  
#               t1ppqq[a,i,a1,i1]-= t2ppqq[a,i,a1,i1] 
#
#               etemp = tppqq[a,i,a1,i1]*t1ppqq[a,i,a1,i1] 
#               esum += etemp 
#
#	  ENDDO i1  
#	  ENDDO a1  
#	  ENDDO i  
#	  ENDDO a  
## 
#      ENDPARDO ifrag 
#
#      sip_barrier

# -----------------------------------------------------------------------------
# Now form the initial guess to Taibj 
# -----------------------------------------------------------------------------

      PARDO ifrag, jfrag   
      where jfrag != ifrag 
      where (int)elst_dist[ifrag,jfrag] == ifrag
         icount = (scalar)ifrag
         jcount = (scalar)jfrag

	 DO a
	 where (int)SwVirtA_frag[(index)a] == ifrag
	 DO i  
	 where (int)SwOccA_frag[(index)i] == ifrag
	 DO b
	 where (int)SwVirtA_frag[(index)b] == jfrag
	 DO j  
	 where (int)SwOccA_frag[(index)j] == jfrag

	     GET                            Vaibj[a,i,b,j]  
	     t2ppqq[a,i,b,j]              = Vaibj[a,i,b,j]  
#
# Add the experimental exchange term 
#        GET SOVL(j,a) 
#        GET SOVL(i,b) 
#        t1ppqq(a,i,b,j)            = SOVL(j,a)^SOVL(i,b)  
#        t1ppqq(a,i,b,j)           *= -1.0  
#        execute energy_numerator_rhf t1ppqq(a,i,b,j) fock_a 
#        t2ppqq(a,i,b,j)           += t1ppqq(a,i,b,j) 

	     DO a1
	     where (int)SwVirtA_frag[(index)a1] == ifrag
	     DO i1  
	     where (int)SwOccA_frag[(index)i1] == ifrag

		  GET T2old[a,i,a1,i1] 
		  GET T2old[a,i1,a1,i] 
		  GET Viabj[i1,a1,b,j] 

		  tppqq[a,i,a1,i1]  = T2old[a,i,a1,i1] 
		  t1ppqq[a,i,a1,i1] = T2old[a,i1,a1,i] 
		  tppqq[a,i,a1,i1] *= 2.0  
		  tppqq[a,i,a1,i1] -= t1ppqq[a,i,a1,i1] 

		  taiai[a,i,b,j]    = tppqq[a,i,a1,i1]*Viabj[i1,a1,b,j] 
		  t2ppqq[a,i,b,j]  += taiai[a,i,b,j] 

	     ENDDO i1
	     ENDDO a1 

	     DO b1
	     where (int)SwVirtA_frag[(index)b1] == jfrag
	     DO j1
	     where (int)SwOccA_frag[(index)j1] == jfrag

		  GET T2old[b,j,b1,j1] 
		  GET T2old[b,j1,b1,j] 
		  GET Viabj[j1,b1,a,i] 

		  tppqq[b,j,b1,j1]  = T2old[b,j,b1,j1] 
		  t1ppqq[b,j,b1,j1] = T2old[b,j1,b1,j] 
		  tppqq[b,j,b1,j1] *= 2.0  
		  tppqq[b,j,b1,j1] -= t1ppqq[b,j,b1,j1] 

		  taiai[a,i,b,j]    = tppqq[b,j,b1,j1]*Viabj[j1,b1,a,i] 
		  t2ppqq[a,i,b,j]  += taiai[a,i,b,j] 

	     ENDDO j1
	     ENDDO b1 

	     PUT T20aiai[a,i,b,j]        += t2ppqq[a,i,b,j] 

	  ENDDO j  
	  ENDDO b  
	  ENDDO i  
	  ENDDO a  

      ENDPARDO ifrag, jfrag  

      sip_barrier

      ENDPROC FORM_T2_GUESS 
#     --------------------- 
# 
# -----------------------------------------------------------------------------
# 
      PROC FORM_T2_FRAGMENT_ITERS  
#     ---------------------------  
# 
# -----------------------------------------------------------------------------
#     Fragment only calculation  
# -----------------------------------------------------------------------------
      PARDO ifrag  
         PUT e20c_old[ifrag] = 0.0
         PUT e2error[ifrag]  = 1.0
      ENDPARDO ifrag  
      sip_barrier
#
      eold = 0.0
      print "Performing a fragment CCPT2 calc"
      DO kiter 
      print kiter
#
#
# -----------------------------------------------------------------------------
#     START OF FRAGMENT ITERATIONS 
# -----------------------------------------------------------------------------
      sip_barrier
      PARDO ifrag  
      icount = (scalar)ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         GET     e20c_old[ifrag] 
         e1old = e20c_old[ifrag] 
         do_iter = 1.0 
       
        et2_correction = 0.0 
        esum = 0.0  

	  DO a
	  where (int)SwVirtA_frag[(index)a] == ifrag
	  DO i  
	  where (int)SwOccA_frag[(index)i] == ifrag
	  DO a1  
	  where (int)SwVirtA_frag[(index)a1] == ifrag
	  DO i1  
	  where (int)SwOccA_frag[(index)i1] == ifrag

              GET                    T20aiai[a,i,a1,i1] 
              PUT T2new[a,i,a1,i1] = T20aiai[a,i,a1,i1] 

	  ENDDO i1  
	  ENDDO a1  
	  ENDDO i  
	  ENDDO a  
      ENDIF
      ENDPARDO ifrag  
      server_barrier
      PARDO ifrag  
      icount = (scalar)ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         GET     e20c_old[ifrag] 
         e1old = e20c_old[ifrag] 
         do_iter = 1.0 
       
        et2_correction = 0.0 
        esum = 0.0  

          DO mu
	  where (int)SwAO_frag[(index)mu] == ifrag
	  DO i  
	  where (int)SwOccA_frag[(index)i] == ifrag
          DO nu
	  where (int)SwAO_frag[(index)nu] == ifrag
	  DO i1
	  where (int)SwOccA_frag[(index)i1] == ifrag

              txpxq[mu,i,nu,i1]       = 0.0 
              PUT TAO_ab[mu,i,nu,i1]  = txpxq[mu,i,nu,i1] 
              PUT T2AO_ab[mu,i,nu,i1] = txpxq[mu,i,nu,i1] 

          ENDDO i1 
          ENDDO nu 
          ENDDO i
          ENDDO mu 
      ENDIF
      ENDPARDO ifrag  
      server_barrier
      PARDO ifrag  
      icount = (scalar)ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         GET     e20c_old[ifrag] 
         e1old = e20c_old[ifrag] 
         do_iter = 1.0 
       
        et2_correction = 0.0 
        esum = 0.0  

       
# Form backtransformed amplitudes 

	  DO mu
	  where (int)SwAO_frag[(index)mu] == ifrag
	  DO i  
	  where (int)SwOccA_frag[(index)i] == ifrag
	  DO a
	  where (int)SwVirtA_frag[(index)a] == ifrag
	  DO j  
	  where (int)SwOccA_frag[(index)j] == ifrag
#
	     taixj[a,i,mu,j] = 0.0

	      DO b
	      where (int)SwVirtA_frag[(index)b] == ifrag

		     GET                T2old[a,i,b,j] 
		     T1aixj[a,i,mu,j] = T2old[a,i,b,j]*ca[mu,b]
		     Taixj[a,i,mu,j] += T1aixj[a,i,mu,j]

	      ENDDO b

	      DO nu
	      where (int)SwAO_frag[(index)nu] == ifrag

		     Txixi[nu,i,mu,j]       = Taixj[a,i,mu,j]*ca[nu,a]
		     PUT TAO_ab[nu,i,mu,j] += Txixi[nu,i,mu,j]

	       ENDDO nu

	  ENDDO j
	  ENDDO a
	  ENDDO i 
	  ENDDO mu
      ENDIF
      ENDPARDO ifrag  
      server_barrier
      PARDO ifrag  
      icount = (scalar)ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         GET     e20c_old[ifrag] 
         e1old = e20c_old[ifrag] 
         do_iter = 1.0 
       
        et2_correction = 0.0 
        esum = 0.0  

#
# Do Ladder contraction 
#
	  DO mu
	  where (int)SwAO_frag[(index)mu] == ifrag
	  DO nu
	  where (int)SwAO_frag[(index)nu] == ifrag
	  DO lambda
	  where (int)SwAO_frag[(index)lambda] == ifrag
	  DO sigma
	  where (int)SwAO_frag[(index)sigma] == ifrag

                 aoint[lambda,mu,sigma,nu]  = 0.0 
                 execute compute_integral_batch aoint[lambda,mu,sigma,nu] #  1 1 2 2  

		  DO i  
		  where (int)SwOccA_frag[(index)i] == ifrag
		  DO j  
		  where (int)SwOccA_frag[(index)j] == ifrag

                     GET                       TAO_ab[lambda,i,sigma,j] 
                     txixi[mu,i,nu,j]        = aoint[lambda,mu,sigma,nu]*TAO_ab[lambda,i,sigma,j] 
                     PUT T2AO_ab[mu,i,nu,j] += txixi[mu,i,nu,j] 

                  ENDDO j 
                  ENDDO i 

	  ENDDO sigma  
	  ENDDO lambda  
	  ENDDO nu  
	  ENDDO mu   
      ENDIF
      ENDPARDO ifrag  
      server_barrier
      PARDO ifrag  
      icount = (scalar)ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         GET     e20c_old[ifrag] 
         e1old = e20c_old[ifrag] 
         do_iter = 1.0 
       
        et2_correction = 0.0 
        esum = 0.0  

#
# Add the WMEBJ term 
#
#     AA 
#
	  DO a
	  where (int)SwVirtA_frag[(index)a] == ifrag
	  DO i  
	  where (int)SwOccA_frag[(index)i] == ifrag
	  DO a1  
	  where (int)SwVirtA_frag[(index)a1] == ifrag
	  DO i1  
	  where (int)SwOccA_frag[(index)i1] == ifrag

	     GET                 Viabj[i,a,a1,i1]  
	     GET                 Vaajj[a1,a,i,i1] 

	     t2ppqq[i,a,a1,i1] = Viabj[i,a,a1,i1] 
	     tppqq[a,i,a1,i1]  = t2ppqq[i,a,a1,i1] 

	     t3ppqq[a1,a,i,i1] = Vaajj[a1,a,i,i1] 
	     t1ppqq[a,i,a1,i1] = t3ppqq[a1,a,i,i1] 

	     tppqq[a,i,a1,i1] -= t1ppqq[a,i,a1,i1]  

	      DO b
	      where (int)SwVirtA_frag[(index)b] == ifrag
	      DO j  
	      where (int)SwOccA_frag[(index)j] == ifrag
		   GET                   T2old[a1,i1,b,j] 
		   xaiai[a,i,b,j]      = tppqq[a,i,a1,i1]*T2old[a1,i1,b,j]  
		   t2ppqq[b,j,a,i]     = xaiai[a,i,b,j] 
		   PUT T2new[a,i,b,j] += xaiai[a,i,b,j] 
		   PUT T2new[b,j,a,i] += t2ppqq[b,j,a,i] 
	      ENDDO j 
	      ENDDO b 

	  ENDDO i1  
	  ENDDO a1  
	  ENDDO i  
	  ENDDO a  
      ENDIF
      ENDPARDO ifrag  
      server_barrier
      PARDO ifrag  
      icount = (scalar)ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         GET     e20c_old[ifrag] 
         e1old = e20c_old[ifrag] 
         do_iter = 1.0 
       
        et2_correction = 0.0 
        esum = 0.0  

#
#     AB 
#
	  DO a1  
	  where (int)SwVirtA_frag[(index)a1] == ifrag
	  DO a
	  where (int)SwVirtA_frag[(index)a] == ifrag
	  DO i  
	  where (int)SwOccA_frag[(index)i] == ifrag
	  DO i1  
	  where (int)SwOccA_frag[(index)i1] == ifrag

	     GET                 T2old[a1,i1,a,i] 
	     GET                 T2old[a1,i,a,i1]  

	     tppqq[a1,i1,a,i]  = T2old[a1,i1,a,i] 
	     t3ppqq[a1,i,a,i1] = T2old[a1,i,a,i1]  
	     t1ppqq[a1,i1,a,i] = t3ppqq[a1,i,a,i1]  

	     tppqq[a1,i1,a,i] -= t1ppqq[a1,i1,a,i]  
	     t2ppqq[a1,i1,i,a] = tppqq[a1,i1,a,i] 

	      DO b
	      where (int)SwVirtA_frag[(index)b] == ifrag
	      DO j  
	      where (int)SwOccA_frag[(index)j] == ifrag
		   GET                     Viabj[i,a,b,j] 
		   xaiai[a1,i1,b,j]      = t2ppqq[a1,i1,i,a]*Viabj[i,a,b,j]  
		   t3ppqq[b,j,a1,i1]     = xaiai[a1,i1,b,j] 

		   PUT T2new[a1,i1,b,j] += xaiai[a1,i1,b,j] 
		   PUT T2new[b,j,a1,i1] += t3ppqq[b,j,a1,i1] 
	      ENDDO j 
	      ENDDO b 

	  ENDDO i1  
	  ENDDO i  
	  ENDDO a  
	  ENDDO a1  
      ENDIF
      ENDPARDO ifrag  
      server_barrier
      PARDO ifrag  
      icount = (scalar)ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         GET     e20c_old[ifrag] 
         e1old = e20c_old[ifrag] 
         do_iter = 1.0 
       
        et2_correction = 0.0 
        esum = 0.0  

#
#     AB 
#
	  DO a
	  where (int)SwVirtA_frag[(index)a] == ifrag
	  DO j  
	  where (int)SwOccA_frag[(index)j] == ifrag
	  DO i1
	  where (int)SwOccA_frag[(index)i1] == ifrag
	  DO b1
	  where (int)SwVirtA_frag[(index)b1] == ifrag

	     GET                 T2old[a,i1,b1,j] 
	     t1ppqq[a,i1,b1,j] = T2old[a,i1,b1,j] 

	      DO b
	      where (int)SwVirtA_frag[(index)b] == ifrag
	      DO i  
	      where (int)SwOccA_frag[(index)i] == ifrag
		   GET                   Vaajj[b,b1,i1,i] 
		   xaiai[a,i,b,j]      = t1ppqq[a,i1,b1,j]*Vaajj[b,b1,i1,i]   
		   xaiai[a,i,b,j]     *= -1.0  
		   t3ppqq[b,j,a,i]     = xaiai[a,i,b,j] 

		   PUT T2new[a,i,b,j] += xaiai[a,i,b,j] 
		   PUT T2new[b,j,a,i] += t3ppqq[b,j,a,i] 
	      ENDDO i 
	      ENDDO b 

	  ENDDO b1  
	  ENDDO i1  
	  ENDDO j  
	  ENDDO a 
      ENDIF
      ENDPARDO ifrag  
      server_barrier
      PARDO ifrag  
      icount = (scalar)ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         GET     e20c_old[ifrag] 
         e1old = e20c_old[ifrag] 
         do_iter = 1.0 
       
        et2_correction = 0.0 
        esum = 0.0  

#
#     v^2 o^4 term  
#
	  DO a
	  where (int)SwVirtA_frag[(index)a] == ifrag
	  DO b
	  where (int)SwVirtA_frag[(index)b] == ifrag
	  DO i1
	  where (int)SwOccA_frag[(index)i1] == ifrag
	  DO j1  
	  where (int)SwOccA_frag[(index)j1] == ifrag

	     GET                 T2old[a,i1,b,j1] 
	     t1ppqq[a,i1,b,j1] = T2old[a,i1,b,j1] 

	      DO i  
	      where (int)SwOccA_frag[(index)i] == ifrag
	      DO j  
	      where (int)SwOccA_frag[(index)j] == ifrag
		   GET                   Viijj[i1,i,j1,j] 
		   tppqq[i1,i,j1,j]    = Viijj[i1,i,j1,j] 
		   xaiai[a,i,b,j]      = t1ppqq[a,i1,b,j1]*tppqq[i1,i,j1,j]  
		   PUT T2new[a,i,b,j] += xaiai[a,i,b,j] 
	       ENDDO j 
	       ENDDO i 

	  ENDDO j1  
	  ENDDO i1  
	  ENDDO b  
	  ENDDO a 
      ENDIF
      ENDPARDO ifrag  
      server_barrier
      PARDO ifrag  
      icount = (scalar)ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         GET     e20c_old[ifrag] 
         e1old = e20c_old[ifrag] 
         do_iter = 1.0 
       
        et2_correction = 0.0 
        esum = 0.0  

# 
#    Perform final transformation of LADDER contribution
#    ---------------------------------------------------
#
	  DO nu
	  where (int)SwAO_frag[(index)nu] == ifrag
	  DO i  
	  where (int)SwOccA_frag[(index)i] == ifrag
	  DO j  
	  where (int)SwOccA_frag[(index)j] == ifrag

#
	      DO a
	      where (int)SwVirtA_frag[(index)a] == ifrag
                    allocate LDaixj[a,i,nu,j]
              ENDDO a
#
	      DO mu
	      where (int)SwAO_frag[(index)mu] == ifrag
#
                 GET                T2AO_ab[mu,i,nu,j] 
                 txixj[mu,i,nu,j] = T2AO_ab[mu,i,nu,j] 
#
		  DO a
		  where (int)SwVirtA_frag[(index)a] == ifrag
                       Taixj[a,i,nu,j]   = txixj[mu,i,nu,j]*ca[mu,a]
                       LDaixj[a,i,nu,j] += Taixj[a,i,nu,j]
                  ENDDO a

              ENDDO mu

	      DO a
	      where (int)SwVirtA_frag[(index)a] == ifrag
	      DO b
	      where (int)SwVirtA_frag[(index)b] == ifrag
                 Tppqq[a,i,b,j]      = LDaixj[a,i,nu,j]*ca[nu,b]
                 PUT T2new[a,i,b,j] += Tppqq[a,i,b,j]
              ENDDO b
              ENDDO a
#
	      DO a
	      where (int)SwVirtA_frag[(index)a] == ifrag
                    deallocate LDaixj[a,i,nu,j]
              ENDDO a
#
        ENDDO j
        ENDDO i  
        ENDDO nu  
      ENDIF
      ENDPARDO ifrag  
      server_barrier
      PARDO ifrag  
      icount = (scalar)ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         GET     e20c_old[ifrag] 
         e1old = e20c_old[ifrag] 
         do_iter = 1.0 
       
        et2_correction = 0.0 
        esum = 0.0  

#
# Form the new ampllitude 
#
	  DO a
	  where (int)SwVirtA_frag[(index)a] == ifrag
	  DO i  
	  where (int)SwOccA_frag[(index)i] == ifrag
	  DO a1  
	  where (int)SwVirtA_frag[(index)a1] == ifrag
	  DO i1  
	  where (int)SwOccA_frag[(index)i1] == ifrag

              GET                        T2new[a,i,a1,i1] 
              tppqq[a,i,a1,i1]         = T2new[a,i,a1,i1] 
              execute energy_denominator_rhf tppqq[a,i,a1,i1] fock_a  
              PUT T2old[a,i,a1,i1] = tppqq[a,i,a1,i1] 

          ENDDO i1 
          ENDDO a1 
          ENDDO i 
          ENDDO a
      ENDIF
      ENDPARDO ifrag  
      server_barrier
      PARDO ifrag  
      icount = (scalar)ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         GET     e20c_old[ifrag] 
         e1old = e20c_old[ifrag] 
         do_iter = 1.0 
       
        et2_correction = 0.0 
        esum = 0.0  


# Form the new energy 

      esum = 0.0 
	  DO a
	  where (int)SwVirtA_frag[(index)a] == ifrag
	  DO i  
	  where (int)SwOccA_frag[(index)i] == ifrag
	  DO a1  
	  where (int)SwVirtA_frag[(index)a1] == ifrag
	  DO i1  
	  where (int)SwOccA_frag[(index)i1] == ifrag

               GET                T2old[a,i,a1,i1] 
               GET                Vaibj[a,i,a1,i1]  
               GET                Vaibj[a,i1,a1,i]  

               t1ppqq[a,i,a1,i1] = Vaibj[a,i,a1,i1]  
               t3ppqq[a,i1,a1,i] = Vaibj[a,i1,a1,i]  
               t2ppqq[a,i,a1,i1] = t3ppqq[a,i1,a1,i] 
               t1ppqq[a,i,a1,i1]*= 2.0  
               t1ppqq[a,i,a1,i1]-= t2ppqq[a,i,a1,i1] 

               etemp = T2old[a,i,a1,i1]*t1ppqq[a,i,a1,i1] 
               esum += etemp 

          ENDDO i1 
          ENDDO a1 
          ENDDO i 
          ENDDO a

        t2p[ifrag]        = esum 
        PUT e20c[ifrag]   = t2p[ifrag] 

      ENDIF # etemp > cc_conv 
      ENDPARDO ifrag 
      sip_barrier
      esum = 0.0
      sip_barrier
      PARDO ifrag 
         GET                  e20c[ifrag] 
         GET                  e20c_old[ifrag] 
	 execute return_sval e20c[ifrag] etemp
	 esum += etemp
         tp[ifrag]          = e20c_old[ifrag]  
         tp[ifrag]         -= e20c[ifrag]  
         PUT e2error[ifrag] = tp[ifrag] 
         PUT e20c_old[ifrag]= e20c[ifrag] 
      ENDPARDO ifrag 
      sip_barrier 
#
# -----------------------------------------------------------------------------
#     END OF FRAGMENT ITERATIONS 
# -----------------------------------------------------------------------------
#
      fragment_doubles = 0.0
      sip_barrier 
      collective fragment_doubles += esum
      sip_barrier 
      print fragment_doubles
      ediff = fragment_doubles - eold
      escr = ediff**2.0
      ediff = escr**0.5
      print ediff
      if ediff < cc_conv
	  exit #kiter
      endif
      eold = fragment_doubles
      sip_barrier
      ENDDO kiter 
      sip_barrier
#
      PARDO ifrag, jfrag 
       if ifrag == jfrag 
         GET                        e20c[ifrag] 
         t20disp[ifrag,jfrag]     = e20c[ifrag]  
         PUT e20disp[ifrag,jfrag] = t20disp[ifrag,jfrag] 
       endif 
      ENDPARDO ifrag, jfrag  
#
# -----------------------------------------------------------------------------
#     END OF FRAGMENT CALCULATIONS  
# -----------------------------------------------------------------------------
# 
      ENDPROC FORM_T2_FRAGMENT_ITERS  
#     ------------------------------  
# 
      PROC FORM_T2_DIMER_ITERS  
#     ------------------------  
# 
# -----------------------------------------------------------------------------
#     Dimer calculations   
# -----------------------------------------------------------------------------
      PARDO ifrag, jfrag   
       WHERE ifrag != jfrag 
         PUT d20c_old[ifrag,jfrag] = 0.0
         PUT d2error[ifrag,jfrag]  = 10.0
      ENDPARDO ifrag, jfrag   
      sip_barrier
#
      eold = 0.0

         print "Performing a dimer CCPT2 calc"
      DO kiter 
	 print kiter
#
#
# -----------------------------------------------------------------------------
#     START OF FRAGMENT ITERATIONS 
# -----------------------------------------------------------------------------
      PARDO ifrag, jfrag   
      where ifrag != jfrag
      where (int)elst_dist[ifrag,jfrag] == ifrag

         icount = (scalar)ifrag
         jcount = (scalar)jfrag

         GET     d2error[ifrag,jfrag] 
         etemp = d2error[ifrag,jfrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         GET     d20c_old[ifrag,jfrag] 
         e1old = d20c_old[ifrag,jfrag] 
         do_iter = 1.0 

        e2old = 0.0 
        et2_correction = 0.0  
        esum = 0.0  

	  DO a
	  where (int)SwVirtA_frag[(index)a] == ifrag
	  DO i  
	  where (int)SwOccA_frag[(index)i] == ifrag
	  DO a1  
	  where (int)SwVirtA_frag[(index)a1] == jfrag
	  DO i1  
	  where (int)SwOccA_frag[(index)i1] == jfrag

              GET                    T20aiai[a,i,a1,i1] 
              PUT T2new[a,i,a1,i1] = T20aiai[a,i,a1,i1] 

          ENDDO i1 
          ENDDO a1 
          ENDDO i 
          ENDDO a 

          DO mu
	  where (int)SwAO_frag[(index)mu] == ifrag
	  DO i  
	  where (int)SwOccA_frag[(index)i] == ifrag
          DO nu
	  where (int)SwAO_frag[(index)nu] == jfrag
	  DO i1
	  where (int)SwOccA_frag[(index)i1] == jfrag

              txpxq[mu,i,nu,i1]       = 0.0
              PUT TAO_ab[mu,i,nu,i1]  = txpxq[mu,i,nu,i1]
              PUT T2AO_ab[mu,i,nu,i1] = txpxq[mu,i,nu,i1]

          ENDDO i1
          ENDDO nu
          ENDDO i
          ENDDO mu
      ENDIF
      ENDPARDO ifrag, jfrag   
      server_barrier
      PARDO ifrag, jfrag   
      where ifrag != jfrag
      where (int)elst_dist[ifrag,jfrag] == ifrag

         icount = (scalar)ifrag
         jcount = (scalar)jfrag

         GET     d2error[ifrag,jfrag] 
         etemp = d2error[ifrag,jfrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         GET     d20c_old[ifrag,jfrag] 
         e1old = d20c_old[ifrag,jfrag] 
         do_iter = 1.0 

        e2old = 0.0 
        et2_correction = 0.0  
        esum = 0.0  


# Form backtransformed amplitudes 

	  DO mu
	  where (int)SwAO_frag[(index)mu] == jfrag
	  DO i  
	  where (int)SwOccA_frag[(index)i] == ifrag
	  DO a
	  where (int)SwVirtA_frag[(index)a] == ifrag
          DO j
	  where (int)SwOccA_frag[(index)j] == jfrag
#
	     taixj[a,i,mu,j] = 0.0

	      DO b
	      where (int)SwVirtA_frag[(index)b] == jfrag

		     GET                T2old[a,i,b,j]
		     T1aixj[a,i,mu,j] = T2old[a,i,b,j]*ca[mu,b]
		     Taixj[a,i,mu,j] += T1aixj[a,i,mu,j]

	      ENDDO b

	      DO nu 
	      where (int) SwAO_frag[(index)nu] == ifrag

		     Txixi[nu,i,mu,j]       = Taixj[a,i,mu,j]*ca[nu,a]
		     PUT TAO_ab[nu,i,mu,j] += Txixi[nu,i,mu,j]

	       ENDDO nu

	  ENDDO j
	  ENDDO a
	  ENDDO i
	  ENDDO mu
      ENDIF
      ENDPARDO ifrag, jfrag   
      server_barrier
      PARDO ifrag, jfrag   
      where ifrag != jfrag
      where (int)elst_dist[ifrag,jfrag] == ifrag

         icount = (scalar)ifrag
         jcount = (scalar)jfrag

         GET     d2error[ifrag,jfrag] 
         etemp = d2error[ifrag,jfrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         GET     d20c_old[ifrag,jfrag] 
         e1old = d20c_old[ifrag,jfrag] 
         do_iter = 1.0 

        e2old = 0.0 
        et2_correction = 0.0  
        esum = 0.0  

#
# Do Ladder contraction 
#
	  DO mu
	  where (int)SwAO_frag[(index)mu] == ifrag
	  DO nu
	  where (int)SwAO_frag[(index)nu] == jfrag
	  DO lambda
	  where (int)SwAO_frag[(index)lambda] == ifrag
	  DO sigma
	  where (int)SwAO_frag[(index)sigma] == jfrag

                 aoint[lambda,mu,sigma,nu]  = 0.0
                 execute compute_integral_batch aoint[lambda,mu,sigma,nu] #  1 1 2 2  

                 DO i
		 where (int)SwOccA_frag[(index)i] == ifrag
                 DO j
		 where (int)SwOccA_frag[(index)j] == jfrag

                     GET                       TAO_ab[lambda,i,sigma,j]
                     txixi[mu,i,nu,j]        = aoint[lambda,mu,sigma,nu]*TAO_ab[lambda,i,sigma,j]
                     PUT T2AO_ab[mu,i,nu,j] += txixi[mu,i,nu,j]

                 ENDDO j
                 ENDDO i

	  ENDDO sigma
	  ENDDO lambda
	  ENDDO nu
	  ENDDO mu
      ENDIF
      ENDPARDO ifrag, jfrag   
      server_barrier
      PARDO ifrag, jfrag   
      where ifrag != jfrag
      where (int)elst_dist[ifrag,jfrag] == ifrag

         icount = (scalar)ifrag
         jcount = (scalar)jfrag

         GET     d2error[ifrag,jfrag] 
         etemp = d2error[ifrag,jfrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         GET     d20c_old[ifrag,jfrag] 
         e1old = d20c_old[ifrag,jfrag] 
         do_iter = 1.0 

        e2old = 0.0 
        et2_correction = 0.0  
        esum = 0.0  

#
# Add the WMEBJ term 
#
#     AB 
#
	  DO a
	  where (int)SwVirtA_frag[(index)a] == ifrag
	  DO j
	  where (int)SwOccA_frag[(index)j] == jfrag
	  DO i1
	  where (int)SwOccA_frag[(index)i1] == ifrag
	  DO b1
	  where (int)SwVirtA_frag[(index)b1] == jfrag

	     GET                 T2old[a,i1,b1,j]
	     t1ppqq[a,i1,b1,j] = T2old[a,i1,b1,j]

	     DO b
	     where (int)SwVirtA_frag[(index)b] == jfrag
	     DO i
	     where (int)SwOccA_frag[(index)i] == ifrag

		   GET                   Vaajj[b,b1,i1,i]
		   xaiai[a,i,b,j]      = t1ppqq[a,i1,b1,j]*Vaajj[b,b1,i1,i]
		   xaiai[a,i,b,j]     *= -1.0
		   PUT T2new[a,i,b,j] += xaiai[a,i,b,j]

	     ENDDO i
	     ENDDO b

	  ENDDO b1
	  ENDDO i1
	  ENDDO j
	  ENDDO a
      ENDIF
      ENDPARDO ifrag, jfrag   
      server_barrier
      PARDO ifrag, jfrag   
      where ifrag != jfrag
      where (int)elst_dist[ifrag,jfrag] == ifrag

         icount = (scalar)ifrag
         jcount = (scalar)jfrag

         GET     d2error[ifrag,jfrag] 
         etemp = d2error[ifrag,jfrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         GET     d20c_old[ifrag,jfrag] 
         e1old = d20c_old[ifrag,jfrag] 
         do_iter = 1.0 

        e2old = 0.0 
        et2_correction = 0.0  
        esum = 0.0  

#
	  DO a
	  where (int)SwVirtA_frag[(index)a] == ifrag
	  DO j
	  where (int)SwOccA_frag[(index)j] == jfrag
	  DO j1
	  where (int)SwOccA_frag[(index)j1] == jfrag
	  DO a1
	  where (int)SwVirtA_frag[(index)a1] == ifrag

	     DO b
	     where (int)SwVirtA_frag[(index)b] == jfrag
	     DO i
	     where (int)SwOccA_frag[(index)i] == ifrag

		   GET                 T2old[a1,i,b,j1]
		   t1ppqq[a1,i,b,j1] = T2old[a1,i,b,j1]

		   GET                   Vaajj[a,a1,j1,j]
		   xaiai[a,i,b,j]      = t1ppqq[a1,i,b,j1]*Vaajj[a,a1,j1,j]
		   xaiai[a,i,b,j]     *= -1.0
		   PUT T2new[a,i,b,j] += xaiai[a,i,b,j]

	     ENDDO i
	     ENDDO b

	  ENDDO a1
	  ENDDO j1
	  ENDDO j
	  ENDDO a
      ENDIF
      ENDPARDO ifrag, jfrag   
      server_barrier
      PARDO ifrag, jfrag   
      where ifrag != jfrag
      where (int)elst_dist[ifrag,jfrag] == ifrag

         icount = (scalar)ifrag
         jcount = (scalar)jfrag

         GET     d2error[ifrag,jfrag] 
         etemp = d2error[ifrag,jfrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         GET     d20c_old[ifrag,jfrag] 
         e1old = d20c_old[ifrag,jfrag] 
         do_iter = 1.0 

        e2old = 0.0 
        et2_correction = 0.0  
        esum = 0.0  

#
#     v^2 o^4 term  
#
	  DO a
	  where (int)SwVirtA_frag[(index)a] == ifrag
	  DO b
	  where (int)SwVirtA_frag[(index)b] == jfrag
	  DO i1
	  where (int)SwOCcA_frag[(index)i1] == ifrag
	  DO j1
	  where (int)SwOccA_frag[(index)j1] == jfrag

	     GET                 T2old[a,i1,b,j1]
	     t1ppqq[a,i1,b,j1] = T2old[a,i1,b,j1]

	     DO i
	     where (int)SwOCcA_frag[(index)i] == ifrag
	     DO j
	     where (int)SwOccA_frag[(index)j] == jfrag
		   GET                   Viijj[i1,i,j1,j]
		   tppqq[i1,i,j1,j]    = Viijj[i1,i,j1,j]
		   xaiai[a,i,b,j]      = t1ppqq[a,i1,b,j1]*tppqq[i1,i,j1,j]
		   PUT T2new[a,i,b,j] += xaiai[a,i,b,j]

	     ENDDO j
	     ENDDO i

	  ENDDO j1
	  ENDDO i1
	  ENDDO b
	  ENDDO a
      ENDIF
      ENDPARDO ifrag, jfrag   
      server_barrier
      PARDO ifrag, jfrag   
      where ifrag != jfrag
      where (int)elst_dist[ifrag,jfrag] == ifrag

         icount = (scalar)ifrag
         jcount = (scalar)jfrag

         GET     d2error[ifrag,jfrag] 
         etemp = d2error[ifrag,jfrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         GET     d20c_old[ifrag,jfrag] 
         e1old = d20c_old[ifrag,jfrag] 
         do_iter = 1.0 

        e2old = 0.0 
        et2_correction = 0.0  
        esum = 0.0  

# 
#    Perform final transformation of LADDER contribution
#    ---------------------------------------------------
#
	  DO nu
	  where (int)SwAO_frag[(index)nu] == jfrag
	  DO i
	  where (int)SwOccA_frag[(index)i] == ifrag
	  DO j
	  where (int)SwOccA_frag[(index)j] == jfrag
#
		DO a
		where (int)SwVirtA_frag[(index)a] == ifrag
			allocate LDaixj[a,i,nu,j]
		ENDDO a
#
		DO mu
		where (int)SwAO_frag[(index)mu] == ifrag
#
		   GET                T2AO_ab[mu,i,nu,j]
		   txixj[mu,i,nu,j] = T2AO_ab[mu,i,nu,j]
#
		   DO a
		   where (int)SwVirtA_frag[(index)a] == ifrag
			   Taixj[a,i,nu,j]   = txixj[mu,i,nu,j]*ca[mu,a]
			   LDaixj[a,i,nu,j] += Taixj[a,i,nu,j]
		   ENDDO a

		ENDDO mu


		DO a
		where (int)SwVirtA_frag[(index)a] == ifrag
		DO b
		where (int)SwVirtA_frag[(index)b] == jfrag
		     Tppqq[a,i,b,j]      = LDaixj[a,i,nu,j]*ca[nu,b]
		     PUT T2new[a,i,b,j] += Tppqq[a,i,b,j]
		ENDDO b
		ENDDO a
#
		DO a
		where (int)SwVirtA_frag[(index)a] == ifrag
			deallocate LDaixj[a,i,nu,j]
		ENDDO a
#
	    ENDDO j
	    ENDDO i
	    ENDDO nu
      ENDIF
      ENDPARDO ifrag, jfrag   
      server_barrier
      PARDO ifrag, jfrag   
      where ifrag != jfrag
      where (int)elst_dist[ifrag,jfrag] == ifrag

         icount = (scalar)ifrag
         jcount = (scalar)jfrag

         GET     d2error[ifrag,jfrag] 
         etemp = d2error[ifrag,jfrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         GET     d20c_old[ifrag,jfrag] 
         e1old = d20c_old[ifrag,jfrag] 
         do_iter = 1.0 

        e2old = 0.0 
        et2_correction = 0.0  
        esum = 0.0  

# 
#    Add the contributions coming from Vaiai  
#    ---------------------------------------------------
#
          DO a
          where (int)SwVirtA_frag[(index)a] == ifrag
          DO i  
	  where (int)SwOccA_frag[(index)i] == ifrag
          DO b  
          where (int)SwVirtA_frag[(index)b] == jfrag
          DO j  
	  where (int)SwOccA_frag[(index)j] == jfrag

	     t2ppqq[a,i,b,j]              = 0.0  

	     DO a1 
	     where (int)SwVirtA_frag[(index)a1] == ifrag
	     DO i1 
	     where (int)SwOccA_frag[(index)i1] == ifrag

		   GET T2old[a1,i1,b,j] 
		   GET Viabj[i1,a1,a,i] 
		   GET Vaajj[a1,a,i,i1] 

		   tppqq[a1,i1,a,i]  = Viabj[i1,a1,a,i]  
		   t1ppqq[a1,i1,a,i] = Vaajj[a1,a,i,i1]  
		   tppqq[a1,i1,a,i] *= 2.0  
		   tppqq[a1,i1,a,i] -= t1ppqq[a1,i1,a,i] 

		   taiai[a,i,b,j]    = T2old[a1,i1,b,j]*tppqq[a1,i1,a,i]   
		   t2ppqq[a,i,b,j]  += taiai[a,i,b,j] 

	     ENDDO i1
	     ENDDO a1 

	     DO b1 
             where (int)SwVirtA_frag[(index)b1] == jfrag
	     DO j1 
	     where (int)SwOccA_frag[(index)j1] == jfrag

		   GET T2old[a,i,b1,j1] 
		   GET Viabj[j1,b1,b,j] 
		   GET Vaajj[b1,b,j,j1] 

		   tppqq[b1,j1,b,j]  = Viabj[j1,b1,b,j]  
		   t1ppqq[b1,j1,b,j] = Vaajj[b1,b,j,j1]  
		   tppqq[b1,j1,b,j] *= 2.0  
		   tppqq[b1,j1,b,j] -= t1ppqq[b1,j1,b,j] 

		   taiai[a,i,b,j]    = T2old[a,i,b1,j1]*tppqq[b1,j1,b,j]   
		   t2ppqq[a,i,b,j]  += taiai[a,i,b,j] 

	     ENDDO j1
	     ENDDO b1 

	     PUT T2new[a,i,b,j]        += t2ppqq[a,i,b,j] 

	  ENDDO j  
	  ENDDO b  
	  ENDDO i  
	  ENDDO a  
      ENDIF
      ENDPARDO ifrag, jfrag   
      server_barrier
      PARDO ifrag, jfrag   
      where ifrag != jfrag
      where (int)elst_dist[ifrag,jfrag] == ifrag

         icount = (scalar)ifrag
         jcount = (scalar)jfrag

         GET     d2error[ifrag,jfrag] 
         etemp = d2error[ifrag,jfrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         GET     d20c_old[ifrag,jfrag] 
         e1old = d20c_old[ifrag,jfrag] 
         do_iter = 1.0 

        e2old = 0.0 
        et2_correction = 0.0  
        esum = 0.0  

#
# Form the new ampllitude 
#
          DO a
          where (int)SwVirtA_frag[(index)a] == ifrag
          DO i
	  where (int)SwOccA_frag[(index)i] == ifrag
          DO a1
          where (int)SwVirtA_frag[(index)a1] == jfrag
          DO i1
	  where (int)SwOccA_frag[(index)i1] == jfrag

              GET                        T2new[a,i,a1,i1]
              tppqq[a,i,a1,i1]         = T2new[a,i,a1,i1]
              execute energy_denominator_rhf tppqq[a,i,a1,i1] fock_a
              PUT T2old[a,i,a1,i1] = tppqq[a,i,a1,i1]

          ENDDO i1
          ENDDO a1
          ENDDO i
          ENDDO a
      ENDIF
      ENDPARDO ifrag, jfrag   
      server_barrier
      PARDO ifrag, jfrag   
      where ifrag != jfrag
      where (int)elst_dist[ifrag,jfrag] == ifrag

         icount = (scalar)ifrag
         jcount = (scalar)jfrag

         GET     d2error[ifrag,jfrag] 
         etemp = d2error[ifrag,jfrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         GET     d20c_old[ifrag,jfrag] 
         e1old = d20c_old[ifrag,jfrag] 
         do_iter = 1.0 

        e2old = 0.0 
        et2_correction = 0.0  
        esum = 0.0  


# Form the new energy 

          DO a
          where (int)SwVirtA_frag[(index)a] == ifrag
          DO i
	  where (int)SwOccA_frag[(index)i] == ifrag
          DO a1
          where (int)SwVirtA_frag[(index)a1] == jfrag
          DO i1
	  where (int)SwOccA_frag[(index)i1] == jfrag

               GET                T2old[a,i,a1,i1]
               GET                Vaibj[a,i,a1,i1]

               etemp = T2old[a,i,a1,i1]*Vaibj[a,i,a1,i1]
               etemp*= 4.0  
               esum += etemp

          ENDDO i1
          ENDDO a1
          ENDDO i
          ENDDO a

	  t20disp[ifrag,jfrag]    = esum 
	  PUT d20c[ifrag,jfrag]   = t20disp[ifrag,jfrag] 
#
      endif 
      ENDPARDO ifrag, jfrag   
      esum = 0.0 
      dimer_doubles = 0.0 
      sip_barrier 

      PARDO ifrag, jfrag  
      WHERE ifrag != jfrag 
      where (int)elst_dist[ifrag,jfrag] == ifrag

         GET                        d20c[ifrag,jfrag] 
         GET                        d20c_old[ifrag,jfrag] 
         t20disp[ifrag,jfrag]     = d20c_old[ifrag,jfrag]  
         t20disp[ifrag,jfrag]    -= d20c[ifrag,jfrag]  
         PUT d2error[ifrag,jfrag] = t20disp[ifrag,jfrag] 
         PUT d20c_old[ifrag,jfrag]= d20c[ifrag,jfrag] 

         etemp = d20c[ifrag,jfrag]
         if jfrag > ifrag 
            esum += etemp 
         endif 

      ENDPARDO ifrag, jfrag  
      sip_barrier 
      collective dimer_doubles += esum 
      print dimer_doubles
      ediff = dimer_doubles - eold
      escr = ediff**2.0
      ediff = escr**0.5
      print ediff
      if ediff < cc_conv
	  exit #kiter
      endif
      eold = dimer_doubles
      sip_barrier
#
      ENDDO kiter 
# 
      ENDPROC FORM_T2_DIMER_ITERS  
#
# -----------------------------------------------------------------------------
#
      PROC FORM_T2_MONOMER  
#     --------------------  
# 
# -----------------------------------------------------------------------------
#     Fragment only calculation  
# -----------------------------------------------------------------------------
      PARDO ifrag  
         PUT e20c_old[ifrag] = 0.0
         PUT e2error[ifrag]  = 1.0
      ENDPARDO ifrag  
#
      sip_barrier
      PARDO ifrag  
	 icount = (scalar)ifrag

        DO a
	where (int)SwVirtA_frag[(index)a] == ifrag
        DO i
	where (int)SwOccA_frag[(index)i] == ifrag
        DO a1 
	where (int)SwVirtA_frag[(index)a1] == ifrag
        DO i1 
	where (int)SwOccA_frag[(index)i1] == ifrag

              GET                         T2old[a,i,a1,i1] 
              PUT T2old_mono[a,i,a1,i1] = T2old[a,i,a1,i1] 

        ENDDO i1 
        ENDDO a1 
        ENDDO i 
        ENDDO a 

      ENDPARDO ifrag  
      sip_barrier
#
      eold = 0.0
      print "Performing a LCCD calc on fragment "
      DO kiter 
         do_iter = 0.0 
#
      sip_barrier
#
# -----------------------------------------------------------------------------
#     START OF FRAGMENT ITERATIONS 
# -----------------------------------------------------------------------------
      PARDO ifrag  
	 icount = (scalar)ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         GET     e20c_old[ifrag] 
         e1old = e20c_old[ifrag] 
         do_iter = 1.0 
       
        et2_correction = 0.0 
        esum = 0.0  

        DO a
	where (int)SwVirtA_frag[(index)a] == ifrag
        DO i
	where (int)SwOccA_frag[(index)i] == ifrag
        DO a1 
	where (int)SwVirtA_frag[(index)a1] == ifrag
        DO i1 
	where (int)SwOccA_frag[(index)i1] == ifrag

              GET                    Vaibj[a,i,a1,i1] 
              PUT T2new[a,i,a1,i1] = Vaibj[a,i,a1,i1] 

        ENDDO i1 
        ENDDO a1 
        ENDDO i 
        ENDDO a 
      ENDIF
      ENDPARDO ifrag  
      server_barrier
      PARDO ifrag  
	 icount = (scalar)ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         GET     e20c_old[ifrag] 
         e1old = e20c_old[ifrag] 
         do_iter = 1.0 
       
        et2_correction = 0.0 
        esum = 0.0  


        DO mu
	where (int)SwAO_frag[(index)mu] == ifrag
        DO i 
	where (int)SwOccA_frag[(index)i] == ifrag
        DO nu 
	where (int)SwAO_frag[(index)nu] == ifrag
        DO i1 
	where (int)SwOccA_frag[(index)i1] == ifrag

              txpxq[mu,i,nu,i1]       = 0.0 
              PUT TAO_ab[mu,i,nu,i1]  = txpxq[mu,i,nu,i1] 
              PUT T2AO_ab[mu,i,nu,i1] = txpxq[mu,i,nu,i1] 

        ENDDO i1 
        ENDDO nu 
        ENDDO i
        ENDDO mu 
       
      ENDIF
      ENDPARDO ifrag  
      server_barrier
      PARDO ifrag  
	 icount = (scalar)ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         GET     e20c_old[ifrag] 
         e1old = e20c_old[ifrag] 
         do_iter = 1.0 
       
        et2_correction = 0.0 
        esum = 0.0  

# Form backtransformed amplitudes 

        DO mu 
	where (int)SwAO_frag[(index)mu] == ifrag
        DO i
	where (int)SwOccA_frag[(index)i] == ifrag
        DO a
	where (int)SwVirtA_frag[(index)a] == ifrag
        DO j
	where (int)SwOccA_frag[(index)j] == ifrag
#
         taixj[a,i,mu,j] = 0.0

          DO b
	  where (int)SwVirtA_frag[(index)b] == ifrag

                 GET                T2old_mono[a,i,b,j] 
                 T1aixj[a,i,mu,j] = T2old_mono[a,i,b,j]*ca[mu,b]
                 Taixj[a,i,mu,j] += T1aixj[a,i,mu,j]

          ENDDO b

          DO nu
	  where (int)SwAO_frag[(index)nu] == ifrag

                 Txixi[nu,i,mu,j]       = Taixj[a,i,mu,j]*ca[nu,a]
                 PUT TAO_ab[nu,i,mu,j] += Txixi[nu,i,mu,j]

           ENDDO nu

       ENDDO j
       ENDDO a
       ENDDO i 
       ENDDO mu
      ENDIF
      ENDPARDO ifrag  
      server_barrier
      PARDO ifrag  
	 icount = (scalar)ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         GET     e20c_old[ifrag] 
         e1old = e20c_old[ifrag] 
         do_iter = 1.0 
       
        et2_correction = 0.0 
        esum = 0.0  

#
# Do Ladder contraction 
#
        DO mu  
	where (int)SwAO_frag[(index)mu] == ifrag
        DO nu  
	where (int)SwAO_frag[(index)nu] == ifrag
        DO lambda   
	where (int)SwAO_frag[(index)lambda] == ifrag
        DO sigma  
	where (int)SwAO_frag[(index)sigma] == ifrag

                 aoint[lambda,mu,sigma,nu]  = 0.0 
                 execute compute_integral_batch aoint[lambda,mu,sigma,nu] #  1 1 2 2  

                 DO i 
	         where (int)SwOccA_frag[(index)i] == ifrag
                 DO j 
   	         where (int)SwOccA_frag[(index)j] == ifrag

                     GET                       TAO_ab[lambda,i,sigma,j] 
                     txixi[mu,i,nu,j]        = aoint[lambda,mu,sigma,nu]*TAO_ab[lambda,i,sigma,j] 
                     PUT T2AO_ab[mu,i,nu,j] += txixi[mu,i,nu,j] 

                 ENDDO j 
                 ENDDO i 

        ENDDO sigma  
        ENDDO lambda  
        ENDDO nu  
        ENDDO mu   
      ENDIF
      ENDPARDO ifrag  
      server_barrier
      PARDO ifrag  
	 icount = (scalar)ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         GET     e20c_old[ifrag] 
         e1old = e20c_old[ifrag] 
         do_iter = 1.0 
       
        et2_correction = 0.0 
        esum = 0.0  

#
# Add the WMEBJ term 
#
#     AA 
#
        DO a
	where (int)SwVirtA_frag[(index)a] == ifrag
        DO i  
	where (int)SwOccA_frag[(index)i] == ifrag
        DO a1  
	where (int)SwVirtA_frag[(index)a1] == ifrag
        DO i1  
	where (int)SwOccA_frag[(index)i1] == ifrag

         GET                 Viabj[i,a,a1,i1]  
         GET                 Vaajj[a1,a,i,i1] 

         t2ppqq[i,a,a1,i1] = Viabj[i,a,a1,i1] 
         tppqq[a,i,a1,i1]  = t2ppqq[i,a,a1,i1] 

         t3ppqq[a1,a,i,i1] = Vaajj[a1,a,i,i1] 
         t1ppqq[a,i,a1,i1] = t3ppqq[a1,a,i,i1] 

         tppqq[a,i,a1,i1] -= t1ppqq[a,i,a1,i1]  

         DO b 
	 where (int)SwVirtA_frag[(index)b] == ifrag
         DO j 
	 where (int)SwOccA_frag[(index)j] == ifrag
               GET                   T2old_mono[a1,i1,b,j] 
               xaiai[a,i,b,j]      = tppqq[a,i,a1,i1]*T2old_mono[a1,i1,b,j]  
               t2ppqq[b,j,a,i]     = xaiai[a,i,b,j] 
               PUT T2new[a,i,b,j] += xaiai[a,i,b,j] 
               PUT T2new[b,j,a,i] += t2ppqq[b,j,a,i] 
         ENDDO j 
         ENDDO b 

        ENDDO i1  
        ENDDO a1  
        ENDDO i  
        ENDDO a  
      ENDIF
      ENDPARDO ifrag  
      server_barrier
      PARDO ifrag  
	 icount = (scalar)ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         GET     e20c_old[ifrag] 
         e1old = e20c_old[ifrag] 
         do_iter = 1.0 
       
        et2_correction = 0.0 
        esum = 0.0  

#
#     AB 
#
        DO a1  
	where (int)SwVirtA_frag[(index)a1] == ifrag
        DO a
	where (int)SwVirtA_frag[(index)a] == ifrag
        DO i  
	where (int)SwOccA_frag[(index)i] == ifrag
        DO i1  
	where (int)SwOccA_frag[(index)i1] == ifrag

         GET                 T2old_mono[a1,i1,a,i] 
         GET                 T2old_mono[a1,i,a,i1]  

         tppqq[a1,i1,a,i]  = T2old_mono[a1,i1,a,i] 
         t3ppqq[a1,i,a,i1] = T2old_mono[a1,i,a,i1]  
         t1ppqq[a1,i1,a,i] = t3ppqq[a1,i,a,i1]  

         tppqq[a1,i1,a,i] -= t1ppqq[a1,i1,a,i]  
         t2ppqq[a1,i1,i,a] = tppqq[a1,i1,a,i] 

         DO b 
	 where (int)SwVirtA_frag[(index)b] == ifrag
         DO j 
	 where (int)SwOccA_frag[(index)j] == ifrag
               GET                     Viabj[i,a,b,j] 
               xaiai[a1,i1,b,j]      = t2ppqq[a1,i1,i,a]*Viabj[i,a,b,j]  
               t3ppqq[b,j,a1,i1]     = xaiai[a1,i1,b,j] 

               PUT T2new[a1,i1,b,j] += xaiai[a1,i1,b,j] 
               PUT T2new[b,j,a1,i1] += t3ppqq[b,j,a1,i1] 
         ENDDO j 
         ENDDO b 

        ENDDO i1  
        ENDDO i  
        ENDDO a  
        ENDDO a1  
      ENDIF
      ENDPARDO ifrag  
      server_barrier
      PARDO ifrag  
	 icount = (scalar)ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         GET     e20c_old[ifrag] 
         e1old = e20c_old[ifrag] 
         do_iter = 1.0 
       
        et2_correction = 0.0 
        esum = 0.0  

#
#     AB 
#
        DO a
	where (int)SwVirtA_frag[(index)a] == ifrag
        DO j   
	where (int)SwOccA_frag[(index)j] == ifrag
        DO i1  
	where (int)SwOccA_frag[(index)i1] == ifrag
        DO b1  
	where (int)SwVirtA_frag[(index)b1] == ifrag

         GET                 T2old_mono[a,i1,b1,j] 
         t1ppqq[a,i1,b1,j] = T2old_mono[a,i1,b1,j] 

         DO b 
	 where (int)SwVirtA_frag[(index)b] == ifrag
         DO i 
	 where (int)SwOccA_frag[(index)i] == ifrag
               GET                   Vaajj[b,b1,i1,i] 
               xaiai[a,i,b,j]      = t1ppqq[a,i1,b1,j]*Vaajj[b,b1,i1,i]   
               xaiai[a,i,b,j]     *= -1.0  
               t3ppqq[b,j,a,i]     = xaiai[a,i,b,j] 

               PUT T2new[a,i,b,j] += xaiai[a,i,b,j] 
               PUT T2new[b,j,a,i] += t3ppqq[b,j,a,i] 
         ENDDO i 
         ENDDO b 

        ENDDO b1  
        ENDDO i1  
        ENDDO j  
        ENDDO a 
      ENDIF
      ENDPARDO ifrag  
      server_barrier
      PARDO ifrag  
	 icount = (scalar)ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         GET     e20c_old[ifrag] 
         e1old = e20c_old[ifrag] 
         do_iter = 1.0 
       
        et2_correction = 0.0 
        esum = 0.0  

#
#     v^2 o^4 term  
#
        DO a  
	where (int)SwVirtA_frag[(index)a] == ifrag
        DO b  
	where (int)SwVirtA_frag[(index)b] == ifrag
        DO i1  
	where (int)SwOccA_frag[(index)i1] == ifrag
        DO j1  
	where (int)SwOccA_frag[(index)j1] == ifrag

         GET                 T2old_mono[a,i1,b,j1] 
         t1ppqq[a,i1,b,j1] = T2old_mono[a,i1,b,j1] 

         DO i 
	 where (int)SwOccA_frag[(index)i] == ifrag
         DO j 
	 where (int)SwOccA_frag[(index)j] == ifrag
               GET                   Viijj[i1,i,j1,j] 
               tppqq[i1,i,j1,j]    = Viijj[i1,i,j1,j] 
               xaiai[a,i,b,j]      = t1ppqq[a,i1,b,j1]*tppqq[i1,i,j1,j]  
               PUT T2new[a,i,b,j] += xaiai[a,i,b,j] 
         ENDDO j 
         ENDDO i 

        ENDDO j1  
        ENDDO i1  
        ENDDO b  
        ENDDO a 
      ENDIF
      ENDPARDO ifrag  
      server_barrier
      PARDO ifrag  
	 icount = (scalar)ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         GET     e20c_old[ifrag] 
         e1old = e20c_old[ifrag] 
         do_iter = 1.0 
       
        et2_correction = 0.0 
        esum = 0.0  

# 
#    Perform final transformation of LADDER contribution
#    ---------------------------------------------------
#
        DO nu 
	where (int)SwAO_frag[(index)nu] == ifrag
        DO i
	where (int)SwOccA_frag[(index)i] == ifrag
        DO j
	where (int)SwOccA_frag[(index)j] == ifrag

              DO a
	      where (int)SwVirtA_frag[(index)a] == ifrag
                    allocate LDaixj[a,i,nu,j]
              ENDDO a
#
              DO mu
	      where (int)SwAO_frag[(index)mu] == ifrag
#
                 GET                T2AO_ab[mu,i,nu,j] 
                 txixj[mu,i,nu,j] = T2AO_ab[mu,i,nu,j] 
#
                 DO a
	         where (int)SwVirtA_frag[(index)a] == ifrag
                       Taixj[a,i,nu,j]   = txixj[mu,i,nu,j]*ca[mu,a]
                       LDaixj[a,i,nu,j] += Taixj[a,i,nu,j]
                 ENDDO a

              ENDDO mu

              DO a
	      where (int)SwVirtA_frag[(index)a] == ifrag
              DO b
	      where (int)SwVirtA_frag[(index)b] == ifrag
                 Tppqq[a,i,b,j]      = LDaixj[a,i,nu,j]*ca[nu,b]
                 PUT T2new[a,i,b,j] += Tppqq[a,i,b,j]
              ENDDO b
              ENDDO a
#
              DO a
	      where (int)SwVirtA_frag[(index)a] == ifrag
                    deallocate LDaixj[a,i,nu,j]
              ENDDO a
#
        ENDDO j
        ENDDO i  
        ENDDO nu  
      ENDIF
      ENDPARDO ifrag  
      server_barrier
      PARDO ifrag  
	 icount = (scalar)ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         GET     e20c_old[ifrag] 
         e1old = e20c_old[ifrag] 
         do_iter = 1.0 
       
        et2_correction = 0.0 
        esum = 0.0  

#
# Form the new ampllitude 
#
        DO a 
	where (int)SwVirtA_frag[(index)a] == ifrag
        DO i  
	where (int)SwOccA_frag[(index)i] == ifrag
        DO a1 
	where (int)SwVirtA_frag[(index)a1] == ifrag
        DO i1 
	where (int)SwOccA_frag[(index)i1] == ifrag

              GET                        T2new[a,i,a1,i1] 
              tppqq[a,i,a1,i1]         = T2new[a,i,a1,i1] 
              execute energy_denominator_rhf tppqq[a,i,a1,i1] fock_a  
              PUT T2old_mono[a,i,a1,i1] = tppqq[a,i,a1,i1] 

        ENDDO i1 
        ENDDO a1 
        ENDDO i 
        ENDDO a
      ENDIF
      ENDPARDO ifrag  
      server_barrier
      PARDO ifrag  
	 icount = (scalar)ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         GET     e20c_old[ifrag] 
         e1old = e20c_old[ifrag] 
         do_iter = 1.0 
       
        et2_correction = 0.0 
        esum = 0.0  


# Form the new energy 

      esum = 0.0 
        DO a 
	where (int)SwVirtA_frag[(index)a] == ifrag
        DO i  
	where (int)SwOccA_frag[(index)i] == ifrag
        DO a1 
	where (int)SwVirtA_frag[(index)a1] == ifrag
        DO i1 
	where (int)SwOccA_frag[(index)i1] == ifrag

               GET                T2old_mono[a,i,a1,i1] 
               GET                Vaibj[a,i,a1,i1]  
               GET                Vaibj[a,i1,a1,i]  

               t1ppqq[a,i,a1,i1] = Vaibj[a,i,a1,i1]  
               t3ppqq[a,i1,a1,i] = Vaibj[a,i1,a1,i]  
               t2ppqq[a,i,a1,i1] = t3ppqq[a,i1,a1,i] 
               t1ppqq[a,i,a1,i1]*= 2.0  
               t1ppqq[a,i,a1,i1]-= t2ppqq[a,i,a1,i1] 

               etemp = T2old_mono[a,i,a1,i1]*t1ppqq[a,i,a1,i1] 
               esum += etemp 

        ENDDO i1  
        ENDDO a1  
        ENDDO i  
        ENDDO a  

        t2p[ifrag]        = esum 
        PUT e20c[ifrag]   = t2p[ifrag] 

      ENDIF # etemp > cc_conv 

      ENDPARDO ifrag 
      sip_barrier 

      PARDO ifrag 
         GET                  e20c[ifrag] 
         GET                  e20c_old[ifrag] 
         tp[ifrag]          = e20c_old[ifrag]  
         tp[ifrag]         -= e20c[ifrag]  
         PUT e2error[ifrag] = tp[ifrag] 
         PUT e20c_old[ifrag]= e20c[ifrag] 
      ENDPARDO ifrag 
      sip_barrier 
#
# -----------------------------------------------------------------------------
#     END OF FRAGMENT ITERATIONS 
# -----------------------------------------------------------------------------
      elccd = 0.0
      sip_barrier
      collective elccd += esum
      sip_barrier

      print elccd
      ediff = elccd - eold
      escr = ediff**2.0
      ediff = escr**0.5
      if ediff < cc_conv
	  exit #kiter
      endif
      eold = elccd
#
      ENDDO kiter 
      mono_lccd = 0.0 
      esum = 0.0 
      sip_barrier
#
      print "Final CCPT2 energy of MONOMER" 
      execute get_my_rank rank
      if rank == 0.0
      do ifrag
#      do jfrag
#       if ifrag == jfrag 
	 allocate contiguous monomer_lccd[ifrag:ifrag]
         GET                        e20c[ifrag] 
         monomer_lccd[ifrag:ifrag] = e20c[ifrag]  
	 print monomer_lccd[ifrag:ifrag]
         etemp = e20c[ifrag] 
         esum -= etemp 
	 deallocate contiguous monomer_lccd[ifrag:ifrag]
#       endif 
#      enddo jfrag
      enddo ifrag
      endif
      sip_barrier
      collective mono_lccd += esum  
#
# -----------------------------------------------------------------------------
#     END OF T2 MONOMER CALCULATIONS  
# -----------------------------------------------------------------------------
# 
      ENDPROC FORM_T2_MONOMER  
#
# -----------------------------------------------------------------------------
# 
#     START OF MAIN PROGRAM  
#
# -----------------------------------------------------------------------------
# 
#     Set fragment parameters   
#     ----------------------- 
#
# Restore the persistent arrays. 
     #create DCa 
     #create DFock_a
      sip_barrier
#      restore_persistent Dca "ca" 
#      set_persistent Dca "ca" 
#      restore_persistent DFock_a "fock_a"
#      set_persistent DFock_a "fock_a"
      rmaster = 0
      allocate sp[*] 
      zero = 0.0 
      one  = 1.0 
      print r_thresh 
      print elst_thresh 
      mone = -1.0 
      print cc_conv 
      sip_barrier
#
      CALL SET_FRAG_PARMS   
      sip_barrier 
      print "Done setting fragment parameters" 
      print "Performing monomer SCF"
      call IGUESS
      sip_barrier 


#     Compute the NN repusion between fragments  
#     ----------------------------------------- 
      nn_rep = 0.0 
      execute compute_nn_repulsion nn_rep
      print nn_rep 
#
#     Perform 2-el integral transformation and calculate second order energies   
#     ------------------------------------------------------------------------ 
#
      sip_barrier 
      CALL FRAG_TRAN 
      sip_barrier 
      print "Done two-electron integral transformation" 
#
#     Form the electrostatic potential(complete) of all fragments  
#     ----------------------------------------------------------- 
#
      CALL FORM_ELSTPOT 
      sip_barrier 
      print "Done forming electrostatic potential" 
# Now we will compute the Hartree-Fock exchange energy 
# Compute the exchange and polarization energies 
      CALL OVERLAP_TRANS 
      print "Done transforming overlap" 
#
#     Form the density based exchange energy  
#     -------------------------------------- 
#
      CALL EXCHANGE_ALT
      print "Done forming density based exchange energy" 
#
#     Compute the CCPT(2) dimer_doubles amplitudes for Fragment 1.  
#     ------------------------------------------------------ 
#
      CALL FORM_T10
      sip_barrier 
      CALL FORM_T1
      sip_barrier 
      print "Completely Done singles formation" 
      sip_barrier 
#
#     Compute the CCPT(2) dimer_doubles amplitudes for Fragment 1.  
#     ------------------------------------------------------ 
      CALL FORM_T2_0GUESS 
      sip_barrier 
      print "Done forming T2_0guess" 

# Start macro-iterations 
      DO jiter 
         sip_barrier 
	 print "Macro iteration"
	 print jiter

         PARDO ifrag 
           GET                   e20c[ifrag] 
           PUT e2_macro[ifrag] = e20c[ifrag] 
         ENDPARDO ifrag  

         sip_barrier 
         CALL FORM_T2_GUESS 
         sip_barrier 
	 print "Entering FORM_T2_FRAGMENT_ITERS"
         CALL FORM_T2_FRAGMENT_ITERS 
         sip_barrier 
	 print "Entering FORM_T2_DIMER_ITERS"
         CALL FORM_T2_DIMER_ITERS 
         print "Done forming T2 Dimer calculation" 
         fragment_doubles = 0.0 
         esum = 0.0 
         sip_barrier 
# Print out energies after each macroiteration  
         execute get_my_rank rank
         if rank == 0.0
         print "MCPT(2) monomer macro-iteration energies"
         DO ifrag
            allocate contiguous macro_e20[ifrag:ifrag]
            GET                 e20c[ifrag] 
            macro_e20[ifrag:ifrag]  = e20c[ifrag] 
            print macro_e20[ifrag:ifrag] 
            etemp = e20c[ifrag] 
            fragment_doubles += etemp 
            deallocate contiguous macro_e20[ifrag:ifrag]
         ENDDO ifrag   

         print "MCPT(2) dimer macro-iteration energies"
	 do ifrag
	 do jfrag
	     WHERE jfrag > ifrag 
	     where (int)elst_dist[ifrag,jfrag] == ifrag
	     icount = (scalar)ifrag
	     jcount = (scalar)jfrag

		 allocate contiguous macro_d20[ifrag:ifrag,jfrag:jfrag]
		 get d20c[ifrag,jfrag]
		 macro_d20[ifrag:ifrag,jfrag:jfrag] = d20c[ifrag,jfrag]
		 print macro_d20[ifrag:ifrag,jfrag:jfrag]
		 deallocate contiguous macro_d20[ifrag:ifrag,jfrag:jfrag]
	 enddo jfrag
	 enddo ifrag
         endif
         sip_barrier 

# Determine if full macro convergence is met 
         do_iter = 0.0 
         DO ifrag 
           GET          e20c[ifrag] 
           GET          e2_macro[ifrag] 
           tp[ifrag]  = e20c[ifrag]  
           tp[ifrag] -= e2_macro[ifrag]  
           execute return_sval tp[ifrag] etemp  
           if etemp < zero 
              etemp *= -1.0 
           endif 
           IF etemp > cc_conv 
              do_iter = 2.0 
           ENDIF 
         ENDDO ifrag 
         print etemp 
         print do_iter  
         sip_barrier 
         if do_iter < 1.0 
            exit 
         endif 
#
      ENDDO jiter 
      sip_barrier
#
      CALL FORM_T2_MONOMER  
      sip_barrier
#
      eint_tot  = 0.0 
      eint_tot += e1x_at  
      eint_tot += e10pol_at  
      eint_tot += eps1_pol   
      eint_tot += singles  
      eint_tot += dimer_doubles  
      eint_tot += fragment_doubles  
      eint_tot += mono_lccd   

      print e1x_at 
      print e10pol_at 
      print eps1_pol  
      print singles  
      print dimer_doubles  
      print fragment_doubles  
      print mono_lccd  

      print eint_tot 

         sip_barrier 
                           ENDSIAL FRAG_2ORDER_CORR 
##
################################################################################
#
# 
