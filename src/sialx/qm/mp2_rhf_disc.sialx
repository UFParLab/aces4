      import "rccsd_rhf_defs.sialx"
#
      SIAL MP2_RHF_DISC          
#
# Declare indices 
# --------------- 
#
      index   kiter  = 1: scf_iter  
      #index   kiter  = 1, 1  
      index   kbeg   = 1: scf_beg
      index   korder = 1: scf_hist
      index   kptr1  = 1: 2
      index   kptr2  = 1: 2
      index   kone   = 1: 1
      index   kdiis  = 1: 30 
      index   d1     = 1: 30 
      index   d2     = 1: 30 
      index   d3     = 1: 30 
      index   d4     = 1: 30 
      index   iiter1 = 1: 1
      index   jjter1 = 1: 1
      index   jjter2 = 2: 2
#
      aoindex mu     = 1: norb
      aoindex nu     = 1: norb
      aoindex lambda = 1: norb
      aoindex sigma  = 1: norb
#
      moaindex i = baocc: eaocc
      moaindex i1= baocc: eaocc
      moaindex i2= baocc: eaocc
      moaindex i3= baocc: eaocc
#
      moaindex a = bavirt: eavirt
      moaindex a1= bavirt: eavirt
      moaindex a2= bavirt: eavirt
      moaindex a3= bavirt: eavirt
#
      moaindex j = baocc: eaocc
      moaindex j1= baocc: eaocc
      moaindex j2= baocc: eaocc
      moaindex j3= baocc: eaocc
#
      moaindex b = bavirt: eavirt
      moaindex b1= bavirt: eavirt
      moaindex b2= bavirt: eavirt
      moaindex b3= bavirt: eavirt
#
      moaindex p = baocc: eavirt
      moaindex p1= baocc: eavirt
      moaindex p2= baocc: eavirt
      moaindex p3= baocc: eavirt
#
      moaindex q = baocc: eavirt
      moaindex q1= baocc: eavirt
      moaindex q2= baocc: eavirt
      moaindex q3= baocc: eavirt
# 
# Declare HF coefficients and fock matrices arrays 
# ------------------------------------------------  
#
      distributed Dca[mu,p] 
      distributed FTa[p,p1] 
# Declare one-particle density arrays 
# ----------------------------------- 
#

      distributed Dhfa[mu,nu] 
      distributed Dhfb[mu,nu] 
      distributed Dhfa_old[mu,nu] 
      distributed Dhfb_old[mu,nu] 
#
      distributed Fpq_a[mu,nu] 
      distributed Fpq_b[mu,nu] 
      distributed FTpq_a[mu,nu] 
      distributed FTpq_b[mu,nu] 
      distributed CBT_a[mu,p] 
      distributed CBT_b[mu,q] 
# Declare temporary arrays 
# ------------------------ 
#
      temp txa[mu,a] 
      temp Ixi[mu,i] 
      temp I1xi[mu,i] 
      temp Ixj[mu,j] 
      temp I1xj[mu,j] 
      temp Tpq[mu,nu] 
      temp T1pq[mu,nu] 
      temp Txi[mu,i] 
      temp Tix[i,mu] 
      temp Tax[a,mu] 
      temp T1xi[mu,i] 
      temp Txj[mu,j] 
      temp T1xj[mu,j] 
      temp Txx[mu,nu] 
      temp TAxx[mu,nu] 
      temp TBxx[mu,nu] 
      temp T1xx[mu,nu] 
      temp T2xx[mu,nu] 
      temp T3xx[mu,nu] 
      temp T4xx[mu,nu] 
      temp T5xx[mu,nu] 
      temp T6xx[mu,nu] 
      temp T7xx[mu,nu] 
      temp T8xx[mu,nu] 
      temp T9xx[mu,nu] 
      temp T10xx[mu,nu] 
      temp T11xx[mu,nu] 
      temp T12xx[mu,nu] 
      temp T13xx[mu,nu] 
      temp T14xx[mu,nu] 
      temp T15xx[mu,nu] 
      temp T16xx[mu,nu] 
      temp T17xx[mu,nu] 
      temp T18xx[mu,nu] 
      temp T19xx[mu,nu] 
      temp T20xx[mu,nu] 
      temp T21xx[mu,nu] 
      temp T22xx[mu,nu] 
      temp Tii[i,i1] 
      temp T1ii[i,i1] 
      temp Tjj[j,j1] 
      temp T1jj[j,j1] 
      temp Txp[mu,p] 
      temp T1xp[mu,p] 
      temp Tpp[p,p1] 
      temp T1pp[p,p1] 
      temp Txq[mu,q] 
      temp T1xq[mu,q] 
      temp Tqq[q,q1] 
      temp T1qq[q,q1] 
      temp Tpx[p,mu] 
#
# Declare integral arrays 
# --------------------- 
#
      temp aoint[mu,nu,lambda,sigma]
      distributed Daoint[mu,nu,lambda,sigma]
      temp txaxa[mu,a,lambda,a1] 
#
# Declare scalars 
# --------------- 
#
      scalar e_a     
      scalar e_b     
      scalar escf_a 
      scalar escf_b 
      scalar etemp 
      scalar esum 
      scalar esum1
      scalar energy 
      scalar energy1 
      scalar energy2 
      scalar ecrit 
      scalar ediff  
#     scalar damp 
      scalar damp1 
      scalar done 
      scalar donea 
      scalar doneb 
   
      scalar zero 
      scalar mone 
      scalar one
      scalar two
      scalar three
      scalar four
      scalar ncount1 
      scalar rank 
#
# Arrays used in mp2 calculation
#
      distributed Vxixi[mu,i1,nu,i]
      distributed Vaiai[a,i1,a1,i]
      distributed VSaiai[a,i1,a1,i]
      distributed Vxjxj[mu,j1,nu,j]
      distributed Vbjbj[b,j1,b1,j]
      distributed Vxixj[mu,i,nu,j]
      distributed Vaibj[a,i,b,j]

      temp V0xxxi[mu,nu,lambda,i]
      temp V2xxxi[mu,nu,sigma,i]

      temp Txxxi[mu,nu,lambda,i]
      temp Txxxj[mu,nu,lambda,j]
      temp Txiai[mu,i,a,i1]
      temp T1xiai[mu,i,a,i1]
      temp Txjbj[mu,j,b,j1]
      temp Txibj[mu,i,b,j1]
      temp Txixi[mu,i,nu,i1]
      temp T1xixi[mu,i,nu,i1]
      temp Txjxj[mu,j,nu,j1]
      temp T1xjxj[mu,j,nu,j1]
      temp Txixj[mu,i,nu,j]
      temp T1xixj[mu,i,nu,j]
      temp Taiai[a,i,a1,i1]
      temp T1aiai[a,i,a1,i1]
      temp Tbjbj[b,j,b1,j1]
      temp T1bjbj[b,j,b1,j1]
      temp Taibj[a,i,b,j]
      temp T1aibj[a,i,b,j]
      temp Tiajb[i,a,j,b]
      temp Tiaia[i,a,i1,a1]

      scalar ecorraa 
      scalar esumaa 
      scalar mp2_correlation
      scalar mp2_energy 

      static ca[mu,p]
      static fock_a[p,p1]
      static oed_nai[aces_defs_mu,aces_defs_mu]
      static oed_kin[aces_defs_mu,aces_defs_mu]
      static oed_ovl[aces_defs_mu,aces_defs_mu]

      static fockrohf_a[aces_defs_mu,aces_defs_mu]
      static fockrohf_b[aces_defs_mu,aces_defs_mu]

      served T2old_aa[a,i,a1,i1]
      served T2old_ab[a,i,b,j]
      served L2old_ab[i,a,j,b]
      served L2old_aa[i,a,i1,a1]
 
# ---------------------------------------------------------------------------- 
#
     PROC TRAN_XXOO 
#
#    ------------------------------------------------------------------------ 
#
# Compute the integrals  
#
     create Daoint 
     esumaa = 0.0 
     sip_barrier 
 
     PARDO mu, nu, lambda, sigma  
           WHERE mu     < nu
           WHERE lambda < sigma
                 execute compute_ubatch6 aoint[mu,nu,lambda,sigma] oed_kin oed_ovl fockrohf_a fockrohf_b
                 PUT Daoint[mu,nu,lambda,sigma] = aoint[mu,nu,lambda,sigma] 
     ENDPARDO mu, nu, lambda, sigma  
 
     PARDO mu, nu, lambda, sigma  
           WHERE mu     == nu
           WHERE lambda < sigma
                 execute compute_ubatch6 aoint[mu,nu,lambda,sigma] oed_kin oed_ovl fockrohf_a fockrohf_b
                 PUT Daoint[mu,nu,lambda,sigma] = aoint[mu,nu,lambda,sigma] 
     ENDPARDO mu, nu, lambda, sigma  
 
     PARDO mu, nu, lambda, sigma  
           WHERE mu     < nu
           WHERE lambda == sigma
                 execute compute_ubatch6 aoint[mu,nu,lambda,sigma] oed_kin oed_ovl fockrohf_a fockrohf_b
                 PUT Daoint[mu,nu,lambda,sigma] = aoint[mu,nu,lambda,sigma] 
     ENDPARDO mu, nu, lambda, sigma  
 
     PARDO mu, nu, lambda, sigma  
           WHERE mu     == nu
           WHERE lambda == sigma
                 execute compute_ubatch6 aoint[mu,nu,lambda,sigma] oed_kin oed_ovl fockrohf_a fockrohf_b
                 PUT Daoint[mu,nu,lambda,sigma] = aoint[mu,nu,lambda,sigma] 
     ENDPARDO mu, nu, lambda, sigma  
 
     sip_barrier 
 
########################################################################
#                                                                      #     
#                                 GPU                                  #
#                                                                      #
########################################################################
    gpu_on
 
        create Vxixi #(*,*,*,i)
        create Vaiai #(*,*,*,i)    
        sip_barrier 
 
        PARDO mu, nu, lambda, sigma  
 
              WHERE mu     < nu
              WHERE lambda < sigma
 
                 GET                      Daoint[mu,nu,lambda,sigma] 

              DO i 
                 V0xxxi[mu,nu,lambda,i] = DAOINT[mu,nu,lambda,sigma]*ca[sigma,i]
                 V2xxxi[mu,nu,sigma,i]  = DAOINT[mu,nu,lambda,sigma]*ca[lambda,i]
 
                 DO i1  
 
                    Txixi[mu,i1,lambda,i]      = V0xxxi[mu,nu,lambda,i]*ca[nu,i1]
                    put Vxixi[mu,i1,lambda,i] += Txixi[mu,i1,lambda,i]
 
                    T1xixi[mu,i1,sigma,i]      = V2xxxi[mu,nu,sigma,i]*ca[nu,i1]
                    put Vxixi[mu,i1,sigma,i]  += T1xixi[mu,i1,sigma,i]
 
                 ENDDO i1  
 
                 DO i1
 
                    Txixi[nu,i1,lambda,i]      = V0xxxi[mu,nu,lambda,i]*ca[mu,i1]
                    put Vxixi[nu,i1,lambda,i] += Txixi[nu,i1,lambda,i]
 
                    T1xixi[nu,i1,sigma,i]      = V2xxxi[mu,nu,sigma,i]*ca[mu,i1]
                    put Vxixi[nu,i1,sigma,i]  += T1xixi[nu,i1,sigma,i]
 
                 ENDDO i1

              ENDDO i 
 
        ENDPARDO mu, nu, lambda, sigma  
 
        PARDO mu, nu, lambda, sigma  
 
              WHERE mu     == nu
              WHERE lambda < sigma
 
                 GET                      Daoint[mu,nu,lambda,sigma] 

              DO i 
                 V0xxxi[mu,nu,lambda,i] = DAOINT[mu,nu,lambda,sigma]*ca[sigma,i]
                 V2xxxi[mu,nu,sigma,i]  = DAOINT[mu,nu,lambda,sigma]*ca[lambda,i]
 
                 DO i1
 
                    Txixi[mu,i1,lambda,i]      = V0xxxi[mu,nu,lambda,i]*ca[nu,i1]
                    put Vxixi[mu,i1,lambda,i] += Txixi[mu,i1,lambda,i]
 
                    T1xixi[mu,i1,sigma,i]      = V2xxxi[mu,nu,sigma,i]*ca[nu,i1]
                    put Vxixi[mu,i1,sigma,i]  += T1xixi[mu,i1,sigma,i]
 
                 ENDDO i1

              ENDDO i 
 
        ENDPARDO mu, nu, lambda, sigma
 
        PARDO mu, nu, lambda, sigma
 
              WHERE mu     < nu
              WHERE lambda == sigma
 
                 GET                      Daoint[mu,nu,lambda,sigma] 

              DO i 
                 V0xxxi[mu,nu,lambda,i] = DAOINT[mu,nu,lambda,sigma]*ca[sigma,i]
 
                 DO i1
 
                    Txixi[mu,i1,lambda,i]      = V0xxxi[mu,nu,lambda,i]*ca[nu,i1]
                    put Vxixi[mu,i1,lambda,i] += Txixi[mu,i1,lambda,i]
 
                    T1xixi[nu,i1,lambda,i]     = V0xxxi[mu,nu,lambda,i]*ca[mu,i1]
                    put Vxixi[nu,i1,lambda,i] += T1xixi[nu,i1,lambda,i]
 
                 ENDDO i1

              ENDDO i 
 
        ENDPARDO mu, nu, lambda, sigma
#
        PARDO mu, nu, lambda, sigma
 
              WHERE mu     == nu
              WHERE lambda == sigma
 
                 GET                      Daoint[mu,nu,lambda,sigma] 

              DO i 
                 V0xxxi[mu,nu,lambda,i] = DAOINT[mu,nu,lambda,sigma]*ca[sigma,i]
 
                 DO i1
 
                    Txixi[mu,i1,lambda,i]      = 0.0  
                    Txixi[mu,i1,lambda,i]      = V0xxxi[mu,nu,lambda,i]*ca[nu,i1]
                    PUT Vxixi[mu,i1,lambda,i] += Txixi[mu,i1,lambda,i]
 
                 ENDDO i1

              ENDDO i 
 
        ENDPARDO mu, nu, lambda, sigma
        
        sip_barrier
 
        PARDO a1, mu, i1

           DO i 
 
           Txiai[mu,i1,a1,i] = 0.0
 
           DO lambda
 
              get                  Vxixi[mu,i1,lambda,i]
              T1xiai[mu,i1,a1,i] = 0.0  
              T1xiai[mu,i1,a1,i] = Vxixi[mu,i1,lambda,i]*ca[lambda,a1]
             #T1xiai(mu,i1,a1,i) = ca(lambda,a1)*Vxixi(mu,i1,lambda,i)
              Txiai[mu,i1,a1,i] += T1xiai[mu,i1,a1,i]
 
           ENDDO lambda
 
           DO a
 
              Taiai[a,i1,a1,i]      = 0.0  
              Taiai[a,i1,a1,i]      = Txiai[mu,i1,a1,i]*ca[mu,a]
             #Taiai(a,i1,a1,i)      = ca(mu,a)*Txiai(mu,i1,a1,i)
              PUT Vaiai[a,i1,a1,i] += Taiai[a,i1,a1,i]
 
           ENDDO a
 
           ENDDO i 
 
        ENDPARDO a1, mu, i1
 
        sip_barrier
        delete Vxixi #(*,*,*,i)
 
        PARDO a, a1, i1

           DO i 
 
              get                        Vaiai[a,i1,a1,i]
              get                        Vaiai[a1,i1,a,i]

              Taiai[a,i1,a1,i]         = Vaiai[a,i1,a1,i]
              T1aiai[a,i1,a1,i]        = Vaiai[a1,i1,a,i]

              Taiai[a,i1,a1,i]        *= 2.0  
              Taiai[a,i1,a1,i]        -= T1aiai[a,i1,a1,i] 
#
# Compute the denominator 
              execute energy_denominator_rhf Taiai[a,i1,a1,i] fock_a 
              etemp                    = Taiai[a,i1,a1,i]*Vaiai[a,i1,a1,i]
              esumaa                  += etemp

           ENDDO i 
 
        ENDPARDO a, a1, i1
 
        sip_barrier
 
########################################################################
#                                                                      #     
#                                 GPU                                  #
#                                                                      #
########################################################################
    gpu_off
#
#    ------------------------------------------------------------------------ 
#
     ENDPROC TRAN_XXOO
# 
#    ------------------------------------------------------------------------ 

     PROC MP2_RHF
# 
     sip_barrier
     collective ecorraa += esumaa
     sip_barrier

#
     restore_persistent scf_energy "scf_energy"
     server_barrier
     mp2_correlation = ecorraa
     totenerg  = ecorraa
     totenerg += scf_energy
     mp2_energy = totenerg
     print " "
     print scf_energy
     print mp2_correlation
     print mp2_energy
     set_persistent scf_energy "scf_energy"
     set_persistent totenerg "totenerg"

# 
#    ------------------------------------------------------------------------ 
# 
     ENDPROC MP2_RHF
# 
#    ------------------------------------------------------------------------ 
# 
############################################################################## 
#
#                         START OF MAIN PROGRAM 
#
############################################################################## 
#
#     Define a few constants 
#     ---------------------- 
      print " "
      print "-- Parallel direct MP2 program"
      print "-- Written by Victor F. Lotrich, 2014"
      print " "
      sip_barrier
#
      restore_persistent fock_a "fock_a" 
      restore_persistent Ca "ca"
      sip_barrier

#     Start the mp2 calculation  
#     ------------------------------------------------ 

      CALL TRAN_XXOO 
      CALL MP2_RHF
      sip_barrier 
#
      PARDO a, b, i, j 
#
           get                     Vaiai[a,i,b,j]   
           get                     Vaiai[b,j,a,i]   
           Taibj[a,i,b,j]            = Vaiai[b,j,a,i]
           Taibj[a,i,b,j]           += Vaiai[a,i,b,j]
           execute energy_denominator_rhf  Taibj[a,i,b,j] fock_a  
           Taibj[a,i,b,j]           *= 0.5  
           Tiajb[i,a,j,b]            = Taibj[a,i,b,j]
           PREPARE T2old_ab[a,i,b,j] = Taibj[a,i,b,j]  
	   prepare L2old_ab[i,a,j,b] = Tiajb[i,a,j,b]
#
      ENDPARDO a, b, i, j 
      SERVER_BARRIER  
      PARDO a, i, b, j 
            REQUEST                     T2old_ab[a,i,b,j]  
            REQUEST                     T2old_ab[a,j,b,i]  
            taiai[a,i,b,j]            = T2old_ab[a,i,b,j] 
            t1aiai[a,i,b,j]           = T2old_ab[a,j,b,i] 
            taiai[a,i,b,j]           -= t1aiai[a,i,b,j] 
	    Tiaia[i,a,j,b] = taiai[a,i,b,j]
            PREPARE T2old_aa[a,i,b,j] = taiai[a,i,b,j] 
	    prepare L2old_aa[i,a,j,b] = Tiaia[i,a,j,b]
      ENDPARDO a, i, b, j 
      SERVER_BARRIER  

      has_singles = 0.0
      is_ccpt = 1.0
      set_persistent fock_a "fock_a" 
      set_persistent Ca "ca"
      set_persistent has_singles "has_singles"
      set_persistent is_ccpt "is_ccpt"
      set_persistent T2old_aa "T2old_aa"
      set_persistent T2old_ab "T2old_ab"
      set_persistent L2old_aa "L2old_aa"
      set_persistent L2old_ab "L2old_ab"
#
                           ENDSIAL MP2_RHF_DISC          
#
###############################################################################
#
